#define PROBEREQUESTS     true
#define MQTT              true
#define WEBSOCKETS        true
#define ASYNCWEBSERVER    true

#include <WiFi.h>

const char* ssid = ""; // Your WiFi SSID
const char* password = ""; // Your WiFi Password
const char* apSSID = "ESP";
const char* apPassword = "";
const int apChannel = 7;
const int hidden = 0; // If hidden is 1 probe request event handling does not work ?

//char sensorData [256];
//char deviceData [256];
char s [256];
String deviceData;
String sensorData;
int device;
float voltage;
uint8_t mac[6];
int sensorValues[4];
int sensorTypes[4];
int deviceStatus[4];

int Livingroom[4] = {16,26,36,46};
int Kitchen[4] =    {46,36,26,16};
int Bedroom1[4] =   {46,36,26,16};
int Bedroom2[4] =   {16,26,36,36};
int Bedroom3[4] =   {16,26,36,36};
int Bedroom4[4] =   {16,26,36,36};
int Bathroom1[4] =  {16,26,36,36};
int Bathroom2[4] =  {16,26,36,36};
int Bathroom3[4] =  {16,26,36,36};
int Bathroom4[4] =  {16,26,36,36};
int Laundry[4] =    {16,26,36,36};
int Boiler[4] =     {16,26,36,36};
int Workshop[4] =   {16,26,36,36};
int Garage[4] =     {16,26,36,36};
int Office[4] =     {16,26,36,36};
int Tank[4] =       {16,26,36,36};
int Solar[4] =      {16,26,36,36};


#if PROBEREQUESTS
#include <esp_wifi.h>
#endif

#if MQTT
#include <TinyMqtt.h>   // Thanks to https://github.com/hsaturn/TinyMqtt
#endif

#if WEBSOCKETS
#include <ArduinoWebsockets.h>  // Thanks to https://github.com/gilmaimon/ArduinoWebsockets
using namespace websockets;
WebsocketsServer WSserver;
#endif



#if ASYNCWEBSERVER
#include <ESPAsyncWebServer.h>  // Install manually to arduino folder

int index_html_gz_len = 2145;
const uint8_t index_html_gz[] = {
 0x1f,0x8b,0x08,0x08,0xaf,0x22,0x9f,0x60,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0x75,0x56,0x51,0x6f,0xdb,0x36,0x10,0x7e,0x8e,0x7e,0xc5,0x41,0x0f,0xb3,0x8c,0x2c,0x52,0x96,0x16,0x43,0x10,0xcb,0x06,0x9a,0x62,0xd9,0x06,0xb4,0x2f,0x4d,0x86,0x3d,0x74,0x7d,0xa0,0x24,0x3a,0xe6,0x4a,0x91,0x02,0x49,0xd9,0xf5,0xd6,0xfc,0xf7,0x7e,0x27,0xc9,0xb6,0xec,0x24,0x82,0x6c,0xc9,0xe4,0xdd,0xc7,0xbb,0xef,0x3e,0x1e,0x9d,0xaf,0x42,0xad,0x17,0x51,0x5e,0xd8,0x6a,0x8b,0xc7,0xea,0x6a,0xf1,0xb7,0x2c,0xee,0x6d,0xf9,0x55,0x06,0x9f,0x67,0xf8,0x99,0x17,0xae,0xfb,0x44,0x79,0xb3,0xc8,0x95,0x69,0xda,0x40,0xaa,0x9a,0xc7,0x5e,0x9a,0xf0,0x51,0x7a,0x2f,0x1e,0x65,0x4c,0x61,0xdb,0xc8,0x79,0x1c,0xe4,0xb7,0x10,0x93,0x57,0xff,0xe1,0xfd,0xed,0x65,0x4c,0x6b,0xa1,0x5b,0xbc,0x5e,0xfe,0x9a,0xe1,0x8e,0x79,0x8d,0x36,0x04,0x6b,0xc8,0x9a,0x52,0xab,0xf2,0x6b,0x87,0x51,0x3d,0xc0,0x29,0x99,0xc6,0x8b,0x7b,0xbc,0xd3,0x7b,0x5b,0xd7,0xc2,0x54,0x79,0xd6,0x5b,0x2e,0xf2,0xac,0x81,0x5b,0xab,0xbb,0x15,0x9d,0x2c,0xa5,0x5a,0xcb,0x6a,0xb7,0xea,0x62,0xb0,0xf6,0xf4,0x13,0x0d,0x63,0x9e,0x76,0x46,0xb4,0x74,0xb6,0x26,0x2f,0xdd,0x5a,0x3a,0x12,0x4d,0x23,0x85,0xa3,0x42,0x6a,0xbb,0xa1,0x28,0xcf,0x5a,0x4e,0xd8,0x97,0x4e,0x35,0xa1,0x0f,0x7d,0xc2,0xa1,0x67,0xff,0x8a,0xb5,0xe8,0x47,0x27,0x8b,0x28,0x52,0x4b,0x4a,0xe2,0x3d,0x17,0x31,0x29,0x43,0x1b,0x65,0x2a,0xbb,0x99,0xd2,0xff,0xd1,0x1a,0x70,0x1b,0x4f,0x73,0x32,0x72,0x43,0x7b,0x23,0x38,0x6c,0xfc,0x4d,0x96,0xc5,0x74,0x3e,0xd8,0xa6,0xda,0x96,0x22,0x28,0x6b,0xd2,0x95,0xf5,0xc1,0x88,0x5a,0x62,0x2a,0xbe,0xb9,0xbe,0xbc,0x7e,0x1b,0x4f,0x67,0x94,0x65,0x64,0x1b,0x09,0xe0,0x3d,0x42,0x69,0x8d,0x91,0x25,0x7b,0x00,0x3f,0xb5,0xa6,0x9b,0x9e,0xd3,0xb2,0x35,0xfd,0x60,0xc2,0xab,0x47,0xf0,0xbb,0xe0,0x0b,0x09,0x82,0x35,0x0e,0x9e,0x2a,0x11,0x44,0x3f,0x18,0x45,0xd1,0xde,0xfc,0xc0,0xf0,0x10,0xf4,0xa8,0x6c,0x80,0xad,0x6c,0xd9,0xd6,0x18,0x49,0x1f,0x65,0xf8,0x4d,0x4b,0x7e,0xbd,0xdd,0xfe,0x59,0x25,0x93,0x91,0xd9,0x64,0x9a,0x76,0x85,0x9c,0x45,0xda,0x3e,0x26,0x13,0xae,0x93,0x32,0x8f,0x37,0x34,0x41,0x26,0x23,0xb3,0xe9,0x2c,0x42,0xc0,0xbc,0x5e,0x72,0x3c,0xfa,0x34,0x0a,0x87,0x11,0x4e,0xca,0xb8,0x0b,0x4c,0xab,0x71,0x3c,0xa5,0x93,0x22,0xc8,0x21,0xa4,0x64,0xa2,0xd5,0x04,0x48,0x5a,0xa5,0x0a,0xec,0xb8,0x3f,0x1e,0x3e,0x7e,0x80,0xf1,0x09,0xd0,0x2c,0x7a,0x35,0x9b,0x13,0x4b,0x64,0xc4,0x8a,0x30,0xd5,0xfb,0x95,0xd2,0x55,0xa2,0x55,0x17,0xe5,0xd9,0x19,0x27,0x60,0x4d,0xbd,0x67,0xe7,0x40,0xba,0x5c,0x07,0xc4,0x49,0x11,0xb1,0x28,0x58,0x31,0x76,0xc9,0x63,0x29,0x93,0x3e,0xa5,0xf9,0x7c,0x4e,0x13,0x1f,0x1c,0x68,0x99,0xd0,0xf7,0xef,0xb4,0x9b,0x81,0x64,0x7c,0x10,0xa6,0x84,0x35,0xdd,0x77,0xd3,0x0c,0x82,0xda,0xe1,0xfe,0xeb,0xe1,0xee,0xe2,0x9a,0x96,0xd6,0xd5,0x22,0x04,0xc8,0xb5,0x77,0xef,0xaa,0x38,0x2a,0xef,0x10,0xf8,0xb3,0x0a,0x77,0x95,0xf8,0xf4,0x92,0xd4,0xb9,0x2a,0xfb,0xc8,0x66,0x40,0x12,0x5a,0x3a,0x16,0xe6,0xef,0x16,0x5a,0x67,0x98,0xb1,0xb5,0xe5,0xaf,0xbd,0xf8,0x6e,0x88,0x85,0x3b,0xf2,0x7e,0xea,0x13,0x7e,0x29,0x9f,0x5b,0x6d,0x8b,0x21,0x9b,0x42,0x19,0xe1,0xb6,0xaf,0x85,0x3e,0x9a,0x25,0xe1,0xa9,0x80,0x1f,0x61,0xd3,0x52,0x58,0x41,0xd8,0x50,0x3b,0x22,0x40,0x43,0xc1,0x6d,0x82,0x25,0xe1,0x9c,0xd8,0x52,0xd1,0x2e,0x97,0x88,0x6b,0x10,0x33,0x8b,0xa3,0xde,0xde,0x69,0x2b,0xc2,0x9b,0xab,0x77,0x9d,0x01,0xb6,0x5d,0xab,0xf5,0x6c,0x98,0xea,0xc6,0x6e,0x7b,0x9f,0xe3,0x99,0x3b,0xa5,0xe5,0x27,0x29,0xaa,0x7e,0x02,0x3b,0x75,0x34,0x90,0x20,0xbf,0xb1,0x05,0x2a,0x8f,0x25,0xaa,0x93,0xb2,0x43,0x42,0x2c,0x50,0x3a,0xba,0x4e,0x97,0xec,0xcc,0xd2,0x20,0x1c,0x74,0x97,0x3a,0xe9,0x5b,0x1d,0x66,0xcf,0x5c,0x4e,0x13,0xe0,0x68,0xc6,0x43,0xc9,0x11,0x6a,0xdf,0x1b,0xf2,0x39,0xd9,0xd6,0xf5,0xdc,0x29,0x4f,0x06,0xdd,0x6b,0x25,0x9d,0xfc,0x99,0x7b,0x11,0xf8,0x1b,0xe8,0x42,0x35,0xde,0x5c,0x81,0x67,0x94,0x96,0x01,0x59,0x46,0x8d,0x05,0x9d,0xa0,0xa2,0x2e,0xa4,0xf3,0x3b,0x0a,0x0f,0xdb,0xbe,0x13,0x03,0xd7,0xfa,0x68,0xcd,0xb4,0xd8,0x06,0xf9,0x41,0x9a,0xc7,0xb0,0xe2,0x26,0x45,0xfc,0xd3,0x33,0xfa,0xb8,0x84,0xaf,0xab,0xe7,0x1f,0xf3,0x59,0x7e,0x13,0x75,0xa3,0x25,0xfd,0x72,0xf9,0x25,0x9e,0x45,0x10,0x37,0x25,0xbc,0x34,0xef,0xec,0xcb,0x19,0x1e,0xf9,0x09,0x0f,0xa9,0xee,0x56,0xc3,0xd4,0xf9,0xf9,0x74,0x14,0xe1,0x39,0x42,0x1c,0xe2,0x3b,0xe2,0xe8,0xb3,0xfa,0x32,0x92,0xf4,0xde,0x1e,0x95,0x3c,0x66,0x9b,0x08,0x56,0xd8,0xcc,0xa5,0xb6,0x5e,0x72,0xa5,0x99,0xcc,0xb0,0x02,0x85,0xb8,0x37,0x4c,0xe1,0xcb,0x1d,0x17,0x2d,0xc1,0xd3,0x05,0xb3,0xcb,0xb4,0x7b,0xd5,0x25,0x13,0x37,0xce,0x06,0x5b,0x5a,0x0d,0x46,0x9c,0xdd,0x20,0x77,0xea,0x70,0x7d,0x57,0x82,0x91,0x37,0xce,0x2c,0x16,0x72,0x69,0x5b,0x5d,0xe1,0xac,0xe9,0xa6,0x77,0x07,0x10,0x96,0x95,0x5a,0x47,0xf4,0x74,0x22,0x3a,0xb4,0xb9,0xea,0x9d,0x1f,0xcb,0xe9,0xd0,0x57,0x90,0xd5,0x53,0x04,0x87,0x33,0x5c,0x7d,0x6b,0xea,0xf3,0x39,0x39,0x0d,0x38,0xd7,0xdd,0x26,0x3f,0x9c,0x44,0xa3,0xb8,0x90,0x73,0xe7,0x58,0xa5,0x7c,0xe4,0x30,0x22,0x3d,0x91,0xd4,0x40,0x3a,0x08,0xfb,0x19,0x80,0x87,0xb8,0x24,0x14,0x17,0xc8,0xb7,0x4d,0x63,0x1d,0xf7,0xa8,0x62,0x4b,0x5b,0x26,0x66,0xa0,0x81,0xe1,0x06,0x00,0xf4,0xf8,0x3c,0xeb,0x8f,0x4e,0x9c,0xac,0xd9,0xf0,0x5f,0x22,0xeb,0xfe,0x5a,0xfc,0x00,0xb8,0x02,0x65,0x28,0x61,0x08,0x00,0x00
 };
 
 AsyncWebServer webserver(80);
#endif


#if MQTT
std::string sentTopic = "data";
std::string receivedTopic = "command";

MqttBroker broker(1883);
MqttClient myClient(&broker);
#endif

#if WEBSOCKETS
void handle_message(WebsocketsMessage msg) {
  
  Serial.print("Message Received from javascript websocket client: ");
  Serial.println(msg.data());
  
  }
#endif

void receivedMessage(const MqttClient* source, const Topic& topic, const char* payload, size_t length)
{
  Serial << endl << "Received message on topic " << receivedTopic.c_str() << " with payload " << payload << endl;
  
  if (receivedTopic == "command")
  {
    mac[0] = atoi(&payload[0]);
    mac[1] = atoi(&payload[3]);
    mac[2] = atoi(&payload[6]);
    mac[3] = atoi(&payload[9]);
    mac[4] = atoi(&payload[12]);
    mac[5] = atoi(&payload[15]);
  }
}
void sendCommand()  {

  esp_wifi_set_mac(ESP_IF_WIFI_AP, mac);
  Serial << "Command sent to remote device :  " << mac[0] << "/" << mac[1] << "/" << mac[2] << "/" << mac[3] << "/" << mac[4] << "/" << mac[5] << "/" << endl;
 }



void setup()
{
   Serial.begin(115200);
  delay(500);

  Serial << "Starting client and AP......." << endl;

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    Serial << '-';
    delay(500);
  }

  Serial << "Connected to " << ssid << " IP address: " << WiFi.localIP() << endl;

  WiFi.softAP(apSSID, apPassword, apChannel, hidden);
  esp_wifi_set_event_mask(WIFI_EVENT_MASK_NONE); // This line is must to activate probe request received event handler.
  Serial << "The AP mac address is " << WiFi.softAPmacAddress().c_str() << endl;
  Serial << "Access point started at " << apSSID << " with IP address: " << WiFi.localIP() << endl;
 
#if ASYNCWEBSERVER
    webserver.on("/", HTTP_GET, [](AsyncWebServerRequest * request) 
    {
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, sizeof(index_html_gz));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
    });
    
    webserver.begin();
#endif
    
#if WEBSOCKETS
    WSserver.listen(8084);
#endif

#if MQTT
    broker.begin();

  // ============= Client Subscribe ================
    myClient.setCallback(receivedMessage);
    myClient.subscribe(receivedTopic);
    myClient.subscribe(sentTopic);
#endif

#if PROBEREQUESTS
    WiFi.onEvent(probeRequest, SYSTEM_EVENT_AP_PROBEREQRECVED);
    Serial << "Waiting for probe requests ... " << endl;
#endif
  
}  // End of Setup


void loop()
{
#if MQTT
  broker.loop();  // Don't forget to add loop for every broker and clients
  myClient.loop();
#endif
  
#if WEBSOCKETS
  auto client = WSserver.accept();
  client.onMessage(handle_message);
  client.send("Device Data: " + deviceData);
  client.send("SensorData: " + sensorData);
  
  while (client.available()) {
  client.poll();
  }
#endif
  
 static auto next=millis();               // The next line is an efficient delay() replacement
 if (millis() > next){next += 10000;}

} // End of Loop


#if PROBEREQUESTS

void probeRequest(WiFiEvent_t event, WiFiEventInfo_t info) 
{
  
    Serial.print("Probe Received :  ");
    for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", info.ap_probereqrecved.mac[i]);
    if (i < 5)Serial.print(":");
    }
    Serial.println();

      if (info.ap_probereqrecved.mac[0] == 6 || info.ap_probereqrecved.mac[0] == 16 || info.ap_probereqrecved.mac[0] == 26 || info.ap_probereqrecved.mac[0] == 36 || info.ap_probereqrecved.mac[0] == 46 || info.ap_probereqrecved.mac[0] == 56 || info.ap_probereqrecved.mac[0] == 66 || info.ap_probereqrecved.mac[0] == 76 || info.ap_probereqrecved.mac[0] == 86 || info.ap_probereqrecved.mac[0] == 96 || info.ap_probereqrecved.mac[0] == 106 || info.ap_probereqrecved.mac[0] == 116 || info.ap_probereqrecved.mac[0] == 126 || info.ap_probereqrecved.mac[0] == 136 || info.ap_probereqrecved.mac[0] == 146 || info.ap_probereqrecved.mac[0] == 156 || info.ap_probereqrecved.mac[0] == 166 || info.ap_probereqrecved.mac[0] == 176 || info.ap_probereqrecved.mac[0] == 186 || info.ap_probereqrecved.mac[0] == 196 || info.ap_probereqrecved.mac[0] == 206 || info.ap_probereqrecved.mac[0] == 216 || info.ap_probereqrecved.mac[0] == 226 || info.ap_probereqrecved.mac[0] == 236 || info.ap_probereqrecved.mac[0] == 246) // only accept data from certain devices.
       {

       sendCommand();

      if (info.ap_probereqrecved.mac[1] == 06) 
      { // only accept data from device with voltage as a sensor type at byte 1.
               if (device == 06) { for (int i = 0; i < 4; i++) sensorTypes[i] = Livingroom[i];} 
               if (device == 16) { for (int i = 0; i < 4; i++) sensorTypes[i] = Kitchen[i];}
               if (device == 26) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom1[i];} 
               if (device == 36) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom2[i];}
               if (device == 46) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom3[i];} 
               if (device == 56) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom4[i];}
               if (device == 66) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom1[i];} 
               if (device == 76) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom2[i];}
               if (device == 86) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom3[i];} 
               if (device == 96) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom4[i];}
               if (device == 106) { for (int i = 0; i < 4; i++) sensorTypes[i] = Laundry[i];} 
               if (device == 116) { for (int i = 0; i < 4; i++) sensorTypes[i] = Boiler[i];}
               if (device == 126) { for (int i = 0; i < 4; i++) sensorTypes[i] = Workshop[i];} 
               if (device == 136) { for (int i = 0; i < 4; i++) sensorTypes[i] = Garage[i];}
               if (device == 146) { for (int i = 0; i < 4; i++) sensorTypes[i] = Office[i];}
               if (device == 156) { for (int i = 0; i < 4; i++) sensorTypes[i] = Tank[i];} 
               if (device == 166) { for (int i = 0; i < 4; i++) sensorTypes[i] = Solar[i];}
               deviceStatus[0] = info.ap_probereqrecved.mac[2];
               deviceStatus[1] = info.ap_probereqrecved.mac[3];
               deviceStatus[2] = info.ap_probereqrecved.mac[4];
               deviceStatus[3] = info.ap_probereqrecved.mac[5];
      } else {

      device = info.ap_probereqrecved.mac[0];
               
      voltage = info.ap_probereqrecved.mac[1];
      voltage = voltage * 2 / 100;
                  
      sensorValues[0] = info.ap_probereqrecved.mac[2];
      sensorValues[1] = info.ap_probereqrecved.mac[3];
      sensorValues[2] = info.ap_probereqrecved.mac[4];
      sensorValues[3] = info.ap_probereqrecved.mac[5];
              
      }

      if (voltage > 2.50 && voltage < 3.60) 
      {
      /*
      sprintf (sensorData, "{");
      sprintf (s, "\"%s\":\"%i\"", "Location", device);    strcat (sensorData, s);
      sprintf (s, ",\"%s\":\"%.2f\"", "Voltage", voltage);    strcat (sensorData, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[0], sensorValues[0]); strcat (sensorData, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[1], sensorValues[1]); strcat (sensorData, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[2], sensorValues[2]); strcat (sensorData, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[3], sensorValues[3]); strcat (sensorData, s);
      sprintf (s, "}"); strcat (sensorData, s);
              
      Serial.println();
      Serial.println("Following ## Sensor Values ## receiced from remote device  & published via MQTT: ");
      Serial.println(sensorData);
      Serial.println();
      */
      sensorData = ("{" + String(info.ap_probereqrecved.mac[0], DEC) + "," + String(info.ap_probereqrecved.mac[1], DEC) + "," + String(info.ap_probereqrecved.mac[2], DEC) + "," + String(info.ap_probereqrecved.mac[3], DEC) + "," + String(info.ap_probereqrecved.mac[4], DEC) + "," + String(info.ap_probereqrecved.mac[5], DEC) + "}");
      Serial.println();
      Serial.print("Received Sensor data: "); 
      Serial.println(sensorData);
      Serial.println();
 
      static auto next=millis();               // The next line is an efficient delay() replacement
      if (millis() > next){next += 10000;}
      myClient.publish("Sensor", sensorData);

      if (voltage < 2.50) {      // if voltage of battery gets to low, print the warning below.
         //myClient.publish("Warning/Battery Low", location);
       }
     }

   if (info.ap_probereqrecved.mac[3] == apChannel) {
     /*
     sprintf (deviceData, "{");
     sprintf (s, "\"%s\":\"%i\"", "Location", device);    strcat (deviceData, s);
     sprintf (s, ",\"%s\":\"%i\"", "RSSI", info.ap_probereqrecved.rssi); strcat (deviceData, s);
     sprintf (s, ",\"%s\":\"%i\"", "MODE", deviceStatus[0]); strcat (deviceData, s);
     sprintf (s, ",\"%s\":\"%i\"", "CHANNEL", deviceStatus[1]); strcat (deviceData, s);
     sprintf (s, ",\"%s\":\"%i\"", "IP", deviceStatus[2]); strcat (deviceData, s);
     sprintf (s, ",\"%s\":\"%i\"", "Sleeptime", deviceStatus[3]); strcat (deviceData, s);
     sprintf (s, "}"); strcat (deviceData, s);
                           
     Serial.println();
     Serial.println("Following ## Device Status ## receiced from remote device & published via MQTT: ");
     Serial.println(str);
     Serial.println();
     */
     deviceData = ("{" + String(info.ap_probereqrecved.mac[0], DEC) + "," + String(info.ap_probereqrecved.mac[1], DEC) + "," + String(info.ap_probereqrecved.mac[2], DEC) + "," + String(info.ap_probereqrecved.mac[3], DEC) + "," + String(info.ap_probereqrecved.mac[4], DEC) + "," + String(info.ap_probereqrecved.mac[5], DEC) + "}");
     Serial.print("Received Status data : "); 
     Serial.println(deviceData);
     Serial.println();
                      
     myClient.publish("Device", deviceData);
   }
  }
}
#endif                    
