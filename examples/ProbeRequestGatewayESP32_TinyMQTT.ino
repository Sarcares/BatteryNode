#define PROBEREQUESTS     true // Receives data from remote ESP8266 devices on network
#define MQTT              true // Communicate with MQTT clients
#define WEBSOCKETS        true // Communicate with Websockets clients
#define ASYNCWEBSERVER    true // Publishes web interface
#define LITTLEDB          true // Store data
#define FIRSTTIME         true // Warning - This is true if creating new data and table files for first time.

#include <WiFi.h>

const char* ssid = ""; // Your WiFi SSID
const char* password = ""; // Your WiFi Password
const char* apSSID = "ESP";
const char* apPassword = "";
const int apChannel = 7;
const int hidden = 0; // If hidden is 1 probe request event handling does not work ?

String deviceData;
String sensorData;
int device;

#if PROBEREQUESTS
#include <esp_wifi.h>
char str [256];
char s [70];

float voltage;
uint8_t mac[6];
int sensorValues[4];
int sensorTypes[4];
int deviceStatus[4];

int Livingroom[4] = {16,26,36,46};
int Kitchen[4] =    {46,36,26,16};
int Bedroom1[4] =   {46,36,26,16};
int Bedroom2[4] =   {16,26,36,36};
int Bedroom3[4] =   {16,26,36,36};
int Bedroom4[4] =   {16,26,36,36};
int Bathroom1[4] =  {16,26,36,36};
int Bathroom2[4] =  {16,26,36,36};
int Bathroom3[4] =  {16,26,36,36};
int Bathroom4[4] =  {16,26,36,36};
int Laundry[4] =    {16,26,36,36};
int Boiler[4] =     {16,26,36,36};
int Workshop[4] =   {16,26,36,36};
int Garage[4] =     {16,26,36,36};
int Office[4] =     {16,26,36,36};
int Tank[4] =       {16,26,36,36};
int Solar[4] =      {16,26,36,36};
#endif

#if MQTT
#include <TinyMqtt.h>   // Thanks to https://github.com/hsaturn/TinyMqtt
#endif

#if WEBSOCKETS
#include <ArduinoWebsockets.h>  // Thanks to https://github.com/gilmaimon/ArduinoWebsockets
#endif

#if LITTLEDB
#include <Arduino.h>  // Arduino built in
#include "FS.h"       // Arduino built in
#include <LITTLEFS.h> // Arduino built in
#include <LittleDB.h> // Thanks to https://github.com/pouriamoosavi/LittleDB
#include <ezTime.h>   // Arduino built in
String Timestamp, Date, Day, Time, Hour;
String epoch, dateReceived, dayReceived, timeReceived, hourReceived, rooms, Location,V, S, T, H, P, L;

int8_t res;
String tblPath = "/test_db/test_tbl";
String schemPath = "/test_db/s.test_tbl";
#endif

#if ASYNCWEBSERVER
#include <ESPAsyncWebServer.h>  // Install manually to arduino folder

int index_html_gz_len = 18170;
const uint8_t index_html_gz[] = {
0x1f,0x8b,0x08,0x08,0xb4,0x90,0xb4,0x60,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xed,0x5b,0xeb,0x77,0xdb,0x36,0xb2,0xff,0x2c,0xff,0x15,0x58,0xb6,0x77,0x25,0x35,0x12,0xa9,0x87,0xed,0x38,0xb2,0xe4,0x73,0xf3,0xdc,0x74,0xaf,0xd3,0xb4,0xb5,0xef,0xf6,0x43,0x9a,0xd3,0x43,0x91,0x90,0xc4,0x98,0x22,0xb8,0x24,0x68,0x5b,0x37,0xf5,0xff,0xde,0xdf,0x00,0xa0,0x48,0xc9,0xa4,0xac,0xec,0x6d,0x7b,0xfa,0xc1,0x92,0x8e,0x1e,0xc0,0xcc,0x60,0x30,0x2f,0x0c,0x80,0xd1,0x78,0x21,0x97,0xe1,0x19,0x3b,0x18,0x2f,0xb8,0xeb,0xd3,0xe7,0x92,0x4b,0x97,0x79,0x0b,0x37,0x49,0xb9,0x9c,0x58,0x99,0x9c,0x75,0x4f,0xac,0x33,0xd3,0x1c,0xb9,0x4b,0x3e,0xb1,0xae,0x03,0x7e,0x13,0x8b,0x44,0x5a,0xcc,0x13,0x91,0xe4,0x11,0xc0,0x6e,0x02,0x5f,0x2e,0x26,0x3e,0xbf,0x0e,0x3c,0xde,0x55,0x3f,0x3a,0x2c,0x88,0x02,0x19,0xb8,0x61,0x37,0xf5,0xdc,0x90,0x4f,0xfa,0x16,0x11,0x97,0x81,0x0c,0xf9,0xd9,0x4f,0x7c,0x9a,0x0a,0xef,0x8a,0xcb,0xb4,0xc3,0xce,0x03,0x89,0xa6,0x57,0x2f,0x3a,0xec,0x79,0xba,0x8a,0xbc,0x1b,0x74,0xf1,0xe4,0x9a,0x27,0x1d,0x76,0x19,0x44,0xab,0x77,0x3f,0x5c,0x5e,0xb2,0xbf,0xb3,0xec,0xfb,0x50,0xc8,0xb1,0xa3,0xb1,0x41,0x26,0xf5,0x92,0x20,0x96,0x4c,0xae,0x62,0xb0,0x23,0xf9,0xad,0x74,0x3e,0xb9,0xd7,0xae,0x6e,0xb5,0x58,0x9a,0x78,0x13,0x6b,0x21,0x65,0x9c,0x8e,0x1c,0xc7,0xf3,0xa3,0x4f,0xa9,0xed,0x85,0x22,0xf3,0x67,0xa1,0x9b,0x70,0xdb,0x13,0x4b,0xc7,0xfd,0xe4,0xde,0x3a,0x61,0x30,0x4d,0x9d,0x4f,0xff,0xce,0x78,0xb2,0x72,0xfa,0x76,0xbf,0x6f,0x0f,0xcc,0x2f,0x7b,0x19,0x44,0xf6,0xa7,0xd4,0x3a,0x1b,0x3b,0x9a,0xe4,0xd9,0xc1,0xc1,0x38,0x0c,0xa2,0x2b,0x96,0xf0,0x70,0x62,0xa5,0x72,0x15,0xf2,0x74,0xc1,0x39,0x86,0x5a,0x24,0x7c,0xb6,0x31,0x16,0xf0,0x7c,0x1e,0x06,0xd7,0x89,0x1d,0x71,0xe9,0x44,0xf1,0xd2,0xc9,0x62,0xf0,0xfe,0xdf,0x7d,0xfb,0xd8,0x7e,0xea,0xf8,0x41,0x2a,0x1d,0x35,0x19,0x35,0x86,0x97,0x62,0x10,0xd0,0x56,0x14,0x31,0xaf,0xaf,0x48,0x9e,0x6e,0x10,0xf1,0x84,0x7d,0x66,0x4a,0x8a,0x23,0xd6,0xef,0xf5,0xfe,0xeb,0x94,0x2d,0x78,0x30,0x5f,0xc8,0x11,0x3b,0x7c,0x76,0xbd,0x38,0x65,0x53,0xd7,0xbb,0x9a,0x27,0x22,0x8b,0xfc,0xae,0x27,0x42,0x91,0x8c,0xd8,0x57,0xc3,0xe1,0xf0,0x94,0x81,0x7c,0x1c,0xba,0xab,0x11,0x9b,0x85,0xfc,0xf6,0x94,0xb9,0x61,0x30,0x8f,0xba,0x81,0xe4,0xcb,0x74,0xc4,0x3c,0xe8,0x89,0x27,0xa7,0xec,0x53,0x96,0xca,0x60,0xb6,0x02,0xa2,0x52,0x5d,0xd1,0x21,0x20,0xf4,0x59,0x28,0x6e,0x46,0x6c,0x11,0xf8,0x3e,0x8f,0x30,0x8c,0x48,0x7c,0x9e,0x74,0x13,0xd7,0x0f,0x32,0x50,0x78,0x1a,0x83,0xa6,0x14,0x99,0xb7,0xe8,0xba,0x9e,0x0c,0x44,0x34,0x62,0x91,0x88,0xf8,0x29,0xbb,0x03,0xe7,0x34,0xca,0x06,0xd3,0x04,0x9c,0x73,0x6d,0x7e,0xde,0x67,0x3b,0x99,0x4f,0x5b,0x83,0xc3,0xa3,0x0e,0x1b,0x0c,0x7b,0x1d,0xf6,0xec,0x59,0x3b,0x1f,0x94,0x70,0xe2,0x5b,0x96,0x8a,0x30,0xf0,0x09,0xca,0x6d,0xf5,0x87,0xc7,0x1d,0x56,0xbc,0xd9,0x47,0x6b,0xd8,0x35,0x83,0x47,0x24,0xa9,0x2a,0x06,0x33,0x98,0x54,0x37,0xe5,0x21,0xf7,0xc0,0xcc,0x26,0xcf,0x23,0x82,0xbc,0xe6,0x60,0xbd,0x92,0x3b,0x8c,0x7b,0x7c,0x02,0xf6,0xfa,0xf4,0x36,0x00,0x8f,0x7d,0xbb,0xd7,0xc3,0xc8,0x6b,0xf4,0x05,0x89,0x0d,0xd8,0x5e,0x96,0xa4,0x84,0x13,0x8b,0x40,0x8b,0xd3,0xf0,0x66,0x04,0x32,0x50,0x02,0x20,0x2c,0x98,0xa0,0x0b,0xf8,0x58,0xa4,0xf0,0x0e,0x62,0x71,0x16,0xdc,0x72,0xff,0x94,0x25,0x5a,0x54,0xc3,0xa1,0x3d,0x1c,0xaa,0x69,0xc4,0x34,0x21,0xd2,0x36,0x61,0xa5,0x12,0x68,0x4b,0xa5,0x34,0x65,0x1f,0x9f,0xb7,0x2c,0x22,0x76,0x7d,0x3f,0x88,0xe6,0xa3,0xde,0x29,0x5b,0xba,0xc9,0x3c,0x88,0x8a,0x6f,0xdd,0x69,0x08,0x5f,0xeb,0xa6,0xd2,0x4d,0xe4,0xbd,0x56,0x1e,0xf9,0xa5,0xb6,0x20,0x82,0x95,0xf3,0x7b,0xa0,0xa6,0x59,0xc1,0x56,0x72,0xc3,0x82,0xe5,0xfc,0xf3,0xda,0xfa,0x14,0x65,0x42,0xbe,0x35,0xb3,0xd7,0x26,0x0c,0x83,0xef,0x1a,0xa6,0x8d,0x15,0x6f,0x68,0xef,0x90,0x04,0x64,0x06,0xa4,0xc9,0x9f,0x40,0xfd,0x18,0x0b,0x2e,0x68,0x9c,0x03,0x5f,0x4d,0x88,0x3a,0x18,0x4f,0x85,0xbf,0x42,0x4c,0xfa,0xb2,0x30,0xb0,0xb7,0x6b,0x06,0xc1,0x8c,0x57,0xc6,0x80,0xc5,0x60,0xcf,0xd0,0xb5,0x8e,0x58,0xc0,0x00,0xde,0x4c,0x24,0x4b,0xa6,0x4d,0x72,0x62,0xc1,0xe3,0x19,0xe6,0x75,0xf1,0xfa,0xfc,0xf5,0xcb,0x4b,0xe6,0x85,0x6e,0x9a,0x4e,0x2c,0x04,0xa5,0x29,0x24,0x69,0x31,0x98,0xbb,0xfa,0xb5,0x74,0x23,0xdf,0x52,0xf1,0x96,0x4d,0x98,0xe5,0x2a,0x24,0xc6,0xc6,0x22,0x26,0x22,0x60,0xca,0x7c,0xd9,0x68,0xd5,0x16,0xce,0x66,0x89,0x58,0x32,0xc9,0x53,0xf9,0x8b,0x9c,0x86,0xec,0x66,0xc1,0x13,0x5e,0x0d,0xff,0x2a,0x98,0x07,0xd2,0x0d,0xd9,0x4f,0x09,0x4c,0xb9,0x1a,0xe4,0x79,0xe4,0x86,0x62,0xbe,0x0b,0x22,0x27,0xf2,0x23,0x74,0xb3,0x93,0x46,0x3d,0xc0,0x77,0x5c,0xc4,0x70,0x82,0xb0,0xba,0xf7,0x82,0x4b,0xf6,0xfc,0x7b,0xf6,0x72,0xe1,0x46,0xd1,0x2e,0x98,0x8b,0x90,0xf3,0x18,0x8b,0xc6,0xb2,0x86,0x51,0x82,0x79,0x27,0xfc,0x52,0xef,0xd8,0xd1,0x4a,0x20,0x15,0xed,0x52,0x87,0x5e,0xd6,0x0a,0x6d,0x4c,0xf7,0xd2,0xc6,0x79,0x70,0x0d,0x8f,0x4c,0x84,0x58,0x56,0xf7,0xff,0x4f,0x20,0xbd,0x05,0x8f,0xaa,0x3b,0x5f,0x70,0x9f,0x30,0xfb,0x3b,0x7b,0x07,0x35,0xbd,0xae,0x5c,0xec,0x42,0x36,0xdd,0x35,0xd8,0xe7,0x2e,0x22,0x60,0xb2,0xaa,0xee,0x7c,0x3f,0x9b,0x41,0x12,0x9b,0x7d,0x7b,0x8b,0xd1,0x58,0x75,0xbf,0x10,0xa4,0x67,0xb1,0x4d,0xfa,0xbd,0x5e,0xf5,0xb8,0xbd,0x9a,0xb9,0xf4,0x6a,0x26,0xd1,0x1b,0xd6,0xb4,0x1f,0xd6,0xb4,0x1f,0xd5,0xb4,0x1f,0x57,0xb7,0xf7,0x6b,0xc6,0xed,0xd7,0x8c,0xdb,0xaf,0x19,0xb7,0x5f,0x33,0x6e,0xbf,0x66,0xdc,0x41,0x4d,0xfb,0xb0,0xa6,0xfd,0xb0,0xa6,0xfd,0xa8,0xa6,0xfd,0xb8,0xa6,0xfd,0x69,0x4d,0xfb,0x49,0x4d,0xfb,0xb3,0x3a,0xb9,0xd5,0x0a,0xb4,0x6e,0xc6,0xfd,0xba,0x29,0x23,0x0b,0xa8,0x93,0x75,0x5d,0x47,0xdd,0xac,0xfb,0x75,0xd3,0xee,0xd7,0xcd,0xbb,0x5f,0x37,0xf1,0x7e,0xdd,0xcc,0x07,0x75,0x33,0x1f,0xd4,0xea,0xba,0x6e,0xe6,0x83,0xba,0x99,0x0f,0xea,0x66,0x3e,0xd8,0x9e,0xf9,0x97,0xfa,0xec,0xa0,0xf0,0x59,0x7f,0x2b,0xf8,0x3d,0xba,0xec,0xa3,0xcb,0x3e,0xba,0xec,0x1f,0xeb,0xb2,0x5f,0xe8,0xad,0xc3,0xc2,0x5b,0xf9,0xa3,0xb7,0x3e,0x7a,0xeb,0xa3,0xb7,0xfe,0x95,0xbd,0xf5,0xb0,0xf0,0xd6,0xd9,0x63,0x3e,0xfc,0xe8,0xae,0x8f,0xee,0xfa,0x57,0x75,0xd7,0x30,0x5b,0x46,0x85,0xb3,0xce,0xb7,0x96,0xd6,0x73,0xe1,0xb9,0xf4,0xa5,0xe6,0x98,0xc4,0x2d,0x1f,0xa0,0x34,0x8a,0xe6,0x9a,0x9d,0xf6,0xe6,0x39,0xc6,0x1a,0xfe,0xad,0xc8,0x92,0x2f,0x67,0x5d,0xc4,0x3c,0x71,0xa5,0x48,0x0a,0xe6,0x17,0x5b,0xcc,0x4f,0xaa,0xb9,0xa8,0x39,0xda,0x18,0xd7,0x34,0xd7,0x51,0xa9,0x69,0x1f,0x97,0xc8,0x17,0x53,0x19,0x4f,0x13,0x75,0x26,0x6e,0x4e,0xdd,0xae,0xdd,0x84,0xb9,0x52,0xba,0xde,0xe2,0xf5,0x35,0x4e,0xaa,0xc1,0xfc,0x2c,0x8b,0xd4,0x51,0x5a,0x2b,0xc2,0x69,0x4e,0x87,0x71,0x6a,0xee,0xb0,0x10,0xe7,0x77,0x1c,0x67,0x91,0x1d,0x3a,0xed,0x7d,0xe9,0xc6,0x32,0x4b,0x78,0x9b,0x7d,0xc6,0x80,0x8e,0xc3,0xde,0x71,0xb9,0x10,0x3e,0xc3,0x39,0x1c,0x7b,0xf3,0xa6,0xc3,0xde,0x93,0x3c,0x3a,0x38,0x52,0xc2,0x49,0x19,0x28,0x5c,0xb8,0x33,0x37,0x09,0x00,0x19,0xcc,0x58,0x0b,0x47,0xd8,0x91,0x2f,0x6e,0x6c,0x1c,0xa8,0xaa,0x01,0xcf,0x0d,0x5d,0xa6,0x89,0x31,0x9c,0x1f,0xfb,0xfc,0x5e,0x6f,0x6b,0x07,0x17,0xec,0xd7,0x5f,0xd9,0xcc,0x0d,0x53,0xde,0x3e,0x05,0x81,0x3b,0xcd,0xd1,0xb7,0xaf,0xd9,0xc2,0x4d,0x59,0x20,0x53,0x26,0x6e,0x22,0x86,0xdb,0x15,0x30,0x88,0x2e,0x0e,0xb8,0x8d,0x81,0x8a,0xa9,0xb7,0x9a,0x22,0x6a,0x3e,0xd9,0x1a,0xc8,0xd0,0xbc,0x3b,0x3d,0x38,0x00,0xd5,0xf7,0x91,0xc7,0x99,0x5c,0x70,0x33,0x09,0x16,0x0a,0xd7,0x4f,0x19,0x16,0x19,0xd5,0xf8,0xea,0xfd,0x3b,0x16,0xa4,0xb8,0xc4,0x70,0xfd,0x55,0xc7,0x08,0x55,0x75,0x28,0x9a,0x38,0x72,0x56,0x3f,0x96,0x38,0xd2,0x05,0xcd,0xf2,0xc0,0x9a,0x5a,0x87,0x59,0x44,0xcf,0xea,0x14,0x1a,0xd0,0x32,0x21,0x15,0xe9,0xb3,0xc7,0x5f,0xcc,0x9a,0x06,0x2d,0xf9,0xc2,0xcb,0x96,0x40,0xb6,0xe7,0x5c,0xbe,0x0e,0x39,0x7d,0x7d,0xb1,0xfa,0xd6,0x6f,0xad,0x0f,0x37,0xc1,0xf9,0x06,0xee,0x5b,0x34,0x86,0x90,0x73,0x49,0xc1,0xb9,0xc8,0x19,0xd3,0x66,0xd2,0xdf,0x45,0xd7,0x9c,0xd2,0xb5,0x3b,0x07,0x8d,0x1c,0x7e,0xb0,0x07,0x1f,0x7d,0x62,0xa4,0x3c,0xc8,0x70,0x0f,0xa4,0xc1,0x36,0xd2,0xe1,0x1e,0x48,0xc3,0x6d,0xa4,0xa3,0x3d,0x90,0x0e,0xb7,0x91,0x8e,0x77,0x23,0xa9,0x18,0xb5,0x85,0xf2,0x74,0x17,0xca,0x3a,0x36,0xb4,0x4f,0x1b,0x4c,0xa3,0x91,0x25,0x5d,0x2c,0x60,0x3e,0xa4,0x49,0x5c,0x06,0x69,0x93,0x72,0xe3,0x38,0x11,0x71,0x12,0x20,0x90,0x19,0x8d,0x35,0x53,0x0d,0x4f,0x6e,0x23,0x17,0x41,0x6a,0x5f,0xbb,0x61,0x86,0xf0,0x82,0xf8,0x92,0x1f,0xe9,0x5a,0x64,0xfc,0x5b,0x7d,0xe5,0x33,0x65,0x6b,0xad,0x62,0xc3,0x71,0xae,0x69,0x5b,0x1d,0xfb,0xdb,0xe6,0x4e,0x81,0x42,0x96,0x95,0x4f,0x2a,0x57,0xee,0xc3,0x20,0xc3,0x87,0x41,0x0e,0x1f,0x06,0x39,0x7a,0x18,0xe4,0xf8,0x3e,0x08,0x5d,0x33,0x6d,0x83,0x3d,0x7d,0x08,0xcc,0x48,0xe1,0x4e,0x87,0x81,0x0a,0xb9,0x6e,0x1e,0x86,0x2b,0xe9,0xaa,0xb6,0xe2,0xf0,0xbb,0x68,0xa3,0xc3,0x6e,0xfd,0xab,0x7c,0x46,0xaf,0x5b,0x4a,0x67,0xf2,0x9b,0x20,0x5b,0x5a,0xf9,0xd3,0xf4,0x52,0x25,0xae,0x0a,0xdd,0x54,0x81,0x55,0xe8,0xa7,0x0a,0xec,0x77,0xd3,0x11,0xa3,0x00,0x53,0x69,0xf5,0xf7,0x85,0x08,0x97,0x52,0xc0,0x7b,0xc9,0x6f,0x3f,0x11,0xee,0x67,0xdd,0xfb,0x0b,0x71,0x7f,0x39,0xee,0x2f,0xca,0x3d,0xa4,0xd9,0x80,0x5c,0xee,0xd4,0xbb,0x7a,0xab,0x90,0x66,0xfd,0x75,0xd6,0xef,0x2b,0xda,0x1a,0xd6,0x1f,0x34,0xd2,0x3f,0x5b,0xc4,0xfb,0x89,0x97,0x44,0x4b,0x21,0x24,0x8f,0x24,0x94,0x1e,0xa8,0x95,0x16,0x41,0xfd,0x7f,0x11,0x54,0x28,0x94,0x8b,0x08,0xf5,0x1d,0xd1,0x1c,0x31,0x1d,0x01,0x5e,0x44,0x57,0x7c,0x15,0x27,0x3c,0x4d,0x75,0x1e,0x90,0x52,0x22,0xe0,0x73,0x49,0xb2,0x87,0xb4,0x23,0x85,0xa1,0xf1,0xb5,0x6e,0xc4,0x6c,0x7b,0xb5,0xa7,0x4c,0x46,0x53,0xa4,0x14,0xa6,0x9c,0x39,0x6c,0x02,0x22,0x83,0xd0,0x60,0xc8,0x21,0x36,0x16,0x7d,0xb5,0x60,0xed,0xc4,0xcb,0x79,0xac,0xc0,0xbc,0xa3,0x4c,0xe2,0xeb,0x56,0xbe,0xc2,0xb5,0x6d,0x95,0xe0,0xb4,0x8a,0x2c,0x82,0x62,0xd9,0xd7,0x2d,0x8b,0x6e,0x61,0xad,0xb6,0x9d,0x66,0xd3,0x65,0x20,0xb7,0xba,0xf3,0x44,0x24,0x92,0x2f,0x1f,0xcc,0x60,0x9a,0xe0,0x23,0x0b,0x65,0xb3,0xad,0x6d,0x55,0x6b,0xe5,0x26,0xb5,0x81,0xed,0x83,0xf1,0x35,0x09,0x94,0x09,0xa8,0xe8,0xe9,0x38,0xa8,0x7f,0x49,0x64,0xcb,0xba,0x50,0x23,0x4b,0xae,0x72,0x1f,0xd5,0x81,0x18,0xdc,0x6a,0x5e,0x00,0x8f,0xee,0xee,0x59,0x93,0x3d,0x29,0xb3,0xa0,0x53,0xbb,0xfd,0x26,0x68,0xd6,0xd0,0xaf,0x5b,0x4d,0xaa,0x6f,0xa1,0xd4,0x1f,0xec,0xa1,0xab,0xa9,0xe5,0xdd,0x2c,0xe7,0x6c,0x80,0x3e,0x20,0x77,0x03,0x30,0x0a,0x4e,0xd4,0x50,0x7a,0x2e,0xc8,0xb7,0xfe,0xa8,0x35,0xa6,0x0d,0x06,0x3f,0x93,0x34,0x48,0xcc,0xb1,0xbb,0xa2,0x44,0x12,0x22,0xae,0x62,0xe1,0x09,0x6b,0x3a,0x24,0x09,0xea,0xd3,0x39,0x5d,0x65,0x57,0x9e,0xbe,0xe5,0x9d,0xa7,0xca,0xd2,0x21,0x83,0x9d,0x73,0xdb,0x8a,0xd0,0x4a,0x6c,0x85,0xfe,0xff,0x10,0xc6,0xd0,0x6c,0x39,0xd6,0x66,0xe7,0x60,0x83,0x6b,0xf2,0xd6,0x5d,0x4c,0xef,0x0a,0x84,0x5f,0x38,0x03,0x0b,0xcf,0x9c,0x13,0x4a,0x15,0x4b,0x5d,0xd4,0x98,0x27,0x83,0x5b,0xcd,0x9b,0xb3,0x5d,0xf3,0xdc,0x38,0x68,0x50,0x6f,0xd9,0x1d,0x5a,0x86,0x81,0x35,0x90,0x32,0x5f,0x18,0x5c,0x51,0x46,0xa1,0xf6,0x77,0xe3,0x20,0x8a,0xb3,0x72,0xe5,0x06,0xed,0x54,0x27,0x96,0x26,0x85,0xd2,0x8d,0xe0,0xff,0xd4,0x36,0xf5,0xd0,0x5c,0x16,0xa3,0xe8,0x0a,0x4e,0x62,0xe9,0x00,0x84,0x12,0x0a,0xe6,0x6c,0x91,0xd0,0x4e,0xbd,0x06,0x20,0x97,0x62,0xc6,0x8d,0x54,0x85,0x95,0x43,0xce,0x4f,0x5f,0x68,0x2c,0x55,0x82,0x93,0x88,0x1b,0xec,0x93,0x71,0xf8,0x06,0x41,0xe0,0xcb,0xf0,0x48,0x73,0x60,0x22,0x69,0x69,0xa8,0x34,0xe6,0x61,0x88,0x9b,0x7a,0xef,0x6a,0x62,0xa9,0x6d,0x9c,0xc5,0xd4,0x16,0x4a,0x44,0xe1,0x0a,0xbc,0x27,0x19,0x1a,0x54,0x14,0x46,0x37,0x0a,0x62,0xba,0xc4,0xfb,0xa8,0x7f,0x8c,0x72,0x16,0x55,0x35,0xb3,0xae,0x81,0xe2,0xcb,0x53,0xaa,0xa3,0x73,0x72,0x0e,0x88,0x9b,0xbf,0x75,0xbb,0xac,0xa8,0x28,0x61,0x17,0x32,0x9b,0xcd,0xba,0x5d,0x40,0xa1,0x63,0x1c,0x9f,0x99,0x29,0x12,0x5f,0x14,0x17,0xde,0x21,0xfe,0xb9,0x08,0x9e,0x1b,0x62,0xa3,0xe1,0x30,0x8f,0xde,0x9a,0xe3,0xde,0xb1,0x83,0x17,0x0d,0x35,0xcd,0xa4,0x14,0x11,0x45,0xfb,0x30,0x20,0xee,0x49,0x86,0x97,0x40,0x6a,0xb5,0x2d,0x54,0x43,0x14,0x12,0x62,0xd8,0x16,0x5f,0xfc,0x70,0x3e,0x76,0x34,0x02,0x76,0xe5,0x31,0xb0,0xb3,0xd0,0xa8,0xc4,0xe3,0x28,0x90,0xf2,0xf3,0xc1,0xcf,0x0c,0x52,0x8a,0x22,0x17,0xd3,0x46,0x5b,0x4a,0x0d,0xa4,0x6d,0x54,0x57,0xc1,0xd0,0x86,0x81,0xc3,0x24,0xa7,0x1c,0x45,0x65,0x74,0xe3,0x98,0xa1,0xcc,0x90,0xd1,0xec,0x36,0x0b,0x77,0x9a,0x5b,0x85,0x3b,0x4d,0x00,0x90,0x37,0x58,0x10,0xcc,0x85,0x12,0x0c,0x34,0x13,0x99,0x1d,0x2d,0x2d,0xfc,0xd8,0x9e,0x90,0xa9,0xdf,0xa4,0xb0,0x90,0x88,0xdf,0x90,0x00,0x35,0x1c,0x70,0x6e,0xa8,0xd6,0xa7,0xff,0x6c,0x60,0xa3,0x6c,0xcb,0xee,0xd9,0xc3,0xd1,0x49,0xef,0x44,0x6d,0xa1,0xd4,0x39,0x42,0x3d,0x0a,0x79,0x85,0xd9,0xf8,0xa3,0x7a,0x49,0x9d,0xe3,0xd8,0x0b,0x91,0x4a,0x75,0x5e,0x02,0xb7,0xc9,0xe9,0x20,0xbc,0x60,0x1d,0xec,0xd2,0x83,0x42,0x35,0xf6,0xd5,0x60,0x9e,0xf9,0x2e,0x6a,0x23,0x55,0xe3,0x41,0x1e,0x66,0x55,0xaf,0x16,0x36,0x58,0xce,0x17,0x17,0x23,0xb0,0x5d,0x8b,0x4b,0x09,0xac,0x58,0x61,0xea,0x56,0x0a,0x03,0x88,0xf9,0x95,0xd7,0x9f,0xa2,0xf5,0x0e,0xec,0x7e,0x53,0xf0,0x44,0x44,0xb6,0xf4,0x99,0x73,0x17,0x06,0x65,0xa6,0x3c,0xd8,0xa7,0xe4,0x86,0xaf,0x56,0x33,0x0c,0x9a,0x20,0x16,0x06,0x76,0x80,0x15,0x21,0x79,0x7b,0xf9,0xee,0x1c,0xc0,0x5b,0x84,0x4e,0x0f,0x76,0xac,0x97,0x1b,0x90,0x98,0x16,0x99,0x46,0xe4,0xbf,0x5c,0x04,0xa1,0xdf,0x0a,0x03,0xc5,0xe8,0x37,0x4e,0xe3,0x80,0x66,0x21,0xa2,0xe5,0x5a,0x48,0x6b,0xc6,0x71,0xbc,0x22,0xf5,0x9e,0x44,0x45,0x15,0x95,0x2c,0xc2,0x76,0xc4,0x8c,0x3a,0x6c,0x12,0x3f,0x45,0xca,0x09,0x6b,0xa2,0x32,0x0d,0x02,0x6a,0xd2,0xfa,0x93,0xf7,0xc0,0x78,0x50,0xd0,0x86,0x83,0x11,0xe4,0x2d,0x17,0xaa,0x1b,0x94,0x28,0x9b,0xa1,0x84,0xe8,0xf2,0x4d,0xf7,0x84,0x8e,0x85,0x96,0x48,0x3e,0x60,0xbe,0x1a,0x5d,0xe9,0x73,0x73,0x4b,0xb6,0x56,0xba,0x99,0xcb,0x3d,0xbd,0xe7,0xd0,0x46,0x53,0x3f,0x56,0x39,0x04,0x69,0x6d,0xcd,0x6f,0x91,0xcc,0x99,0xfc,0x00,0xa6,0xf8,0x0f,0x01,0x9f,0x20,0xc2,0x65,0x2c,0x55,0x60,0x88,0xda,0x32,0x6d,0xb0,0x23,0x15,0xc0,0x2b,0xa8,0x98,0xc0,0x65,0xf2,0xe7,0x27,0x13,0x9d,0xcc,0x69,0x09,0xc0,0x80,0x7f,0x8e,0x54,0xce,0xbd,0x06,0x27,0x9d,0xaf,0x63,0xe1,0x0e,0x73,0x34,0xca,0x48,0xc9,0x00,0x0a,0x86,0x15,0x55,0x88,0xfb,0x83,0x39,0x8f,0x52,0xc3,0x20,0x2d,0x01,0x07,0x1e,0x6f,0x39,0xcf,0x9d,0x79,0x87,0x35,0x9b,0xed,0x27,0xcd,0x17,0x4d,0xb8,0x4c,0xa3,0x81,0xfa,0x3b,0x11,0xa1,0x98,0x93,0xc3,0xbb,0xe6,0xad,0x7f,0x5e,0xbc,0xff,0xce,0x8e,0xa9,0xc0,0xb8,0xa5,0x26,0x01,0xb7,0xa2,0x13,0x07,0xce,0x59,0x5e,0xad,0x07,0x85,0x79,0x57,0x79,0x41,0xaa,0xaa,0xd8,0x45,0x61,0x2e,0xea,0x56,0x41,0xc4,0x39,0x3a,0x3c,0xea,0xf7,0x8f,0x86,0x27,0x44,0x12,0x10,0x08,0xb8,0x4a,0x69,0xa8,0x52,0x94,0xa2,0xeb,0x46,0x5d,0x37,0x49,0xdc,0x55,0x57,0xcc,0xf4,0x97,0x14,0xed,0xdd,0x22,0xb8,0x90,0x08,0x1a,0x0d,0xc3,0xfe,0x9b,0x3c,0x25,0x82,0x85,0xe2,0xa0,0x2e,0x62,0x1f,0x48,0x43,0x85,0xe1,0x60,0x55,0xff,0xd8,0x6c,0xab,0x05,0xaf,0xd1,0x28,0x4f,0xc0,0x88,0x5e,0xd1,0xa2,0x76,0x49,0xe9,0x38,0xc5,0x96,0xf5,0xae,0x19,0x09,0xa1,0x2e,0xfc,0x1c,0x1e,0xf7,0x3a,0x45,0x63,0xbe,0x18,0x1c,0x1f,0x6e,0xb4,0x0a,0x71,0x85,0xf2,0x55,0x42,0xd6,0x3b,0x1a,0x95,0xdf,0x8d,0xd8,0x07,0x05,0xd2,0x60,0x19,0x9b,0x9c,0xad,0x49,0x37,0x58,0x88,0xb0,0x15,0xf2,0x39,0x45,0x9f,0x09,0xcb,0x6c,0xd4,0x72,0x49,0x5b,0xd5,0x2d,0x5f,0xa8,0x3c,0x41,0x24,0x2d,0xcb,0xce,0xba,0x1a,0xa2,0x38,0x0a,0x2a,0x76,0xf2,0xcc,0x60,0xdf,0x3f,0xc4,0xc4,0xf9,0x11,0x8a,0x57,0x6f,0x25,0xd4,0x9f,0x21,0xd1,0x86,0x0b,0x16,0xe3,0x62,0x64,0x6e,0x23,0x05,0x27,0x84,0x57,0x7c,0xe6,0x62,0x9d,0x86,0x64,0x4c,0xe2,0x49,0xbd,0xc4,0x16,0x4c,0x36,0xe0,0xe9,0xeb,0x10,0x8c,0x71,0x1b,0xb6,0x05,0x6b,0xa2,0xd2,0xeb,0x14,0xba,0x53,0x4c,0xe9,0xfe,0x32,0x53,0x65,0xb6,0x14,0x67,0x39,0x91,0x6f,0xfd,0x5b,0x50,0x79,0x4e,0x3a,0xc4,0xb0,0x42,0x0a,0x72,0x78,0x3b,0xc5,0x4a,0x86,0x12,0x6e,0x37,0x0c,0x5b,0x66,0x12,0x1e,0x05,0x91,0xef,0x90,0x86,0xa6,0x6d,0x84,0x27,0x9f,0xdf,0xbe,0x9f,0x21,0x08,0x6a,0x36,0xf6,0x19,0x47,0xc9,0x50,0x7f,0xfd,0xb0,0x1e,0xf9,0x63,0x2d,0x62,0xd9,0x0c,0x34,0xb8,0x1d,0xba,0x58,0xe2,0x4a,0x43,0x51,0xce,0x63,0xbe,0xa9,0xcf,0x8f,0xa4,0xea,0x3b,0x7a,0x53,0x95,0xf0,0x46,0xd3,0x8c,0xdd,0xe6,0x5f,0x18,0x93,0x48,0xaa,0x47,0x8c,0x72,0x09,0x6d,0x16,0x84,0xa8,0x31,0xd4,0x10,0xb9,0x29,0x7c,0x56,0x6d,0xb4,0x63,0xce,0x11,0xd5,0xd8,0x88,0x09,0xff,0xb2,0x72,0x7b,0x82,0x37,0x88,0x2b,0x10,0xb3,0x50,0x3a,0x7d,0x8d,0x8d,0x96,0x69,0x9e,0x05,0x21,0xc1,0xa9,0x92,0xe6,0x5e,0xa7,0xd7,0x19,0x1c,0x1d,0x75,0x7a,0xf6,0xa0,0x6d,0x00,0x40,0xf8,0x1e,0xcd,0x8b,0x0a,0x9a,0x89,0xde,0xbd,0xfd,0xe7,0x44,0x2f,0xef,0x13,0x9d,0x22,0x60,0x7d,0x01,0xc9,0x22,0xe1,0x2d,0xa8,0xbe,0xbd,0x4f,0x35,0xc1,0x36,0xab,0x8a,0xa8,0x22,0x48,0xcf,0x07,0x89,0x7e,0x7f,0x9f,0xe8,0x3c,0xe1,0x3c,0xfa,0x7f,0xf2,0x7a,0x7e,0x9f,0xec,0x0a,0x19,0xa6,0xb8,0xf9,0x22,0x76,0x61,0x54,0xb4,0xad,0x3f,0x20,0x43,0x46,0x7c,0x50,0x59,0x8d,0xaa,0x39,0x6e,0x51,0x28,0xea,0xa8,0xa5,0x09,0xef,0x79,0x58,0xa7,0x82,0x69,0x8a,0x58,0x14,0xb3,0x60,0x5c,0xb4,0x80,0x56,0xad,0x8f,0x2f,0x42,0x31,0x35,0xab,0x23,0xf6,0x90,0x6e,0xb2,0xd2,0x4b,0x61,0x91,0xf3,0xe4,0xcb,0x5f,0xa9,0x97,0x61,0xf3,0x8f,0x92,0xef,0x69,0x7e,0xcd,0x10,0x91,0x8f,0x50,0x60,0xc6,0xe5,0x06,0x68,0xe3,0x30,0x41,0x05,0x62,0x36,0x45,0x6e,0x8b,0x95,0x4c,0x2f,0x97,0x2a,0xe7,0x58,0xae,0xde,0x60,0xaf,0x20,0x87,0x03,0xe5,0xe5,0x34,0x89,0x2c,0x0c,0x4f,0x4d,0x97,0x6a,0x7b,0xa1,0x71,0x36,0x7b,0xde,0x04,0x21,0xa7,0x4d,0xa5,0xee,0xc0,0xbc,0x4b,0x0d,0x14,0x92,0xca,0x10,0x48,0x27,0xcc,0x7e,0xa8,0x9c,0x4b,0xd0,0x26,0xba,0x1c,0xab,0xd5,0x63,0x7b,0x48,0xbd,0xb0,0x99,0x20,0xa6,0x37,0x26,0xe5,0xa8,0xa0,0x51,0xb6,0x27,0x40,0xdc,0x94,0x9b,0x5a,0x1b,0x54,0xf5,0x42,0x37,0x9e,0x30,0xdc,0xe2,0x69,0xd9,0xe1,0x3a,0x26,0x42,0x76,0x4c,0x7b,0x39,0xfa,0xc3,0x8c,0x3e,0x68,0x57,0x98,0xd0,0xc6,0x70,0x00,0x39,0x23,0x19,0x20,0x82,0x94,0x96,0xa8,0xff,0x16,0x40,0x14,0xcb,0x29,0x4f,0xd2,0x5c,0x84,0x45,0x4a,0xa9,0xd2,0x07,0xca,0x0e,0x36,0xc6,0xb4,0xa7,0x2b,0xc9,0xcf,0x79,0x34,0x97,0x0b,0xb5,0xff,0xa3,0x9f,0xb8,0x73,0x9a,0x6d,0xa8,0xb0,0x3e,0xdf,0xf8,0x39,0xfa,0xc0,0x6f,0xdd,0x65,0x1c,0x72,0xfc,0x23,0xe3,0x23,0x72,0x08,0xba,0x43,0x6b,0xd1,0xd0,0x94,0x30,0xe2,0x3f,0x02,0x01,0x1b,0x6f,0xc9,0xc1,0x0e,0xd5,0x68,0xe8,0x7a,0xf2,0xa4,0x5d,0xe2,0x10,0x39,0x89,0xde,0x7e,0x6e,0x89,0xed,0x43,0x80,0x70,0xbb,0x4e,0x82,0xd6,0xf0,0x1b,0xc1,0xdb,0x44,0x62,0xc7,0x41,0x86,0xa8,0x16,0x14,0xd2,0x34,0x09,0x93,0xce,0x0c,0x49,0x8a,0x6a,0x3b,0x5c,0xb0,0x4d,0x36,0x18,0x61,0x31,0x24,0x85,0x63,0x95,0x48,0x59,0x97,0xa4,0x4b,0x62,0x4f,0x03,0x35,0x19,0x4b,0xad,0x29,0xd8,0xfb,0x41,0x22,0xb4,0x15,0xc4,0x9c,0xf5,0x42,0xa5,0x54,0x50,0xc2,0xc6,0x9e,0x88,0x0c,0xd9,0x13,0x59,0xe8,0x63,0x2f,0xa3,0xba,0xf3,0x0d,0x0e,0x86,0x85,0xe7,0x1e,0xd0,0x01,0xdb,0x86,0xd1,0xd1,0xfa,0xfd,0x3c,0x2d,0x9b,0x53,0x91,0xa7,0x62,0x56,0xea,0xba,0xae,0x81,0x87,0xce,0x77,0xf5,0x7c,0xca,0x16,0x4a,0x2e,0x58,0x48,0xa4,0xd8,0x08,0x95,0xf9,0xc2,0x9c,0x15,0xa2,0x6f,0xab,0x6d,0x09,0x28,0xe6,0xd7,0x06,0x85,0x61,0xdf,0x23,0x80,0xbb,0x40,0x48,0x29,0x82,0x9d,0xa4,0x59,0x4c,0x7f,0xe1,0x42,0x86,0x3a,0x5d,0xb1,0x15,0x09,0xc6,0x88,0x81,0xc8,0xad,0x97,0xaf,0xd2,0xb6,0x1d,0x5f,0xcd,0xbf,0x2e,0x1c,0xf5,0x8f,0xb1,0xdf,0x00,0xaa,0xd5,0x3e,0x77,0x38,0x36,0x00,0x00
};
#endif

#if WEBSOCKETS
using namespace websockets;
WebsocketsServer WSserver;
int wsport = 8084;
#endif

#if ASYNCWEBSERVER
AsyncWebServer webserver(80);
#endif

#if MQTT
std::string sentTopic = "data";
std::string receivedTopic = "command";

MqttBroker broker(1883);
MqttClient myClient(&broker);

void receivedMessage(const MqttClient* source, const Topic& topic, const char* payload, size_t length)
{
  Serial << endl << "Received message on topic " << receivedTopic.c_str() << " with payload " << payload << endl;
    if (receivedTopic == "command")
  {
    mac[0] = atoi(&payload[0]);
    mac[1] = atoi(&payload[3]);
    mac[2] = atoi(&payload[6]);
    mac[3] = atoi(&payload[9]);
    mac[4] = atoi(&payload[12]);
    mac[5] = atoi(&payload[15]);
    
  }
}
#endif

#if WEBSOCKETS
void handle_message(WebsocketsMessage msg) {
  
  Serial.print("Message Received from javascript websocket client: ");
  Serial.println(msg.data());
 
  Serial.println("======= Filtered data by SQL statement ========");
  String sql = msg.data();
  
 if (sql.startsWith("select")){
    res = execQuery(sql);
    getData();
  } else if (sql.startsWith("insert")) {
    //processData();
  }  
  
  if(sql.endsWith("."))
  {
   Serial.println("The string ended with '.'");
  }
  
  Serial.println(sql);

  Serial.println("===============================================");
  Serial.println();
  
} 
#endif

void sendCommand()  {

  esp_wifi_set_mac(ESP_IF_WIFI_AP, mac);
  Serial << "Command sent to remote device :  " << mac[0] << "/" << mac[1] << "/" << mac[2] << "/" << mac[3] << "/" << mac[4] << "/" << mac[5] << "/" << endl;
 }

void setup()
{
  Serial.begin(115200);
  
  delay(500);
  Serial << "Starting client and AP......." << endl;

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {   Serial << '-'; delay(500); }

  Serial << "Connected to " << ssid << " IP address: " << WiFi.localIP() << endl;

  WiFi.softAP(apSSID, apPassword, apChannel, hidden);
  esp_wifi_set_event_mask(WIFI_EVENT_MASK_NONE); // This line is must to activate probe request received event handler.
  Serial << "The AP mac address is " << WiFi.softAPmacAddress().c_str() << endl;
  Serial << "Access point started with SSID " << apSSID << " and webserver started at IP address: " << WiFi.localIP() << endl;
  Serial.print("Websocket Server at Port: ");
  Serial.println(wsport);
  
#if ASYNCWEBSERVER
    webserver.on("/", HTTP_GET, [](AsyncWebServerRequest * request) 
    {
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, sizeof(index_html_gz));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
    });
    
    webserver.begin();
#endif
    
#if WEBSOCKETS
    WSserver.listen(wsport);
#endif

#if MQTT
    broker.begin();

  // ============= Client Subscribe ================
    myClient.setCallback(receivedMessage);
    myClient.subscribe(receivedTopic);
    myClient.subscribe(sentTopic);
#endif

#if PROBEREQUESTS
    WiFi.onEvent(probeRequest, SYSTEM_EVENT_AP_PROBEREQRECVED);
//    Serial << "Waiting for probe requests ... " << endl;
#endif

#if LITTLEDB
  waitForSync();
  Serial.println("UTC: " + UTC.dateTime());
  
  Timezone America;
  America.setLocation("America/New_York");
  //America.setPosix("EST--5EDT,M3.2.0,M11.1.0/2");
  Serial.println("EST time: " + America.dateTime());
  Serial.println("Time now is:" + America.dateTime("l ~t~h~e jS ~o~f F Y, g:i A") );
                                          //Saturday the 25th of August 2018, 2:23 PM
  
  //Serial.println(String((now()))); // + buffer); //for milliseconds precision                                      
  Timestamp = String((now())); // + buffer;     //for milliseconds precision
  //Serial.println(" " + America.dateTime("mdy") );                                       
  Date = " " + America.dateTime("mdy");
  Day  = " " + America.dateTime("l");
  //Serial.println(" " + America.dateTime("Hi") );                                       
  Time = " " + America.dateTime("Hi");
  Hour = " " + America.dateTime("H");
  
  delay(1000);
  LITTLEFS.begin(true);
  //LITTLEFS.format();

#if FIRSTTIME   
  res = execQuery("drop table test_tbl"); // For first time only
  res = execQuery("drop db test_db");     // For first time only
  res = execQuery("create db test_db");   // For first time only
#endif
   
  res = execQuery("use db test_db");

#if FIRSTTIME  
  String schem = "Timestamp id, Date text, Day text, Time text, Hour text, Location text, Voltage text, RSSI text, Temperature text, Humidity text, Pressure text, Light text"; // For first time only
  schem.trim(); // For first time only
  res = execQuery("create table test_tbl (" + schem + ")"); // For first time only
#endif 
  /*
  File schemFile = LITTLEFS.open(schemPath);
  
  String schemFromFile = schemFile.readString();
  schemFromFile.trim();
  schemFile.close();
      
  res = execQuery("update test_tbl set name=updated where id=1234567890abc");
  selectRes = execQuery("select from test_tbl where id=1234567890abc");
  res = execQuery("delete from test_tbl where id=1234567890abc");
  res = execQuery("update test_tbl set location=livingroom where id=1234567890abc");
  res = execQuery("delete from test_tbl where id=1234567890abc");
  
  delay(2000);
 
  tblPath = prefix + CONNECTED_DB + "/test_tbl";
  File tblFile = LITTLEFS.open(tblPath);
  while(tblFile.available()){
  Serial.print(tblFile.read(), HEX);
  Serial.print(" ");
  }
  Serial.println();
  listDir(LITTLEFS, "/", 2);
*/
   
#endif
  
}  // End of Setup


void loop()
{
#if MQTT
  broker.loop();  // Don't forget to add loop for every broker and clients
  myClient.loop();
#endif
  
#if WEBSOCKETS
  auto client = WSserver.accept();
  client.onMessage(handle_message);
  //client.send("Device Data: " + deviceData);
  //client.send("Sensor Data: " + sensorData);
  
  int length = epoch.length(); // get length of String
  epoch[length-1] = ']';       // Remove last comma of String and replce with ]
  length = Location.length();             // 1,2,3,4,5,
  Location[length-1] = ']';               // 1,2,3,4,5]    
  length = V.length();             
  V[length-1] = ']';                       
  length = S.length();         
  S[length-1] = ']';    
  length = T.length();         
  T[length-1] = ']';          
  length = H.length();
  H[length-1] = ']';
  length = P.length();
  P[length-1] = ']';
  length = L.length();
  L[length-1] = ']';     
  
 String graphData = "[" + epoch + ",[" + Location + ",[" + V + ",[" + S + ",[" + T + ",[" + H + ",[" + P + ",[" + L;
 //if(graphData.endsWith("]")){
 client.send(graphData);Serial.println(graphData);
 epoch = ""; Location = ""; V = ""; S = ""; T = ""; H = ""; P = ""; L = "";
// }
  
  while (client.available()) {
  
  client.poll();
  }
#endif
  
 //static auto next=millis();               // The next line is an efficient delay() replacement
 //if (millis() > next){next += 10000;}

} // End of Loop
/*
void processData()
{
               Timezone America; America.setLocation("America/New_York");
               Timestamp = String((now())); // + buffer;     //for milliseconds precision
               Date = " " + America.dateTime("mdy");
               Time = " " + America.dateTime("Hi");
               Day  = " " + America.dateTime("l");
               Hour = " " + America.dateTime("H");
               device = random(1,10);
               int voltage = random (26, 33);
               int temperature = random (65,70);
               int humidity = random (65,70);
               int pressure = random (65,70);
               int light = random (65,70);
               
               sensorData = ("{" + String(device) + "," + String(voltage) + "," + String(temperature) + "," + String(humidity) + "," + String(pressure) + "," + String(light) + "}");
               //Serial.println();
               //Serial.print("Received Sensor data: "); 
               //Serial.println(sensorData);
               //Serial.println();
 
               myClient.publish("Sensor", sensorData);

               device = random(1,10);
               int rssi = random (65, 70);
               int deviceMode = random (1,3);
               int WiFiChannel = random (1,11);
               int deviceIP = device;
               int sleepTime = random (1,100);
               
               deviceData = ("{" + String(device) + "," + String(rssi) + "," + String(deviceMode) + "," + String(WiFiChannel) + "," + String(deviceIP) + "," + String(sleepTime) + "}");
               //Serial.print("Received Status data : "); 
               //Serial.println(deviceData);
               //Serial.println();
                      
               myClient.publish("Device", deviceData);
               
               String insert = "insert into test_tbl values (";
  
               insert += Timestamp;
               insert += ",";
               insert += Date;
               insert += ",";
               insert += Day;
               insert += ",";
               insert += Time;
               insert += ", ";
               insert += Hour;
               insert += ", ";
               insert += device;
               insert += ", ";
               insert += voltage;
               insert += ", ";
               insert += rssi;
               insert += ", ";
               insert += temperature;
               insert += ", ";
               insert += humidity;
               insert += ", ";
               insert += pressure;
               insert += ", ";
               insert += light;
               insert += ")";
               Serial.println(insert);
               res = execQuery(insert);
            }
*/
#if LITTLEDB
void getData() {
  
  Serial.println("preparing data....");
  int i;
  /*
  String query;
  int count = 5;
  
    for(i=0; i< selectedRows->rowsLen; i++) {
    query = "insert into test_tbl values (";
    query.concat(i);
    query.concat(", 0526212039, 052621,2115,26,");
    query.concat(i);
    //query.concat(", ");
    //query.concat(i);
    query.concat(", insert select multiple rows )");
    execQuery(query);
    
   }
   */
    
    for(i=0; i< selectedRows->rowsLen; i++) {
   
    epoch += getText(selectedRows->rows[i], "Timestamp");
    epoch += ",";
    Location += getText(selectedRows->rows[i], "Location");
    Location += ",";
    V += getText(selectedRows->rows[i], "Voltage");
    V += ",";
    S += getText(selectedRows->rows[i], "RSSI");
    S += ",";
    T += getText(selectedRows->rows[i], "Temperature");
    T += ",";
    H += getText(selectedRows->rows[i], "Humidity");
    H += ",";
    P += getText(selectedRows->rows[i], "Pressure");
    P += ",";
    L += getText(selectedRows->rows[i], "Light");
    L += ",";
    /*Serial.print(epoch);
    dateReceived = getText(selectedRows->rows[i], "Date");
    Serial.print("Date:  "); Serial.println(dateReceived); 
    timeReceived = getText(selectedRows->rows[i], "Time");
    Serial.print("Time:  "); Serial.println(timeReceived); 
    rooms = getText(selectedRows->rows[i], "Location");
    Serial.print("Location:  "); Serial.println(rooms);
    T = getText(selectedRows->rows[i], "Temperature");
    Serial.print("Temperature:  "); Serial.println(T); 
    H = getText(selectedRows->rows[i], "Humidity");
    Serial.print("Humidity:  "); Serial.println(H); 
    P = getText(selectedRows->rows[i], "Pressure");
    Serial.print("Temperature:  "); Serial.println(P); 
    L = getText(selectedRows->rows[i], "Light");
    Serial.print("Humidity:  "); Serial.println(L); 
    */
    }

    File schemFile = LITTLEFS.open(schemPath);
  
    tblPath = prefix + CONNECTED_DB + "/test_tbl";
    File tblFile = LITTLEFS.open(tblPath);
    //while(tblFile.available()){
    //Serial.print(tblFile.read(), HEX);
    //Serial.print(" ");
    //}
  Serial.println();
  listDir(LITTLEFS, "/", 2);
 }
 #endif

 #if PROBEREQUESTS

void probeRequest(WiFiEvent_t event, WiFiEventInfo_t info) 
{
  
    Serial.print("Probe Received :  ");
    for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", info.ap_probereqrecved.mac[i]);
    if (i < 5)Serial.print(":");
    }
    Serial.println();

      if (info.ap_probereqrecved.mac[0] == 6 || info.ap_probereqrecved.mac[0] == 16 || info.ap_probereqrecved.mac[0] == 26 || info.ap_probereqrecved.mac[0] == 36 || info.ap_probereqrecved.mac[0] == 46 || info.ap_probereqrecved.mac[0] == 56 || info.ap_probereqrecved.mac[0] == 66 || info.ap_probereqrecved.mac[0] == 76 || info.ap_probereqrecved.mac[0] == 86 || info.ap_probereqrecved.mac[0] == 96 || info.ap_probereqrecved.mac[0] == 106 || info.ap_probereqrecved.mac[0] == 116 || info.ap_probereqrecved.mac[0] == 126 || info.ap_probereqrecved.mac[0] == 136 || info.ap_probereqrecved.mac[0] == 146 || info.ap_probereqrecved.mac[0] == 156 || info.ap_probereqrecved.mac[0] == 166 || info.ap_probereqrecved.mac[0] == 176 || info.ap_probereqrecved.mac[0] == 186 || info.ap_probereqrecved.mac[0] == 196 || info.ap_probereqrecved.mac[0] == 206 || info.ap_probereqrecved.mac[0] == 216 || info.ap_probereqrecved.mac[0] == 226 || info.ap_probereqrecved.mac[0] == 236 || info.ap_probereqrecved.mac[0] == 246) // only accept data from certain devices.
       {

      //sendCommand();

      if (info.ap_probereqrecved.mac[1] == 06) 
      { // only accept data from device with voltage as a sensor type at byte 1.
               if (device == 06) { for (int i = 0; i < 4; i++) sensorTypes[i] = Livingroom[i];} 
               if (device == 16) { for (int i = 0; i < 4; i++) sensorTypes[i] = Kitchen[i];}
               if (device == 26) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom1[i];} 
               if (device == 36) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom2[i];}
               if (device == 46) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom3[i];} 
               if (device == 56) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom4[i];}
               if (device == 66) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom1[i];} 
               if (device == 76) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom2[i];}
               if (device == 86) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom3[i];} 
               if (device == 96) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom4[i];}
               if (device == 106) { for (int i = 0; i < 4; i++) sensorTypes[i] = Laundry[i];} 
               if (device == 116) { for (int i = 0; i < 4; i++) sensorTypes[i] = Boiler[i];}
               if (device == 126) { for (int i = 0; i < 4; i++) sensorTypes[i] = Workshop[i];} 
               if (device == 136) { for (int i = 0; i < 4; i++) sensorTypes[i] = Garage[i];}
               if (device == 146) { for (int i = 0; i < 4; i++) sensorTypes[i] = Office[i];}
               if (device == 156) { for (int i = 0; i < 4; i++) sensorTypes[i] = Tank[i];} 
               if (device == 166) { for (int i = 0; i < 4; i++) sensorTypes[i] = Solar[i];}
               deviceStatus[0] = info.ap_probereqrecved.mac[2];
               deviceStatus[1] = info.ap_probereqrecved.mac[3];
               deviceStatus[2] = info.ap_probereqrecved.mac[4];
               deviceStatus[3] = info.ap_probereqrecved.mac[5];
      } else {

      device = info.ap_probereqrecved.mac[0];
               
      voltage = info.ap_probereqrecved.mac[1];
      voltage = voltage * 2 / 100;
                  
      sensorValues[0] = info.ap_probereqrecved.mac[2];
      sensorValues[1] = info.ap_probereqrecved.mac[3];
      sensorValues[2] = info.ap_probereqrecved.mac[4];
      sensorValues[3] = info.ap_probereqrecved.mac[5];
              
      }

      if (voltage > 2.50 && voltage < 3.60) 
      {
      
      sprintf (str, "{");
      sprintf (s, "\"%s\":\"%i\"", "Location", device);    strcat (str, s);
      sprintf (s, ",\"%s\":\"%.2f\"", "Voltage", voltage);    strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[0], sensorValues[0]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[1], sensorValues[1]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[2], sensorValues[2]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[3], sensorValues[3]); strcat (str, s);
      sprintf (s, "}"); strcat (str, s);
              
      Serial.println();
      Serial.println("Following ## Sensor Values ## receiced from remote device  & published via MQTT: ");
      Serial.println(str);
      Serial.println();
      /*
      sensorData = (",[" + Date + "," + Time + "," + String(info.ap_probereqrecved.mac[0], DEC) + "," + String(info.ap_probereqrecved.mac[1], DEC) + "," + String(info.ap_probereqrecved.mac[2], DEC) + "," + String(info.ap_probereqrecved.mac[3], DEC) + "," + String(info.ap_probereqrecved.mac[4], DEC) + "," + String(info.ap_probereqrecved.mac[5], DEC) + "]");
      Serial.println();
      Serial.print("Received Sensor data: "); 
      Serial.println(sensorData);
      Serial.println();
      */
      //myClient.publish("Sensor", sensorData);
      myClient.publish("sensor", str);
      
      if (voltage < 2.50) {      // if voltage of battery gets to low, print the warning below.
         //myClient.publish("Warning/Battery Low", location);
       }
     }

   if (info.ap_probereqrecved.mac[3] == apChannel) {
     
     sprintf (str, "{");
     sprintf (s, "\"%s\":\"%i\"", "Location", device);    strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "RSSI", info.ap_probereqrecved.rssi); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "MODE", deviceStatus[0]); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "CHANNEL", deviceStatus[1]); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "IP", deviceStatus[2]); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "Sleeptime", deviceStatus[3]); strcat (str, s);
     sprintf (s, "}"); strcat (str, s);
                           
     Serial.println();
     Serial.println("Following ## Device Status ## receiced from remote device & published via MQTT: ");
     Serial.println(str);
     Serial.println();

               Timezone America; America.setLocation("America/New_York");
               Timestamp = String((now())); // + buffer;     //for milliseconds precision
               Date = " " + America.dateTime("mdy");
               Time = " " + America.dateTime("Hi");
               Day  = " " + America.dateTime("l");
               Hour = " " + America.dateTime("H");

               String insert = "insert into test_tbl values (";
  
               insert += Timestamp;
               insert += ",";
               insert += Date;
               insert += ",";
               insert += Day;
               insert += ",";
               insert += Time;
               insert += ", ";
               insert += Hour;
               insert += ", ";
               insert += device;
               insert += ", ";
               insert += voltage;
               insert += ", ";
               insert += info.ap_probereqrecved.rssi;
               insert += ", ";
               insert += sensorValues[0];
               insert += ", ";
               insert += sensorValues[1];
               insert += ", ";
               insert += sensorValues[2];
               insert += ", ";
               insert += sensorValues[3];
               insert += ")";
               Serial.println(insert);
               res = execQuery(insert);
               
   }
  }
}
#endif 
