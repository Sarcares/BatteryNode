// convert your HTML/CSS/JAVASCRIPT TO HEX here: https://gchq.github.io/CyberChef/#recipe=Gzip('Dynamic%20Huffman%20Coding','index.html.gz','',false)To_Hex('0x',0)Split('0x',',0x')&input=PGh0bWw%2BC
#define PROBEREQUESTS       true  // Establish low power sensor network(more power efficient than ESPNow protocol). Requires slave device(s) on ESP8266.
#define MQTT                true  // MQTT broker if needed.
#define ASYNCWEBSERVER      true  // Publishes web interface
#define WEBSOCKETS          true  // Communicate with Websockets clients
#define APPENDTOLITTLEFS    true  // If false stops appending to file but still shows file size.
#define FIRSTTIME           true  // Warning - This must be false.Make it true if creating new file for first time.

#include <Arduino.h>
#include <WiFi.h>
#include "time.h"

#define MYFS LITTLEFS
#define FORMAT_LITTLEFS_IF_FAILED true

const char* ssid = "";
const char* password = "";
const char* apSSID = "ESP";
const char* apPassword = "";
const int apChannel = 7;
const int hidden = 0; // If hidden is 1 probe request event handling does not work ?

const char* http_username = "admin";  // Web interface Login.
const char* http_password = "admin";  // Web interface password.

String dataFile = "/data.json";  // File to store sensor data.

int Livingroom[4] = {16,26,36,46};
int Kitchen[4] =    {46,36,26,16};
int Bedroom1[4] =   {46,36,26,16};
int Bedroom2[4] =   {16,26,36,36};
int Bedroom3[4] =   {16,26,36,36};
int Bedroom4[4] =   {16,26,36,36};
int Bathroom1[4] =  {16,26,36,36};
int Bathroom2[4] =  {16,26,36,36};
int Bathroom3[4] =  {16,26,36,36};
int Bathroom4[4] =  {16,26,36,36};
int Laundry[4] =    {16,26,36,36};
int Boiler[4] =     {16,26,36,36};
int Workshop[4] =   {16,26,36,36};
int Garage[4] =     {16,26,36,36};
int Office[4] =     {16,26,36,36};
int Tank[4] =       {16,26,36,36};
int Solar[4] =      {16,26,36,36};


//==================User configuration not required below this line ================================================

char str [256], s [70];
String graphData, graphDataToWS;
int device, rssi, sensorValues[4], sensorTypes[4];
float voltage;
uint8_t mac[6];
const char* ntpServer = "pool.ntp.org";
unsigned long epoch; 
String Epoch = String(epoch);String Loc = String(device);String V = String(voltage, 2);String S = String(rssi);String T = String(sensorValues[0]);String H = String(sensorValues[1]);String P = String(sensorValues[2]);String L = String(sensorValues[3]); 

#if PROBEREQUESTS
#include <esp_wifi.h>
#endif

#if MQTT
#include <TinyMqtt.h>   // Thanks to https://github.com/hsaturn/TinyMqtt
std::string sentTopic = "data";
std::string receivedTopic = "command";
MqttBroker broker(1883);
MqttClient myClient(&broker);
#endif

#if ASYNCWEBSERVER
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <FS.h>
#include "LITTLEFS.h"
#include <SPIFFSEditor.h>
#include <ArduinoOTA.h>
#include <ESPmDNS.h>
int index_html_gz_len = 27430;
const uint8_t index_html_gz[] = {
0x1f,0x8b,0x08,0x08,0xd5,0x22,0xc8,0x60,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xed,0x5c,0xeb,0x76,0xdb,0x38,0x92,0xfe,0x6d,0x9f,0x7d,0x08,0x34,0x7b,0xba,0x25,0xb7,0x25,0x52,0x94,0x2c,0xc7,0xf1,0x6d,0x37,0x9d,0xb6,0x37,0xd9,0x4d,0x3a,0x99,0x38,0x33,0xfd,0xc3,0xe3,0xb3,0x87,0x12,0x21,0x8b,0x31,0x45,0x72,0x79,0xb1,0xad,0xc9,0xf8,0xd1,0xf6,0xec,0x23,0xed,0x2b,0xcc,0x57,0xb8,0xf0,0x26,0x52,0x56,0xda,0x3d,0xb3,0xfd,0x23,0xba,0x92,0x40,0xa1,0x50,0xa8,0x42,0x15,0x0a,0x05,0x80,0xc7,0xf3,0x74,0xe1,0x9f,0xb2,0xed,0xe3,0x39,0x77,0x5c,0xfa,0x5f,0xf0,0xd4,0x61,0xd3,0xb9,0x13,0x27,0x3c,0x3d,0x31,0xb2,0x74,0xd6,0x3f,0x30,0x4e,0x55,0x72,0xe0,0x2c,0xf8,0x89,0x71,0xeb,0xf1,0xbb,0x28,0x8c,0x53,0x83,0x4d,0xc3,0x20,0xe5,0x01,0xc0,0xee,0x3c,0x37,0x9d,0x9f,0xb8,0xfc,0xd6,0x9b,0xf2,0xbe,0xb8,0xe9,0x31,0x2f,0xf0,0x52,0xcf,0xf1,0xfb,0xc9,0xd4,0xf1,0xf9,0x89,0x6d,0x10,0xf2,0xd4,0x4b,0x7d,0x7e,0xfa,0x3e,0x0e,0x27,0x3c,0xe6,0xff,0x9d,0xf1,0x24,0xed,0xb1,0x8f,0x5e,0xb0,0x7c,0xfb,0xc7,0x8f,0x1f,0x7b,0xec,0x17,0x3e,0x49,0xc2,0xe9,0x0d,0x4f,0x93,0x1e,0x7b,0x91,0x2c,0x83,0xe9,0x1d,0x12,0x78,0x7c,0xcb,0xe3,0x1e,0x7b,0xe3,0xa5,0x28,0x7a,0x7e,0xc1,0xce,0x5c,0x2f,0x0d,0x63,0xf6,0x3d,0xcb,0xde,0xfb,0x61,0x7a,0x6c,0x49,0x94,0xc0,0x9d,0x4c,0x63,0x2f,0x4a,0x59,0xba,0x8c,0x40,0x63,0xca,0xef,0x53,0xeb,0x93,0x73,0xeb,0xc8,0x54,0x83,0x25,0xf1,0xf4,0xc4,0x98,0xa7,0x69,0x94,0x1c,0x5a,0xd6,0xd4,0x0d,0x3e,0x25,0xe6,0xd4,0x0f,0x33,0x77,0xe6,0x3b,0x31,0x37,0xa7,0xe1,0xc2,0x72,0x3e,0x39,0xf7,0x96,0xef,0x4d,0x12,0xeb,0x13,0x28,0x8b,0x97,0x96,0x6d,0xda,0xb6,0x39,0x54,0x77,0xe6,0xc2,0x0b,0xcc,0x4f,0x89,0x71,0x7a,0x6c,0x49,0x94,0xa7,0xdb,0xdb,0xc7,0xbe,0x17,0xdc,0xb0,0x98,0xfb,0x27,0x46,0x92,0x2e,0x7d,0x9e,0xcc,0x39,0x47,0x55,0xf3,0x98,0xcf,0x2a,0x75,0xa1,0x9c,0xcb,0x7d,0xef,0x36,0x36,0x03,0x9e,0x5a,0x41,0xb4,0xb0,0xb2,0x08,0xb4,0xff,0x9b,0x6d,0xee,0x9b,0xcf,0x2c,0xd7,0x4b,0x52,0x4b,0x34,0x46,0xd4,0x31,0x4d,0x50,0x09,0x70,0x0b,0x8c,0xa7,0xdb,0x93,0xd0,0x5d,0xb2,0xcf,0x0b,0x27,0xbe,0xf6,0x82,0x43,0x36,0x38,0x7a,0xd8,0x36,0xb3,0xbe,0xcf,0xaf,0x79,0xe0,0xe2,0xc2,0x0b,0x40,0x02,0x67,0xb8,0xba,0x75,0xfc,0x8c,0xb3,0xcf,0x82,0xf7,0x87,0xcc,0x1e,0x0f,0xa2,0xfb,0x23,0x62,0x42,0xdf,0xf1,0xbd,0x6b,0x94,0xf4,0xf9,0x2c,0x45,0xe1,0xad,0xad,0xed,0x6f,0x49,0x6a,0x0e,0x8a,0xc5,0xec,0x33,0xd3,0xf0,0x83,0xc1,0x77,0x47,0x6c,0xce,0xbd,0xeb,0x79,0x7a,0xc8,0xf6,0x9e,0xdf,0xce,0x8f,0xd8,0xc4,0x99,0xde,0x5c,0xc7,0x61,0x16,0xb8,0xfd,0x69,0xe8,0x87,0xf1,0x21,0xfb,0x76,0x34,0x1a,0x1d,0x31,0xd0,0x1b,0xf9,0xce,0xf2,0x90,0xcd,0x7c,0x7e,0x7f,0xc4,0x04,0xfe,0xbe,0x97,0xf2,0x45,0x72,0xc8,0xa6,0xe8,0x0d,0x3c,0x3e,0x62,0x9f,0xb2,0x24,0xf5,0x66,0x4b,0x14,0x14,0x1d,0xa4,0xc8,0x08,0x21,0xcc,0x99,0x1f,0xde,0x1d,0xb2,0xb9,0xe7,0xba,0x3c,0x40,0x35,0x61,0xec,0xf2,0xb8,0x1f,0x3b,0xae,0x97,0x01,0xc3,0x33,0xd0,0xcd,0xd2,0x30,0x9b,0xce,0xfb,0xce,0x34,0xf5,0x42,0x90,0x1e,0x84,0x01,0x3f,0x62,0x0f,0x6c,0xfb,0x5b,0xaa,0xa5,0x42,0x34,0x01,0x6b,0xaa,0xd5,0xed,0x2a,0xd9,0xf1,0xf5,0xa4,0x3b,0xdc,0x1b,0xf7,0xd8,0x70,0x34,0xe8,0xb1,0xe7,0xcf,0x77,0x74,0xa5,0x54,0x26,0xba,0x67,0x49,0xe8,0x7b,0x2e,0x41,0x39,0x5d,0x7b,0xb4,0xdf,0x63,0xc5,0x8f,0x39,0xce,0x61,0x73,0x02,0xc7,0xc4,0xa9,0x26,0x02,0x33,0x74,0xd5,0x7e,0xc2,0x7d,0x3e,0x05,0x31,0x55,0x9a,0x0f,0x09,0xf2,0x16,0xe2,0x69,0xa6,0x0e,0xf5,0xee,0x1f,0x80,0x3c,0x9b,0x7e,0x86,0xa0,0xd1,0x36,0x07,0x03,0xd4,0x9c,0x17,0x9f,0x13,0xdb,0x50,0x7a,0x9a,0xc5,0x09,0x95,0x89,0x42,0x4f,0xb2,0x53,0xd1,0xa6,0x18,0x32,0x14,0x0c,0xa0,0x52,0xe8,0xd3,0x0e,0xe0,0xa3,0x30,0x81,0x0e,0x12,0x89,0x33,0xef,0x9e,0xbb,0x47,0x2c,0x96,0xac,0x1a,0x8d,0xcc,0xd1,0x48,0x34,0x23,0xa2,0x06,0x91,0xb4,0xa9,0x54,0x92,0xa2,0xd8,0x42,0x08,0x4d,0xf4,0x8f,0xcf,0xb5,0x1e,0x11,0x39,0xae,0xeb,0x05,0xd7,0x87,0x83,0x23,0xa6,0x3a,0x64,0x7e,0xd5,0x9f,0xf8,0xd0,0xdc,0x7e,0x92,0x3a,0x71,0xba,0x92,0x8a,0xbe,0x5a,0x4a,0x93,0x7d,0x76,0x05,0x54,0x25,0x0b,0xd8,0x46,0x6a,0x98,0xb7,0xb8,0xfe,0x9c,0xf7,0x3e,0x81,0x99,0x0a,0xdf,0xab,0xd6,0xcb,0x2e,0x0c,0x0d,0xea,0x2b,0xa2,0x55,0x2f,0xae,0x48,0x6f,0x8f,0x18,0xa4,0x2a,0xa4,0xc6,0x1f,0x40,0xfc,0xa8,0x0b,0x3a,0x2d,0xb4,0x8d,0x41,0xef,0x2c,0x65,0x08,0xb7,0x8f,0x49,0xf5,0x60,0xf9,0xbe,0xcc,0xae,0x6c,0xac,0xeb,0x9e,0x37,0xe3,0x8d,0x46,0x65,0x3e,0xfc,0x6d,0x0d,0x24,0xf0,0x01,0xeb,0x2c,0x8c,0x17,0x4c,0x76,0xd8,0x13,0x03,0x06,0x86,0xa1,0xd5,0x17,0x67,0x6f,0xce,0x5e,0x7e,0x64,0x53,0xdf,0x49,0x92,0x13,0x03,0x36,0x70,0x02,0x3e,0x1b,0x0c,0xca,0x20,0xee,0x16,0x4e,0xe0,0x1a,0xc2,0xe6,0xb3,0x13,0x66,0x38,0xa2,0x10,0x63,0xc7,0x61,0x44,0x48,0x40,0xb2,0xba,0xa8,0xa4,0x4a,0x94,0xcd,0x79,0x3f,0x79,0xd7,0x5e,0xea,0xf8,0xec,0x97,0x18,0x9d,0xba,0x19,0xe4,0x45,0xe0,0xf8,0xe1,0xf5,0x3a,0x08,0x8d,0xe4,0x03,0xa4,0xb4,0x16,0x47,0x3b,0xc0,0xcf,0x3c,0x8c,0xa0,0x0e,0x7e,0x4b,0x0b,0x78,0xca,0x5e,0xbc,0x67,0x2f,0xe7,0x4e,0x10,0xac,0x83,0xb9,0xf0,0x39,0x8f,0x20,0x9b,0x45,0x0b,0xa1,0x04,0xf3,0x36,0x74,0x4b,0xb9,0xc7,0x96,0xe4,0x0e,0x89,0x63,0x1d,0xeb,0xe5,0x30,0x5a,0x70,0x7e,0xb2,0x11,0xe7,0xdf,0x78,0xb7,0xd0,0xcd,0x38,0x0c,0x17,0xcd,0xf9,0xff,0xe9,0xa5,0xd3,0x39,0x0f,0x9a,0x33,0x7f,0xe4,0x2e,0x95,0xb4,0xd7,0xe6,0x0e,0x5b,0x72,0x9d,0x74,0xbe,0xae,0xb0,0xca,0x6e,0x29,0xfd,0xc6,0x81,0x2d,0x8c,0x97,0xcd,0x99,0xef,0x66,0x33,0x70,0xa2,0x9a,0xb7,0x31,0x1b,0x55,0x0f,0xb6,0x0b,0x46,0x4e,0x0d,0x56,0xc5,0x3f,0x18,0x34,0xd7,0x3b,0x68,0x69,0xcb,0xa0,0xa5,0x11,0x83,0x51,0x4b,0xfa,0x5e,0x4b,0xfa,0xb8,0x25,0x7d,0xbf,0x39,0xdd,0x6e,0xa9,0xd7,0x6e,0xa9,0xd7,0x6e,0xa9,0xd7,0x6e,0xa9,0xd7,0x6e,0xa9,0x77,0xd8,0x92,0x3e,0x6a,0x49,0xdf,0x6b,0x49,0x1f,0xb7,0xa4,0xef,0xb7,0xa4,0x3f,0x6b,0x49,0x3f,0x68,0x49,0x7f,0xde,0xc6,0xb7,0x56,0x86,0xb6,0xb5,0xd8,0x6e,0x6b,0x32,0xfc,0x81,0x36,0x5e,0xb7,0x65,0xb4,0xb5,0xda,0x6e,0x6b,0xb6,0xdd,0xd6,0x6e,0xbb,0xad,0xe1,0x76,0x5b,0xcb,0x87,0x6d,0x2d,0x1f,0xb6,0xca,0xba,0xad,0xe5,0xc3,0xb6,0x96,0x0f,0xdb,0x5a,0x3e,0xac,0xb7,0xfc,0x4b,0x75,0x76,0x58,0xe8,0xac,0x5b,0x33,0x7e,0x5f,0x55,0xf6,0xab,0xca,0x7e,0x55,0xd9,0x7f,0xac,0xca,0x7e,0xa1,0xb6,0x8e,0x0a,0x6d,0xe5,0x5f,0xb5,0xf5,0xab,0xb6,0x7e,0xd5,0xd6,0xdf,0xb3,0xb6,0xee,0x15,0xda,0x3a,0xfb,0xea,0x0f,0x7f,0x55,0xd7,0xaf,0xea,0xfa,0x7b,0x55,0x57,0x3f,0x5b,0x04,0x85,0xb2,0x5e,0xd7,0x86,0xd6,0x1f,0x0a,0x94,0x5b,0xf9,0x64,0x3a,0x9c,0x3a,0x74,0xd1,0x12,0x3a,0x71,0x5a,0x83,0x2a,0x4e,0xcb,0x04,0xbc,0x3d,0xbc,0xf1,0x2a,0xcc,0xe2,0x2f,0x6f,0xd4,0xcc,0xe3,0x7e,0x29,0xa6,0x34,0x57,0x6d,0xaa,0x46,0x04,0x7e,0xef,0x8d,0x08,0x23,0x1e,0x3b,0x08,0xb1,0x15,0xed,0xf0,0x6a,0xb2,0x39,0x69,0xae,0xee,0x9b,0x96,0xf4,0x96,0x88,0xce,0x71,0x4b,0x72,0x1b,0x96,0x96,0xf4,0xe3,0x12,0xfa,0xa2,0x89,0xc7,0x93,0x58,0xac,0x32,0xa8,0xb0,0xe3,0xad,0x13,0x33,0x27,0x4d,0x9d,0xe9,0xfc,0xec,0x16,0xa1,0x7a,0x34,0x6a,0x96,0x05,0x22,0x5a,0xd8,0x0d,0x10,0xc4,0xea,0x31,0x4e,0xc9,0x3d,0xe6,0x23,0x80,0xc9,0x11,0x8c,0xed,0x51,0xb8,0xfb,0xa5,0x13,0xa5,0x59,0xcc,0x77,0xd8,0x67,0x54,0x68,0x59,0xec,0x2d,0x4f,0xe7,0xa1,0xcb,0x10,0x6a,0x64,0xe7,0xe7,0x3d,0xf6,0x8e,0xf8,0xd4,0x43,0x24,0x2d,0x0e,0x17,0xc0,0x70,0xe1,0xcc,0x9c,0xd8,0x03,0xa4,0x37,0x63,0x5d,0xc4,0xf0,0x03,0x37,0xbc,0x33,0x11,0x51,0x16,0x15,0xbe,0x51,0x78,0x99,0x44,0xc6,0x10,0x40,0x77,0xf9,0x4a,0x6e,0x77,0x0d,0x15,0xec,0x6f,0x7f,0x63,0x33,0xc7,0x4f,0xf8,0xce,0x11,0x10,0x3c,0x48,0x8a,0x5e,0x9f,0xb1,0xb9,0x93,0x30,0x2f,0x4d,0x58,0x78,0x17,0x30,0x2c,0x62,0x81,0x40,0x64,0x71,0xc0,0x55,0x2a,0x2a,0x9a,0xde,0xed,0x84,0x41,0x67,0xb7,0x56,0x91,0xc2,0xf9,0x70,0xb4,0xbd,0x0d,0xac,0xef,0x82,0x29,0x67,0xe9,0x9c,0xab,0x46,0x30,0x3f,0x74,0xdc,0x84,0x61,0x6c,0x15,0x89,0x3f,0xbd,0x7b,0xcb,0xbc,0x04,0xcb,0x42,0x8e,0xbb,0xec,0x29,0xa6,0x8a,0x0c,0x81,0x13,0x31,0x77,0x71,0xb3,0x40,0x4c,0x1b,0x38,0xcb,0x15,0x4b,0x6c,0x3d,0x66,0x10,0x3e,0xa3,0x57,0x48,0x40,0xf2,0x84,0x44,0x24,0x97,0x17,0xfe,0x4b,0x0d,0xe5,0x90,0x92,0x1b,0x4e,0xb3,0x05,0x0a,0x9b,0xd7,0x3c,0x3d,0xf3,0x39,0x5d,0xfe,0xb8,0x7c,0xed,0x76,0xf3,0xf8,0x2d,0x28,0xaf,0x94,0x7d,0x85,0x44,0x1f,0x7c,0x2e,0x09,0x58,0xb3,0x9c,0x31,0xd9,0x4d,0xec,0x75,0x78,0x55,0x70,0x72,0xa7,0x57,0x29,0x32,0xdc,0x80,0x14,0x9b,0x68,0x29,0x17,0x1a,0x6d,0x50,0x68,0x58,0x2f,0xb4,0xb7,0x41,0xa1,0x51,0xbd,0xd0,0x78,0x83,0x42,0x7b,0xf5,0x42,0xfb,0xeb,0x0b,0x09,0xeb,0x5c,0x2b,0xf2,0x6c,0x5d,0x11,0x69,0xfb,0x6a,0x25,0x0e,0xd6,0x95,0xc8,0x0d,0xcd,0xce,0xd1,0x96,0xb4,0x91,0x8c,0xba,0xdf,0xc5,0x1c,0x7d,0x8e,0xc4,0x8f,0x25,0x34,0xd9,0x0f,0x9d,0x28,0x8a,0xc3,0x28,0xf6,0x60,0x1b,0x95,0x98,0x3b,0x89,0x84,0x27,0x5d,0x4b,0xe7,0x5e,0x62,0xca,0xf5,0xc1,0x13,0x18,0x2b,0x1d,0xfe,0x36,0x72,0xb9,0x2b,0x8a,0xb4,0xf8,0x4d,0xb1,0x18,0x62,0xaa,0x95,0x16,0xb2,0x6f,0x86,0x26,0x5a,0x8b,0xfb,0x71,0x90,0xd1,0xe3,0x20,0x7b,0x8f,0x83,0x8c,0x1f,0x07,0xd9,0x5f,0x05,0xa1,0xc5,0xb7,0x3a,0xd8,0xb3,0xcd,0xc0,0x0e,0xda,0xc0,0xd8,0xf6,0x56,0xce,0xa9,0x07,0x69,0x3f,0x1a,0x78,0x5b,0x5d,0x3c,0x30,0xc8,0x26,0x35,0x40,0x14,0x4b,0x07,0x6d,0x10,0xb4,0x70,0xd0,0x94,0x57,0x5e,0xfd,0x68,0xca,0x2f,0xad,0x7d,0x14,0xe2,0xfd,0xa7,0x09,0xb8,0x89,0xa1,0x0d,0x42,0x6e,0x02,0x6b,0x10,0x74,0x13,0xd8,0x3f,0x57,0xd8,0x5b,0x6b,0x24,0x5d,0x59,0xcc,0x5a,0x23,0x8a,0xd6,0x7c,0x39,0x10,0xff,0x3f,0x48,0xe9,0xf7,0x2d,0xa1,0x3a,0x1b,0xda,0x65,0x04,0xf9,0x40,0x4a,0xca,0x9f,0x68,0x67,0x2e,0x2c,0x27,0xc0,0x5a,0x79,0x5a,0x25,0x6e,0x1d,0x6b,0x5b,0x20,0x1f,0xd5,0x83,0xcd,0x19,0xbd,0x39,0xaf,0xd7,0xb1,0xbb,0x01,0xaa,0x81,0xdb,0x80,0x22,0xf6,0xb5,0x32,0x59,0x2b,0x01,0x39,0x52,0xc2,0xe4,0x91,0x03,0x24,0x7c,0x09,0x8c,0x40,0x7f,0x82,0x4e,0xd0,0xb8,0x13,0x06,0xd8,0x28,0x14,0x5c,0x63,0x00,0xc2,0x68,0x14,0x06,0x37,0x7c,0x19,0xc5,0x3c,0x49,0xa4,0xa7,0x93,0x90,0xab,0xe3,0xf2,0x14,0xa3,0x11,0xbb,0xc3,0xca,0xa3,0x28,0x21,0xcb,0x4b,0x41,0x85,0xb3,0xba,0x3f,0x43,0xbe,0x9a,0xc4,0x48,0x4e,0x5a,0xd9,0x37,0xaa,0x02,0xc2,0x47,0x92,0x60,0xf0,0x92,0x2a,0x6e,0x8d,0x18,0x5d,0xd7,0x96,0xd3,0x34,0x36,0x94,0x7c,0x20,0x5f,0xe9,0x0f,0x5d,0x3d,0x1c,0xef,0x98,0xc2,0x85,0xeb,0x16,0x7e,0x12,0x69,0xea,0x1f,0x30,0x90,0x63,0x29,0xdd,0xd8,0x31,0x93,0x6c,0xb2,0xf0,0xd2,0x5a,0xb6,0x76,0xb5,0x82,0xf4,0xe5,0xa3,0x3e,0x5a,0x07,0x74,0x64,0x7e,0xda,0xd9,0x91,0x1d,0x57,0x8a,0xed,0x2e,0x31,0x51,0xda,0x05,0xe1,0x39,0x0a,0xec,0x04,0x11,0x4a,0x61,0x59,0xd8,0x48,0x15,0xa7,0x5d,0xe3,0x42,0xd4,0x9c,0x72,0xed,0x4d,0x58,0x16,0x2c,0x4d,0xb7,0x73,0x81,0x72,0xb4,0x3d,0x83,0x75,0xd8,0x6e,0x99,0x04,0xd5,0xb4,0x0d,0x9a,0x87,0xec,0x0e,0xed,0x85,0xa2,0xc9,0x0e,0xc8,0x42,0x62,0x47,0xf2,0xb9,0x53,0xf6,0x46,0x01,0x47,0x2a,0x07,0x58,0x6c,0x25,0x12,0x35,0xc8,0x26,0xc0,0x91,0x6c,0x19,0x03,0x9b,0x46,0xbd,0xea,0x38,0xb7,0x3a,0xb2,0x55,0xc7,0x32,0x34,0xf3,0x33,0x31,0x81,0xb8,0x1b,0x39,0x4b,0xf2,0x90,0xc1,0xd9,0x26,0x12,0x76,0x59,0xc7,0x22,0x06,0x50,0x9e,0x74,0x56,0x1b,0xb3,0xb4,0x53,0xaa,0x33,0xd1,0xdd,0xa9,0x97,0x63,0xdf,0xc7,0xba,0xb6,0x55,0xad,0x3e,0x51,0x05,0xba,0x72,0xb1,0xff,0x43,0x08,0x43,0xb2,0x61,0x19,0xd5,0xcc,0x61,0x85,0x6a,0x52,0xd2,0xb5,0x02,0x51,0xc6,0xf0,0x0b,0xa9,0x35,0xf0,0xd6,0xb5,0x92,0xb3,0x5b,0xc9,0x3a,0xff,0x80,0x59,0x4e,0x8a,0xed,0x29,0x36,0xfb,0xe5,0xd5,0xd9,0x87,0xb3,0x1c,0x56,0x78,0xb9,0x25,0xd0,0x12,0x1a,0xed,0xce,0x56,0x10,0x75,0xce,0x68,0x27,0x13,0x5b,0x62,0x26,0x0e,0xd5,0x0f,0x89,0x2b,0x64,0x7a,0x64,0xab,0xb6,0xa8,0x43,0x7e,0x5b,0x56,0x93,0xae,0xa2,0x5a,0xb5,0x5c,0xf6,0x6b,0xda,0xbf,0x93,0x6f,0x9f,0xa1,0x79,0xed,0xb1,0x17,0x44,0x59,0x79,0xcb,0x0e,0xcd,0xdc,0x4f,0x0c,0x89,0x08,0x7b,0x76,0xbc,0xbf,0x8a,0x69,0xfb,0x58,0xad,0x33,0x62,0xfb,0x1e,0x54,0xc7,0x90,0x66,0x09,0xbb,0x63,0x98,0x55,0x43,0x21,0x55,0x3d,0x07,0x20,0x45,0x63,0x4a,0xb9,0xc4,0x5e,0x3d,0x8b,0x4c,0x02,0x5d,0x50,0x5d,0x62,0xef,0x55,0x1c,0xde,0x21,0x6e,0x80,0x58,0x2b,0x78,0x87,0x8b,0xd1,0x58,0x52,0xa0,0x0c,0x6c,0xa9,0xaa,0x24,0xe2,0xbe,0x8f,0x8d,0x19,0xd3,0x1b,0x44,0x47,0x68,0xfa,0x6a,0x30,0x31,0x75,0x0c,0x03,0x7f,0x09,0xda,0xe3,0x0c,0x09,0xc2,0x38,0x23,0x1b,0x3b,0xa1,0xfa,0x44,0xfb,0xa1,0xbd,0x8f,0x7d,0x4c,0x62,0xbb,0x54,0xbe,0xf9,0x8d,0x2f,0x8e,0x68,0x9b,0xa6,0xa5,0x29,0x20,0x6a,0xbe,0xe9,0xf7,0x8f,0xa3,0x53,0xd5,0x12,0xaa,0x9e,0x8c,0xc2,0x5b,0x18,0x3f,0x07,0x96,0xb3,0xc2,0x1d,0xc2,0x0a,0x72,0x07,0x39,0x61,0x83,0x7d,0x0b,0x1f,0xc2,0x38,0xc9,0xd2,0x34,0x0c,0xc8,0xd4,0xfb,0x1e,0x11,0x49,0xac,0xfa,0x88,0x42,0xdd,0x1d,0x03,0x7b,0x5c,0x0a,0x46,0x30,0xcc,0xfa,0x2f,0xfe,0xf8,0xe6,0xd8,0x92,0x05,0x10,0x74,0x88,0x50,0x3a,0xf3,0x15,0xe7,0xa7,0x1c,0x1b,0xe0,0x5c,0x5d,0xf9,0xa9,0x2a,0x94,0x60,0x9b,0x92,0x4a,0xa3,0x19,0xb3,0x04,0x62,0x33,0x04,0x0c,0x60,0xc0,0x68,0x5f,0x13,0x4d,0x6d,0x38,0x3a,0xeb,0x84,0x63,0xd3,0x20,0xad,0x23,0x67,0xd8,0xac,0xca,0xfa,0xfd,0x22,0x76,0x21,0xdb,0xd1,0xa9,0x6d,0xcc,0xea,0x00,0x80,0x74,0xc2,0xc0,0x96,0xa9,0x0b,0xb1,0x65,0x0a,0x02,0x08,0xd4,0x84,0x9d,0xdc,0x02,0x4c,0xa4,0x48,0x09,0xee,0x12,0x74,0x84,0x80,0xdf,0xd1,0xd6,0x2a,0x09,0x87,0x32,0x77,0xb4,0x97,0xcb,0x7e,0x3e,0x34,0xb1,0x2d,0xcf,0x1c,0x98,0xcf,0x0f,0x0f,0x06,0xd6,0x5d,0x02,0x63,0x0b,0xeb,0xb0,0xbe,0x10,0x75,0x75,0x15,0xd9,0xc0,0xfe,0x34,0x11,0xc6,0x32,0xe7,0x61,0x92,0x8a,0x40,0x11,0xba,0x7b,0x19,0x13,0xc6,0xc1,0x3e,0xbd,0xc8,0x54,0x23,0x72,0x00,0xfa,0x99,0xeb,0x60,0x93,0xad,0x48,0xdc,0xd6,0xe6,0x56,0xe4,0x4a,0x7e,0x83,0x6a,0x3d,0xb8,0x28,0x9e,0xad,0x1b,0x5c,0x4a,0x60,0xc5,0x08,0xd3,0x36,0x52,0x28,0x40,0x68,0x53,0x79,0xfc,0x29,0x52,0x1f,0xb6,0x29,0x23,0x0c,0xa0,0xc2,0x41,0x29,0x74,0xc0,0x4a,0xb1,0x03,0x66,0xfd,0x50,0xf2,0x3b,0xd6,0x37,0xae,0x04,0xa8,0xea,0x03,0x03,0x5f,0x41,0x11,0x42,0x86,0x1d,0x6d,0x8a,0xa5,0x7a,0x63,0x9b,0x33,0x23,0x03,0x41,0x0e,0x9e,0xc4,0xf3,0xba,0x43,0x9d,0x43,0x34,0x80,0x8d,0x86,0xcc,0xde,0x67,0x13,0x2f,0xc5,0x37,0x70,0xe2,0x25,0x64,0x9c,0x62,0x6f,0x6c,0x9c,0x98,0x92,0xc7,0x6d,0x04,0x29,0xe8,0x66,0x92,0xb0,0xe3,0x30,0x49,0xb1,0x63,0x72,0x12,0x06,0xce,0x74,0xea,0x5d,0xd0,0x3e,0x3c,0x8a,0xf8,0x48,0x99,0xff,0x09,0x55,0xd8,0xfb,0x2f,0xe2,0x18,0x7e,0x52,0x77,0x34,0xcc,0xe7,0xf3,0xf4,0x5a,0x2d,0x73,0x39,0xb8,0x42,0xb9,0xfe,0xd0,0x7e,0x04,0xcc,0x26,0x30,0x7b,0x54,0x81,0x82,0x42,0x75,0x49,0xe0,0x1e,0xb2,0x86,0x47,0xf8,0x3b,0x46,0x7b,0xe9,0x7f,0x77,0x77,0xa7,0x09,0x87,0x47,0x38,0x9a,0xd2,0x59,0x9f,0x01,0xff,0x6e,0x5b,0xde,0xf0,0x4a,0x19,0xdc,0x9a,0x44,0x56,0xc0,0x8b,0xb6,0xfe,0x60,0x49,0xe7,0x30,0x4f,0x90,0xdd,0x63,0x91,0x77,0xcb,0xa2,0x87,0xf0,0xdb,0x54,0x76,0x12,0x01,0x2a,0x7c,0x75,0x28,0x6c,0x38,0xa3,0x0c,0x93,0x04,0x40,0x83,0xd4,0x09,0xeb,0x60,0xbb,0x27,0x24,0xda,0xa1,0xa1,0x5f,0xe7,0x40,0x9a,0xd8,0x25,0x8a,0x8a,0xe1,0x29,0x5e,0x88,0x6c,0x60,0x12,0xfe,0xe7,0xc7,0xf3,0xfe,0x01,0x31,0x68,0x01,0x5f,0x0f,0x06,0x43,0x96,0x15,0xe2,0xcc,0x1b,0x22,0x2e,0x72,0xa9,0x2b,0xdb,0xb2,0xd2,0x13,0x8b,0xee,0x21,0x14,0xe3,0x43,0x93,0x09,0x22,0x25,0xc9,0x89,0x2d,0x24,0xa4,0xdc,0x31,0xf4,0xdc,0x7f,0x0f,0x61,0x85,0x08,0x71,0xb9,0x94,0xd8,0xb2,0x9b,0xf7,0xe6,0x43,0x31,0x0a,0x36,0x60,0x51,0x23,0x82,0x9a,0xbb,0xec,0x9e,0x48,0xdf,0x59,0x36,0x1f,0x06,0xe3,0x2f,0x81,0x70,0xd4,0x73,0x70,0xea,0x0f,0xf9,0x20,0xb3,0x46,0xfb,0x95,0x24,0x92,0x4e,0x85,0x60,0x81,0x15,0xbc,0xbe,0x54,0x01,0x4e,0x51,0x0d,0xfc,0x40,0x50,0x30,0xe5,0x5d,0xab,0x67,0x5d,0xf7,0x58,0xe7,0xaa,0x67,0x76,0x76,0x76,0x3b,0x57,0x9d,0x86,0x92,0x55,0x78,0x53,0xc0,0x5f,0xa2,0x0e,0x50,0xb8,0x85,0xed,0xaf,0x50,0x9c,0x10,0xd3,0x08,0x62,0xe5,0x7f,0x5c,0xbc,0xfb,0xd9,0x8c,0xe8,0x14,0x41,0x57,0xb4,0x18,0xea,0x48,0xa1,0x2b,0xce,0x99,0xde,0x2c,0x0b,0xd1,0x4e,0x6f,0xf4,0x7e,0x70,0xb1,0x03,0x5f,0xec,0x77,0x45,0xa7,0x49,0xac,0xf1,0xde,0xd8,0xb6,0xc7,0xa3,0x03,0x42,0x09,0x08,0x0c,0x7b,0x42,0xc2,0xd8,0x24,0x9c,0x86,0x7d,0x27,0xe8,0x3b,0xa4,0x7e,0xfd,0x70,0x26,0x2f,0x12,0xa4,0xf7,0x0b,0xdb,0x4f,0xa4,0x28,0x7a,0x35,0xc3,0x73,0x9a,0x3b,0x3d,0xbc,0x41,0x30,0x11,0xf3,0x81,0x2f,0x50,0x3d,0xb4,0x22,0x86,0xba,0x0b,0xff,0xc7,0xdc,0xde,0x52,0x05,0xcf,0xb5,0xb7,0x0b,0x27,0x1d,0xd1,0xe5,0x80,0x5d,0x52,0x2f,0x28,0x7a,0x26,0x3c,0xb6,0xab,0xce,0x8e,0x70,0xc0,0xb6,0xca,0xcd,0x56,0xd2,0x25,0x7e,0x08,0x51,0xd1,0xe1,0x04,0x72,0x35,0xce,0x82,0x5b,0x2f,0x26,0x05,0x41,0x04,0x58,0x20,0x50,0x5d,0x05,0x25,0x63,0x98,0x95,0xf4,0x2e,0x8c,0x6f,0x48,0xd2,0xd2,0xf6,0x60,0x56,0x46,0x43,0x4c,0x6e,0x5a,0x99,0x44,0x74,0x28,0xff,0x74,0xe8,0x95,0x74,0x55,0x6e,0xfc,0x1e,0xed,0x0f,0x4a,0x89,0xda,0x27,0xd8,0xdf,0xab,0xa4,0x86,0xe1,0x0d,0xb6,0xaf,0x13,0x4e,0x52,0x5d,0xe9,0x65,0x60,0x17,0xff,0xa5,0x00,0xd9,0x62,0x19,0x3b,0x39,0xcd,0x6b,0xdc,0xc2,0x79,0x81,0x14,0x5f,0x3a,0x66,0x00,0x42,0x32,0x13,0x3b,0x38,0x53,0x53,0x1c,0x84,0xb8,0x10,0xb3,0xa6,0x30,0xee,0x1a,0xf9,0x41,0x84,0x22,0xa8,0x59,0xcc,0xde,0x99,0x2a,0xbd,0x1a,0xc3,0x47,0xec,0x14,0x46,0xfa,0x3e,0x05,0x2f,0x32,0xcc,0xc2,0xc0,0x9e,0xa2,0x5e,0xf9,0xe2,0x26,0xa6,0x68,0x54,0xe6,0x27,0x3e,0x73,0xe0,0xb1,0x81,0xcd,0x65,0xfb,0x4c,0xa8,0xc5,0xf0,0xe0,0xf1,0xe4,0xcc,0x27,0x29,0x9b,0xd0,0x07,0x68,0x00,0x9d,0xe8,0x48,0xd0,0x85,0x04,0x69,0x32,0xbf,0x4c,0x5a,0x99,0xb8,0x0a,0x92,0xd7,0xee,0x3d,0xb0,0x08,0x93,0x8e,0x9a,0xc3,0x34,0x24,0x0b,0x65,0x26,0xf0,0x77,0x70,0x32,0xc4,0xf1,0xfd,0xae,0x6a,0xca,0x74,0xee,0xf9,0xee,0xcf,0x98,0xb2,0x24,0x3b,0x26,0x06,0x79,0x7e,0xff,0x6e,0x86,0x71,0x52,0x92,0xb1,0x49,0x3d,0x82,0x93,0xf2,0xf2,0x32,0xaf,0xf9,0xaa,0xb5,0x60,0xb9,0x5f,0x49,0x70,0xd3,0x77,0xe0,0x08,0x95,0xaa,0x22,0xff,0x57,0x5d,0x89,0xff,0x2b,0x12,0xf8,0x03,0xfd,0x88,0x53,0x37,0x4a,0xde,0x8c,0xdd,0xeb,0x0b,0xea,0x49,0x0b,0xea,0x48,0x70,0x2c,0x65,0xe7,0xa0,0x82,0xb2,0x84,0xa8,0x42,0x77,0x88,0xcf,0x22,0x4d,0xcf,0x17,0xd0,0x0a,0xaa,0x19,0x56,0x4c,0xaf,0xce,0x19,0xba,0x6b,0x41,0x33,0xc3,0x1b,0x60,0x34,0xa2,0x2c,0x8e,0x7c,0xcc,0xc8,0x55,0xfa,0xcc,0xf3,0x09,0x5e,0x1c,0x6f,0x18,0xf4,0x06,0xbd,0xe1,0x78,0xdc,0x1b,0x98,0xc3,0x1d,0x05,0xd0,0x82,0xfe,0xcf,0xab,0x78,0x71,0x3a,0xe3,0xf6,0xa9,0x68,0x2f,0x1a,0xd0,0xc6,0x32,0x80,0xf0,0x24,0xbc,0x1f,0x57,0xf1,0x4e,0x60,0xc7,0x9f,0x88,0xf5,0xd5,0x2a,0xd6,0x18,0x93,0xfd,0x26,0xa4,0x02,0x21,0xbd,0x1f,0x45,0xfa,0x7e,0x15,0xe9,0x75,0xcc,0x79,0x21,0xc8,0x5f,0x47,0xeb,0x9b,0x55,0xb4,0x4b,0x72,0xe4,0xee,0xbe,0x88,0x5c,0xf4,0x5b,0x0a,0x2e,0x6d,0x93,0xae,0xc0,0x10,0x09,0x47,0x4b,0x1c,0x5f,0xe8,0x92,0x29,0xec,0x09,0x93,0x89,0x5f,0x3d,0xda,0xd1,0xc9,0x0c,0xf2,0x4a,0x69,0x60,0xdc,0x16,0x3e,0x45,0x93,0xcb,0xf0,0xa3,0x1f,0x4e,0x94,0xc3,0x50,0xf2,0xf7,0x4a,0x8e,0xb7,0x76,0x0a,0xca,0xde,0x20,0x22,0x50,0x38,0x5a,0x32,0xd1,0xab,0x79,0x01,0x69,0x21,0x8d,0x40,0x58,0x43,0x24,0xe7,0x32,0x64,0x62,0xc4,0x61,0x93,0x6c,0x36,0xc3,0xf8,0xae,0x7c,0x47,0x32,0xf5,0x8b,0xe5,0x39,0x26,0xa6,0xe9,0x68,0x28,0x5d,0x43,0xb4,0x21,0xf3,0xfd,0x23,0x95,0x25,0xd2,0x7e,0x94,0x65,0xaa,0x39,0xe7,0x9e,0xcf,0x29,0xc4,0x21,0x33,0xd0,0xec,0x52,0x82,0xb0,0x7b,0x65,0x10,0xb8,0x58,0x6a,0xca,0x5e,0xf6,0xaf,0x28,0x98,0x53,0xb3,0xa0,0x6c,0xa5,0x4e,0x39,0xde,0x2b,0x3b,0x29,0x27,0xc2,0x65,0xc3,0x23,0x8b,0xd4,0x5b,0x40,0xe4,0x94,0x93,0xba,0x15,0xac,0x72,0x14,0x3d,0x3e,0x61,0x34,0x77,0x97,0xcc,0x4f,0xb0,0x9c,0x7a,0x87,0x01,0x28,0xc6,0x7a,0x2f,0xa6,0x5b,0x62,0x6d,0x4a,0x94,0x84,0x38,0xe0,0xab,0x93,0xa3,0x8e,0xd1,0x1e,0x06,0x04,0xde,0x9a,0x38,0xc4,0x04,0x5e,0x2c,0x70,0xd4,0x25,0xd1,0x3c,0x2c,0x26,0x36,0xc2,0xab,0x22,0xa7,0xa9,0x52,0xa7,0x39,0x59,0xa6,0xfc,0x0d,0x0f,0xae,0xd3,0xb9,0x08,0x1f,0xd0,0x2d,0xd6,0x76,0x67,0x15,0x19,0xb6,0xbb,0x61,0x7f,0x09,0x2e,0xf9,0xbd,0xb3,0x80,0x9d,0xc2,0xd1,0xaf,0x2b,0x0c,0xb8,0x15,0x27,0x1b,0x87,0x91,0xc8,0xc9,0xae,0xf2,0xc1,0xf4,0x45,0x6d,0xc8,0x22,0xb7,0xbb,0xa0,0x10,0xae,0x9a,0x0c,0x6d,0xd4,0xd8,0x06,0x37,0x9c,0xe6,0x59,0xca,0x37,0xcc,0xe1,0x2b,0xe3,0x43,0xe1,0x33,0x8b,0x11,0x8b,0x04,0x4d,0xac,0x14,0x73,0x1c,0x7c,0x10,0x2d,0xc5,0x7a,0x76,0x31,0x13,0x42,0x17,0x0c,0x30,0xe6,0x92,0xb8,0x31,0x0c,0x25,0x70,0xd9,0xc1,0x5b,0x62,0x7a,0xe2,0x89,0xa6,0x18,0x62,0xd0,0x42,0xa4,0x01,0xfc,0xa0,0xc0,0x03,0x5a,0x2c,0x47,0x42,0x21,0x80,0x52,0x69,0x4c,0xcd,0xa9,0x1f,0x4f,0xc3,0xcc,0xc7,0x1c,0x48,0xc6,0x70,0xf5,0x3c,0x1b,0xd5,0x42,0x6f,0xb7,0xc9,0xa7,0xaf,0x74,0x39,0x72,0x13,0x5e,0x24,0xe5,0xce,0x54,0x78,0xee,0x68,0x13,0x86,0x0f,0x52,0xdd,0x2d,0xbc,0xe4,0x1c,0x40,0xb6,0xa8,0x36,0x47,0xa4,0x75,0x4b,0xed,0x2d,0x17,0x93,0xe6,0x12,0x65,0x68,0xb5,0x28,0xe8,0xca,0x89,0x9b,0x98,0x5a,0xa8,0xc5,0x97,0xa2,0x67,0xaf,0x60,0xc0,0xa2,0x3b,0x18,0x15,0xa0,0xa3,0x24,0x59,0x44,0x47,0x52,0xe1,0xb9,0x4f,0x96,0x32,0x98,0xa4,0x38,0x41,0xf8,0x8a,0xe1,0x92,0x62,0x35,0x3a,0x54,0x94,0xef,0x7d,0x20,0x83,0xa0,0xb4,0x5c,0x72,0x4c,0xf9,0x3d,0x52,0xdd,0x35,0x93,0xd3,0x30,0xf4,0x53,0x2f,0x2a,0x26,0xe6,0x12,0xea,0x45,0xf2,0x51,0x66,0xbc,0xf7,0x33,0x9c,0x2a,0xeb,0xe2,0x90,0x1e,0xed,0x19,0xf9,0x19,0x13,0x7e,0x44,0x98,0x29,0x70,0x43,0x8e,0x5c,0xe9,0xdc,0xdf,0x4b,0x71,0xec,0xaf,0x30,0x87,0x6c,0xb8,0xf7,0x1c,0x27,0xfe,0x9e,0xe3,0xb8,0x21,0x42,0x0d,0x64,0x16,0x29,0x66,0x44,0xa7,0xfc,0x30,0x94,0xa0,0x94,0x81,0xa8,0xe4,0x03,0xe1,0x78,0x10,0xab,0x19,0x78,0x15,0xae,0xd9,0x19,0xcc,0x88,0x48,0xca,0x89,0xa2,0x43,0xb7,0xdd,0xac,0x27,0x3c,0x48,0x0d,0x8f,0x02,0x12,0x78,0x33,0x4f,0xae,0x5a,0x06,0x3d,0x14,0xcd,0x21,0xe7,0x0d,0x3d,0x81,0xfc,0xe5,0xae,0xa1,0x8f,0x9d,0x12,0xb0,0x80,0xcd,0x5b,0xcc,0xbe,0xff,0x3e,0xa7,0xac,0x54,0x10,0x2e,0x60,0x37,0x87,0xc9,0x6b,0x90,0xc7,0xe0,0x90,0x8a,0xf3,0xa3,0xca,0xc3,0x42,0x29,0xc1,0xb2,0x9e,0xa6,0x7c,0x8b,0x1c,0xc5,0x17,0xf2,0x04,0xab,0x41,0x47,0x58,0x31,0x68,0xc8,0x0c,0x75,0x04,0x52,0xb8,0x96,0x70,0x5a,0x8c,0x3c,0x23,0x3f,0x9e,0x2a,0x97,0x4c,0x0a,0x78,0x7d,0x14,0xd2,0x70,0x70,0x88,0xce,0xcf,0x10,0xbf,0xd5,0x79,0x84,0x18,0x67,0x6b,0xf5,0xad,0x38,0x15,0x99,0xdf,0xfd,0xf5,0x35,0x79,0x7a,0xe2,0x78,0xa9,0x4e,0x9a,0x84,0xf7,0x17,0x73,0x84,0xe8,0x70,0x8a,0xd5,0x18,0xe2,0x04,0x21,0x7d,0xc5,0x49,0xd2,0x7c,0xec,0xa4,0x11,0x6e,0x4c,0x23,0x9c,0x2c,0x60,0x9a,0xb2,0x5d,0xf2,0x56,0x04,0xe2,0xc5,0x15,0x3a,0x9e,0x58,0xc3,0x57,0xee,0xa1,0x90,0x3b,0x1d,0x4f,0xbc,0x21,0x8b,0x28,0x59,0x2b,0xe6,0x03,0x80,0xa1,0xf5,0x94,0x93,0x82,0xb9,0x15,0x01,0xbe,0x80,0x8b,0x4a,0x32,0x94,0x25,0x0b,0x19,0x0a,0xe3,0x46,0xbd,0xa5,0x64,0xdc,0x24,0xaa,0x8a,0x51,0x53,0x44,0xca,0x1c,0x98,0xaf,0xc6,0xc5,0xa2,0x32,0x39,0x64,0x53,0xd7,0xf7,0x26,0x82,0xc8,0xbb,0x87,0x04,0x57,0x58,0xf5,0x84,0x8f,0xd0,0xde,0x7a,0x89,0x37,0x81,0xcb,0x58,0x62,0x87,0x98,0x91,0x95,0xf5,0x8f,0x0e,0x4f,0xe2,0x10,0x27,0x14,0x47,0x71,0x44,0x61,0xa3,0xb8,0x20,0x94,0x89,0x3c,0xf2,0xbc,0xf3,0x94,0xf9,0x9a,0x60,0x93,0x84,0x25,0x37,0x48,0x48,0xfd,0x44,0x04,0x13,0xd6,0x13,0x5d,0xc6,0xe2,0xf7,0x1e,0xe6,0x88,0x65,0x5c,0x2b,0x53,0x94,0x45,0x88,0x8d,0x45,0x02,0x1a,0xea,0x48,0x61,0x74,0x4c,0x51,0xaa,0x5d,0xb4,0xc4,0x1e,0x31,0x9c,0x93,0x50,0x37,0xc0,0xe9,0x73,0x87,0x9c,0xd9,0x47,0x71,0xaa,0xf5,0xbe,0x4a,0x57,0x21,0x49,0xea,0xc6,0x50,0x1b,0x04,0x6f,0x44,0xae,0x65,0x6d,0xc2,0x64,0xd1,0xf7,0x6a,0xf6,0x22,0x8b,0x60,0xc8,0x79,0x37,0xcb,0x6d,0x85,0x94,0xf0,0x67,0x71,0x5e,0xbc,0x47,0x07,0x84,0x85,0xf1,0xc9,0x4c,0x79,0xf4,0x58,0xb5,0xb1,0x46,0x76,0x0a,0x57,0x3a,0x11,0x07,0x4c,0x51,0x9f,0xb8,0xf1,0x09,0x29,0x0d,0x8e,0x84,0x86,0x06,0xea,0xe8,0x1e,0x6b,0x6f,0xb8,0x20,0x84,0xe2,0x76,0xa7,0x4a,0x90,0x9a,0x65,0x2b,0x22,0xf2,0xb9,0xaa,0xea,0x99,0x30,0x6a,0x87,0xc2,0xb4,0x69,0x85,0xc2,0xb3,0x09,0x5e,0xaa,0xb3,0xd0,0xb2,0x05,0x2a,0x83,0x0e,0xb8,0xe3,0x57,0xa0,0x96,0x98,0xf3,0x96,0x62,0x4a,0x19,0x61,0xf3,0xa0,0x83,0x15,0x04,0x0c,0x1d,0xae,0x6e,0xb0,0x9e,0x64,0xd1,0xb4,0xa8,0x8b,0x81,0x94,0x47,0xb9,0xfe,0x80,0xe5,0x3c,0x0a,0xa7,0xf3,0x9e,0x0e,0xe5,0xf6,0x6e,0xc1,0x7c,0x8c,0xe5,0xbd,0x18,0x46,0xab,0x87,0x83,0xd9,0x62,0x41,0x03,0x7b,0xcf,0x7a,0xf3,0x6c,0xe1,0xe1,0xd8,0xed,0xb2,0x27,0xd6,0x16,0x29,0x05,0x36,0x6b,0x9e,0x4a,0x3c,0x92,0xa5,0x70,0x74,0xce,0x69,0x6d,0x84,0xd4,0x58,0x92,0x80,0xd8,0xe0,0xaa,0x53,0x50,0x9e,0xf4,0xe5,0x45,0x84,0x7b,0x70,0x20,0x90,0xc9,0xa2,0x39,0x0e,0x39,0x4b,0x2d,0x20,0xc1,0x5c,0xbb,0xc1,0xd5,0x28,0x63,0x55,0xed,0x27,0x94,0x09,0xfc,0x30,0x0c,0x50,0xd2,0x45,0xcb,0x1d,0x35,0xcc,0x78,0x75,0x64,0x82,0x46,0xf9,0xee,0x68,0x6f,0x4f,0xda,0x88,0x7c,0xf4,0x51,0x41,0x92,0x4b,0xc9,0x74,0xe1,0x1b,0x28,0xb4,0xca,0xb0,0x58,0x05,0xe9,0x3d,0xf2,0x6c,0x04,0x1f,0x37,0x86,0xd6,0xfc,0x5e,0x69,0x46,0xdb,0x6b,0x03,0x9c,0x4a,0x74,0x1b,0xd3,0x40,0x22,0xde,0x18,0x98,0xba,0xc2,0xc6,0xc0,0xba,0xaf,0x6c,0x5c,0x40,0xf7,0xa9,0xcd,0xf9,0x27,0xfa,0x9e,0x32,0x1b,0x5f,0xc2,0x6f,0x2a,0x81,0x3e,0xa9,0x65,0x5d,0xef,0x39,0xd2,0xe7,0xa3,0x12,0xdd,0x83,0x1d,0x19,0x79,0xa3,0xfe,0x22,0x42,0x97,0x98,0x36,0x2d,0x75,0xaf,0xa1,0xf0,0x89,0xb2,0x33,0x95,0x11,0xa8,0xc7,0x3e,0x15,0x03,0x51,0x85,0x22,0x11,0xd5,0x26,0x4b,0xaa,0xe8,0x02,0x24,0x79,0xdb,0xca,0x00,0xc8,0x70,0xde,0xe5,0xf0,0xea,0xf2,0x13,0x85,0xb8,0x85,0x1b,0x35,0xec,0x62,0x40,0x66,0x3f,0x68,0x55,0xf2,0x76,0xc7,0x57,0x0c,0x74,0x95,0x6f,0x77,0x8b,0xcc,0xfd,0x2b,0x04,0x20,0x25,0x32,0x81,0x6a,0xa0,0x50,0xe5,0x00,0xa4,0x8a,0x45,0xb6,0x5d,0xcf,0xb6,0x2b,0xd9,0x9a,0x90,0x3c,0x1b,0x11,0xf4,0x52,0xf6,0xa8,0x9e,0x3d,0xaa,0x64,0xef,0xd5,0xb3,0xf7,0x2a,0xd9,0xe3,0x7a,0xf6,0xb8,0x92,0xbd,0x5f,0xcf,0xde,0xbf,0x02,0x17,0xf6,0xca,0x20,0xcf,0xea,0x20,0xcf,0x14,0x06,0x69,0x11,0xb1,0x4e,0x53,0x19,0x02,0x30,0x3f,0xc7,0x38,0xd7,0xcd,0x2d,0xa2,0xb6,0xc5,0xae,0xa9,0x72,0xba,0xd8,0x37,0xe1,0x89,0xf1,0xea,0x2d,0xce,0x72,0x63,0xc8,0x07,0xfb,0xbb,0x9e,0x05,0xfe,0x0f,0x76,0xd8,0x77,0x6c,0xcc,0xbe,0xc1,0xfa,0x84,0x62,0xaf,0x32,0xe7,0x8a,0xc9,0x62,0x3d,0x42,0x62,0x97,0x09,0x0a,0x4a,0x31,0xb9,0x96,0x6d,0x57,0xb2,0x87,0xf5,0xec,0x61,0x25,0x7b,0x54,0xcf,0x1e,0xa9,0x6c,0x5a,0x9a,0xc8,0x1b,0x59,0xd0,0xa1,0xae,0x94,0xbd,0xa4,0x67,0x6c,0x10,0xf9,0x75,0x72,0xd4,0x55,0x3b,0x94,0xa0,0x4a,0x5d,0xb5,0x43,0x09,0xe2,0xd4,0xd5,0x0a,0x54,0xb9,0xca,0xcb,0x11,0xfa,0xa9,0x0e,0x08,0x54,0xd2,0x21,0xd6,0x95,0x74,0xf4,0xbb,0x67,0x23,0xd1,0x9a,0x3c,0x43,0xb6,0xb6,0x32,0x8a,0x9d,0x41,0x3a,0xd5,0x81,0x4c,0x0b,0x14,0x38,0x24,0xb6,0xc6,0x88,0x35,0xc9,0xae,0x32,0x62,0x2e,0x9c,0x1b,0x8e,0x5d,0x1c,0xd8,0x71,0x22,0x97,0x69,0x9a,0x06,0x4c,0x7a,0x50,0x50,0xaa,0x2a,0xc2,0xe7,0x57,0xc5,0xbc,0xeb,0x41,0x6f,0xe9,0x84,0x57,0x02,0xde,0x22,0x49,0xfe,0xaa,0x90,0xb7,0x08,0x6e,0x4b,0x67,0x41,0x3f,0xa3,0xe4,0x40,0xa5,0xc0,0x1b,0xa2,0x67,0xd1,0xd0,0xcb,0xce,0x53,0xf4,0xa3,0x53,0x24,0x7a,0x24,0x6c,0xc1,0xa7,0x17,0x0b,0xee,0x39,0xc8,0x16,0x3d,0xd3,0xa6,0x92,0x82,0xd8,0x94,0x72,0x37,0x74,0x68,0x54,0xba,0x1f,0x14,0x1c,0x55,0x57,0xea,0x7f,0xab,0x21,0x3e,0xaa,0x72,0x44,0x24,0xb6,0x3c,0x43,0x01,0x97,0x60,0x30,0x0f,0x19,0xcd,0xd3,0x6e,0x85,0x5e,0xdd,0xd2,0x3e,0x0d,0x92,0x29,0xfb,0x57,0x66,0xf4,0x0d,0x76,0xc8,0x6e,0xcd,0x34,0x3c,0xa7,0x67,0xb6,0x74,0x87,0x6a,0x2f,0x46,0x81,0x4f,0xc7,0xd9,0x52,0xee,0xf8,0x45,0xb2,0x7e,0x28,0x8e,0x25,0xf7,0x96,0xbc,0xa7,0x2d,0xbe,0x1f,0x88,0x14,0x0d,0xd1,0x4e,0xf3,0x9f,0xe5,0xd8,0xb8,0x4a,0xf2,0xf9,0xd3,0x68,0xa6,0x60,0x6e,0x9d,0x68,0x1d,0x73,0x7c,0x3a,0xd5,0x1f,0x2e,0x2e,0x5e,0xff,0xd6,0x24,0x37,0x10,0x8c,0x49,0x55,0x58,0x16,0xe7,0x13,0x28,0xfe,0x58,0x78,0x8c,0xbf,0x39,0xaf,0xcf,0xff,0xef,0x7f,0xff,0xa7,0x81,0x7a,0x9f,0xb6,0x5b,0xfd,0x16,0xb4,0xbf,0x52,0x5e,0xcb,0x2a,0xe1,0xdf,0xfd,0x4a,0xc2,0x6d,0x49,0x78,0xa9,0xf8,0x4a,0xc8,0xff,0xe9,0x64,0xbf,0x57,0xbe,0xd3,0x2a,0xd9,0x8b,0xc9,0xd3,0x18,0x5e,0x2e,0x5f,0x0f,0xfe,0x3f,0x9d,0xee,0x37,0x64,0xd3,0x7e,0x3b,0x5e,0x2b,0x9a,0x1b,0x79,0xad,0xd7,0x41,0x36,0x26,0x5a,0xfe,0x23,0x64,0x5f,0xb2,0xca,0x91,0x88,0x7e,0x15,0x26,0xb2,0x3c,0x4f,0xac,0x87,0xc8,0x54,0xc0,0x41,0x7a,0x9b,0x15,0x2c,0xce,0xfd,0x23,0x56,0xb6,0xc5,0x96,0xa2,0x90,0xe0,0x03,0x8c,0x37,0x82,0x6e,0xf0,0x7b,0x70,0x26,0x89,0x38,0x82,0x7b,0x73,0xe1,0x44,0x5d,0xb0,0xe6,0x94,0xed,0xae,0x74,0x3d,0x3a,0xc5,0xd2,0x26,0x88,0x04,0xa1,0x03,0x70,0x61,0x9d,0x9a,0x8a,0xad,0x58,0x8c,0x96,0x5e,0x9f,0x42,0x8b,0x32,0x3c,0x39,0x29,0x5b,0xd7,0xb1,0xe7,0x62,0x9c,0xa2,0x00,0x86,0x1a,0x8f,0x72,0xea,0xf4,0x85,0xe2,0x5a,0xb1,0xfd,0x42,0x47,0x94,0xf5,0x04,0x4d,0x3c,0x73,0x6a,0xe3,0x75,0x94,0x4a,0x71,0x3c,0x7b,0x6a,0xe1,0x25,0x9c,0xd6,0x08,0x42,0x1f,0xe1,0xbe,0x1d,0x93,0x96,0x41,0xba,0x2a,0x60,0x51,0x96,0xd6,0x8a,0xd3,0x91,0x3b,0x03,0x3a,0xca,0x55,0xcc,0xc2,0x39,0x1e,0x3e,0x84,0xc3,0x43,0xb4,0x14,0xff,0x29,0x81,0x39,0x55,0x58,0xb1,0x32,0x71,0xca,0x62,0x91,0xd4,0xdd,0x51,0x69,0x7a,0x86,0xab,0x6b,0xab,0xcf,0x3a,0xeb,0x13,0x79,0x59,0x1d,0x22,0x02,0xb4,0xb5,0x34,0xcc,0x52,0x45,0x6a,0xcd,0x7b,0x41,0x74,0x55,0x11,0x84,0xbf,0x52,0x10,0xd8,0x52,0x4f,0xf9,0xb2,0xc4,0x73,0x10,0xff,0xe5,0xef,0x05,0x82,0xdf,0x4f,0x0f,0x51,0x00,0x00
};
AsyncWebServer webserver(80);
#endif
 
#if PROBEREQUESTS
#include <esp_wifi.h>
#endif

#if WEBSOCKETS
AsyncWebSocket ws("/ws");
AsyncEventSource events("/events");

void onWsEvent(AsyncWebSocket * server, AsyncWebSocketClient * client, AwsEventType type, void * arg, uint8_t *data, size_t len){
  
  if(type == WS_EVT_CONNECT){
    Serial.printf("ws[%s][%u] connect\n", server->url(), client->id());
    //client->printf("You are connected Client %u :)", client->id());
    client->text(graphDataToWS);
    client->ping();
  } else if(type == WS_EVT_DISCONNECT){
    Serial.printf("ws[%s][%u] disconnect\n", server->url(), client->id());
  } else if(type == WS_EVT_ERROR){
    Serial.printf("ws[%s][%u] error(%u): %s\n", server->url(), client->id(), *((uint16_t*)arg), (char*)data);
  } else if(type == WS_EVT_PONG){
    Serial.printf("ws[%s][%u] pong[%u]: %s\n", server->url(), client->id(), len, (len)?(char*)data:"");
  } else if(type == WS_EVT_DATA){
    AwsFrameInfo * info = (AwsFrameInfo*)arg;
    String msg = "";
    if(info->final && info->index == 0 && info->len == len){
      //the whole message is in a single frame and we got all of it's data
      Serial.printf("ws[%s][%u] %s-message[%llu]: ", server->url(), client->id(), (info->opcode == WS_TEXT)?"text":"binary", info->len);

      if(info->opcode == WS_TEXT){
        for(size_t i=0; i < info->len; i++) {
          msg += (char) data[i];
        }
      } else {
        char buff[3];
        for(size_t i=0; i < info->len; i++) {
          sprintf(buff, "%02x ", (uint8_t) data[i]);
          msg += buff ;
        }
      }
      Serial.printf("%s\n",msg.c_str());

      if(info->opcode == WS_TEXT)
        
        client->text(msg);
      else
        client->binary("I got your binary message");
    } else {
      //message is comprised of multiple frames or the frame is split into multiple packets
      if(info->index == 0){
        if(info->num == 0)
         Serial.printf("ws[%s][%u] %s-message start\n", server->url(), client->id(), (info->message_opcode == WS_TEXT)?"text":"binary");
         Serial.printf("ws[%s][%u] frame[%u] start[%llu]\n", server->url(), client->id(), info->num, info->len);
      }

      Serial.printf("ws[%s][%u] frame[%u] %s[%llu - %llu]: ", server->url(), client->id(), info->num, (info->message_opcode == WS_TEXT)?"text":"binary", info->index, info->index + len);

      if(info->opcode == WS_TEXT){
        for(size_t i=0; i < len; i++) {
          msg += (char) data[i];
        }
      } else {
        char buff[3];
        for(size_t i=0; i < len; i++) {
          sprintf(buff, "%02x ", (uint8_t) data[i]);
          msg += buff ;
        }
      }
      Serial.printf("%s\n",msg.c_str());

      if((info->index + len) == info->len){
        Serial.printf("ws[%s][%u] frame[%u] end[%llu]\n", server->url(), client->id(), info->num, info->len);
        if(info->final){
          Serial.printf("ws[%s][%u] %s-message end\n", server->url(), client->id(), (info->message_opcode == WS_TEXT)?"text":"binary");
          if(info->message_opcode == WS_TEXT)
            client->text(msg);
          else
            client->binary("I got your binary message");
        }
      }
    }
  }
}
#endif

#if MQTT
void receivedMessage(const MqttClient* source, const Topic& topic, const char* payload, size_t length)
{
  Serial.print("Received message on topic '"); Serial.print(receivedTopic.c_str());Serial.print("' with payload = ");Serial.println(payload);  
  if (receivedTopic == "command")
  {
    mac[0] = atoi(&payload[0]);mac[1] = atoi(&payload[3]);mac[2] = atoi(&payload[6]);mac[3] = atoi(&payload[9]);mac[4] = atoi(&payload[12]);mac[5] = atoi(&payload[15]);  
  }
}

void sendCommand()  {
  esp_wifi_set_mac(ESP_IF_WIFI_AP, mac);
  Serial.print("Command sent to remote device :  ");Serial.print(mac[0]);Serial.print("/");Serial.print(mac[1]);Serial.print("/");Serial.print(mac[2]);Serial.print("/");Serial.print(mac[3]);Serial.print("/");Serial.print(mac[4]);Serial.print("/");Serial.print(mac[5]);Serial.println("/");
 }
#endif

unsigned long getTime() {
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    //Serial.println("Failed to obtain time");
    return(0);
  }
  time(&now);
  return now;
}

void setup(){
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  WiFi.mode(WIFI_AP_STA);
  WiFi.softAP(apSSID, apPassword, apChannel, hidden);
  esp_wifi_set_event_mask(WIFI_EVENT_MASK_NONE); // This line is must to activate probe request received event handler.
 
  WiFi.begin(ssid, password);
  if (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.printf("STA: Failed!\n");
    WiFi.disconnect(false);
    delay(1000);
    WiFi.begin(ssid, password);
  }
  
  Serial.print(F("*CONNECTED* IP: "));Serial.println(WiFi.localIP());
 
  configTime(0, 0, ntpServer);
  epoch = getTime();
  Serial.print("Epoch Time: ");Serial.println(epoch);
  delay(500);
  Epoch = String(epoch);
  
  //Send OTA events to the browser
  ArduinoOTA.onStart([]() { events.send("Update Start", "ota"); });
  ArduinoOTA.onEnd([]() { events.send("Update End", "ota"); });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    char p[32];
    sprintf(p, "Progress: %u%%\n", (progress/(total/100)));
    events.send(p, "ota");
  });
  ArduinoOTA.onError([](ota_error_t error) {
    if(error == OTA_AUTH_ERROR) events.send("Auth Failed", "ota");
    else if(error == OTA_BEGIN_ERROR) events.send("Begin Failed", "ota");
    else if(error == OTA_CONNECT_ERROR) events.send("Connect Failed", "ota");
    else if(error == OTA_RECEIVE_ERROR) events.send("Recieve Failed", "ota");
    else if(error == OTA_END_ERROR) events.send("End Failed", "ota");
  });
  ArduinoOTA.setHostname(apSSID);
  ArduinoOTA.begin();
  MDNS.addService("http","tcp",80);
  LITTLEFS.begin();
  ws.onEvent(onWsEvent);
  
#if ASYNCWEBSERVER
  webserver.addHandler(&ws);
  events.onConnect([](AsyncEventSourceClient *client){
    client->send("hello!",NULL,millis(),1000);
  });
  webserver.addHandler(&events);
  webserver.addHandler(new SPIFFSEditor(MYFS, http_username,http_password));
  webserver.on("/heap", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", String(ESP.getFreeHeap()));
  });
  webserver.on("/", HTTP_GET, [](AsyncWebServerRequest * request) 
    {
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, sizeof(index_html_gz));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
    });
  webserver.serveStatic("/", MYFS, "/").setDefaultFile("index.html");

  webserver.onFileUpload([](AsyncWebServerRequest *request, const String& filename, size_t index, uint8_t *data, size_t len, bool final){
    if(!index)
      Serial.printf("UploadStart: %s\n", filename.c_str());
      Serial.printf("%s", (const char*)data);
      if(final)
      Serial.printf("UploadEnd: %s (%u)\n", filename.c_str(), index+len);
  });
  webserver.onRequestBody([](AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total){
    if(!index)
      Serial.printf("BodyStart: %u\n", total);
      Serial.printf("%s", (const char*)data);
      if(index + len == total)
      Serial.printf("BodyEnd: %u\n", total);
  });
  
  //Followin line must be added before server.begin() to allow local lan request see : https://github.com/me-no-dev/ESPAsyncWebServer/issues/726
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Origin", "*");
  webserver.begin();
#endif

#if MQTT
    broker.begin();
    // ============= Client Subscribe ================
    myClient.setCallback(receivedMessage);
    myClient.subscribe(receivedTopic);
    myClient.subscribe(sentTopic);
#endif

#if PROBEREQUESTS
    WiFi.onEvent(probeRequest, SYSTEM_EVENT_AP_PROBEREQRECVED);
    Serial.print("Waiting for probe requests ... ");
#endif

#if FIRSTTIME
  File f = LITTLEFS.open(dataFile, "w");
  f.print("[8,\"Epoch\",\"Location\",\"V\",\"S\",\"T\",\"H\",\"P\",\"L\"]"); // See http://davidgiard.com/2018/11/02/EmbeddingQuotesWithinACString.aspx
  f.close();
  Serial.println("Wrote first line to file: [8,\"Epoch\",\"Location\",\"V\",\"S\",\"T\",\"H\",\"P\",\"L\"]");Serial.println();
#endif
} // End of setup

void loop(){
  ArduinoOTA.handle();
  ws.cleanupClients();
 }  // End of loop

#if PROBEREQUESTS
void probeRequest(WiFiEvent_t event, WiFiEventInfo_t info) 
{
    Serial.print("Probe Received :  ");
    for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", info.ap_probereqrecved.mac[i]);
    if (i < 5)Serial.print(":");
    }
    Serial.println();

      if (info.ap_probereqrecved.mac[0] == 6 || info.ap_probereqrecved.mac[0] == 16 || info.ap_probereqrecved.mac[0] == 26 || info.ap_probereqrecved.mac[0] == 36 || info.ap_probereqrecved.mac[0] == 46 || info.ap_probereqrecved.mac[0] == 56 || info.ap_probereqrecved.mac[0] == 66 || info.ap_probereqrecved.mac[0] == 76 || info.ap_probereqrecved.mac[0] == 86 || info.ap_probereqrecved.mac[0] == 96 || info.ap_probereqrecved.mac[0] == 106 || info.ap_probereqrecved.mac[0] == 116 || info.ap_probereqrecved.mac[0] == 126 || info.ap_probereqrecved.mac[0] == 136 || info.ap_probereqrecved.mac[0] == 146 || info.ap_probereqrecved.mac[0] == 156 || info.ap_probereqrecved.mac[0] == 166 || info.ap_probereqrecved.mac[0] == 176 || info.ap_probereqrecved.mac[0] == 186 || info.ap_probereqrecved.mac[0] == 196 || info.ap_probereqrecved.mac[0] == 206 || info.ap_probereqrecved.mac[0] == 216 || info.ap_probereqrecved.mac[0] == 226 || info.ap_probereqrecved.mac[0] == 236 || info.ap_probereqrecved.mac[0] == 246) // only accept data from certain devices.
       {
              //sendCommand();

      if (info.ap_probereqrecved.mac[1] == 06) 
      { // only accept data from device with voltage as a sensor type at byte 1.
               if (device == 06) { for (int i = 0; i < 4; i++) sensorTypes[i] = Livingroom[i];} 
               if (device == 16) { for (int i = 0; i < 4; i++) sensorTypes[i] = Kitchen[i];}
               if (device == 26) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom1[i];} 
               if (device == 36) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom2[i];}
               if (device == 46) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom3[i];} 
               if (device == 56) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom4[i];}
               if (device == 66) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom1[i];} 
               if (device == 76) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom2[i];}
               if (device == 86) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom3[i];} 
               if (device == 96) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom4[i];}
               if (device == 106) { for (int i = 0; i < 4; i++) sensorTypes[i] = Laundry[i];} 
               if (device == 116) { for (int i = 0; i < 4; i++) sensorTypes[i] = Boiler[i];}
               if (device == 126) { for (int i = 0; i < 4; i++) sensorTypes[i] = Workshop[i];} 
               if (device == 136) { for (int i = 0; i < 4; i++) sensorTypes[i] = Garage[i];}
               if (device == 146) { for (int i = 0; i < 4; i++) sensorTypes[i] = Office[i];}
               if (device == 156) { for (int i = 0; i < 4; i++) sensorTypes[i] = Tank[i];} 
               if (device == 166) { for (int i = 0; i < 4; i++) sensorTypes[i] = Solar[i];}
               
      } else {

      device = info.ap_probereqrecved.mac[0];
      rssi = info.ap_probereqrecved.rssi;         
      voltage = info.ap_probereqrecved.mac[1];
      voltage = voltage * 2 / 100;
                  
      sensorValues[0] = info.ap_probereqrecved.mac[2];
      sensorValues[1] = info.ap_probereqrecved.mac[3];
      sensorValues[2] = info.ap_probereqrecved.mac[4];
      sensorValues[3] = info.ap_probereqrecved.mac[5];
              
      }

      if (voltage > 2.50 && voltage < 3.60) 
      {
      
      sprintf (str, "{");
      sprintf (s, "\"%s\":\"%i\"", "Location", device);    strcat (str, s);
      sprintf (s, ",\"%s\":\"%.2f\"", "Voltage", voltage);    strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[0], sensorValues[0]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[1], sensorValues[1]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[2], sensorValues[2]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[3], sensorValues[3]); strcat (str, s);
      sprintf (s, "}"); strcat (str, s);
              
      Serial.println();
      Serial.println("Following ## Sensor Values ## receiced from remote device  & published via MQTT: ");
      Serial.println(str);
      Serial.println();
      
#if MQTT
      myClient.publish("sensor", str);
#endif
                   
#if APPENDTOLITTLEFS
     epoch = getTime();
     Serial.print("Epoch Time: ");Serial.println(epoch); 
     
     graphData = ",";graphData += epoch;graphData += ",";graphData += device;graphData += ",";graphData += voltage;graphData += ",";graphData += rssi;graphData += ",";graphData += sensorValues[0];graphData += ",";graphData += sensorValues[1];graphData += ",";graphData += sensorValues[2];graphData += ",";graphData += sensorValues[3];graphData += "]";
     
     File f = LITTLEFS.open(dataFile, "r+"); // See https://github.com/lorol/LITTLEFS/issues/33
     Serial.print("File size: "); Serial.println(f.size());
     f.seek((f.size()-1), SeekSet);
     Serial.print("Position: "); Serial.println(f.position());
     f.print(graphData);Serial.println();
     Serial.print("Appended to file: "); Serial.println(graphData);
     Serial.print("File size: "); Serial.println(f.size());
     f.close(); 
     /*
     f = LITTLEFS.open(dataFile, "r");
     Serial.print("Reading from '");
     Serial.print(dataFile);
     Serial.println("' file....");
     while(f.available()){
     Serial.write(f.read());
     }
     f.close();
     */
     Serial.println();
     Epoch += "," + String(epoch);Loc += "," + String(device);V += "," + String(voltage, 2);S += "," + String(rssi);T += "," + String(sensorValues[0]);H += "," + String(sensorValues[1]);P += "," + String(sensorValues[2]);L += "," + String(sensorValues[3]);
     graphDataToWS = "[" + Epoch + "]," + "[" + Loc + "]," + "[" + V + "]," + "[" + S + "]," + "[" + T + "]," + "[" + H + "]," + "[" + P + "]," + "[" + L + "]";
     Serial.println();
     Serial.print("Graph data size: ");Serial.println(graphDataToWS.length());
     Serial.println("Graph Data: ");Serial.println(graphDataToWS);
      if (graphDataToWS.length() > 1000) {
      Epoch = String(epoch);
      Loc = "";V = "";S = "";T = "";H = "";P = "";L = "";
     //graphDataToWS = "";
     //graphDataToWS.remove(0, 34); // Each record is approximately 34 character long.
    }
#endif
      if (voltage < 2.50) {      // if voltage of battery gets to low, print the warning below.
         myClient.publish("Warning/Battery Low", String(device));
       }
     }
  }
}
#endif     
