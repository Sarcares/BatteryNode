// convert your HTML/CSS/JAVASCRIPT TO HEX here: https://gchq.github.io/CyberChef/#recipe=Gzip('Dynamic%20Huffman%20Coding','index.html.gz','',false)To_Hex('0x',0)Split('0x',',0x')&input=PGh0bWw%2BC
#define PROBEREQUESTS       true  // Requires slave device(s) on ESP8266.
#define MQTT                true  // MQTT broker if needed.
#define ASYNCWEBSERVER      true  // Publishes web interface
#define WEBSOCKETS          true  // Communicate with Websockets clients
#define APPENDTOLITTLEFS    true  // If false stops appending to file but still shows file size.
#define FIRSTTIME           true  // Warning - This must be false.Make it true if creating new file for first time.

#include <Arduino.h>
#include <WiFi.h>
#include "time.h"

#define MYFS LITTLEFS
#define FORMAT_LITTLEFS_IF_FAILED true

const char* ssid = "";
const char* password = "";
const char* apSSID = "ESP";
const char* apPassword = "";
const int apChannel = 7;
const int hidden = 0; // If hidden is 1 probe request event handling does not work ?

const char* http_username = "admin";  // Web interface Login.
const char* http_password = "admin";  // Web interface password.

String dataFile = "/data.json";  // File to store sensor data.

int Livingroom[4] = {16,26,36,46};
int Kitchen[4] =    {46,36,26,16};
int Bedroom1[4] =   {46,36,26,16};
int Bedroom2[4] =   {16,26,36,36};
int Bedroom3[4] =   {16,26,36,36};
int Bedroom4[4] =   {16,26,36,36};
int Bathroom1[4] =  {16,26,36,36};
int Bathroom2[4] =  {16,26,36,36};
int Bathroom3[4] =  {16,26,36,36};
int Bathroom4[4] =  {16,26,36,36};
int Laundry[4] =    {16,26,36,36};
int Boiler[4] =     {16,26,36,36};
int Workshop[4] =   {16,26,36,36};
int Garage[4] =     {16,26,36,36};
int Office[4] =     {16,26,36,36};
int Tank[4] =       {16,26,36,36};
int Solar[4] =      {16,26,36,36};


//==================User configuration not required below this line ================================================

char str [256], s [70];
String deviceData, sensorData, graphData, graphDataToWS;

int ProbeReceived, device, rssi, sensorValues[4], sensorTypes[4], deviceStatus[4];
float voltage;
uint8_t mac[6];

const char* ntpServer = "pool.ntp.org";
unsigned long epoch; 

String Epoch = String(epoch);       
String Loc = String(device); 
String V = String(voltage, 2); 
String S = String(rssi); 
String T = String(sensorValues[0]); 
String H = String(sensorValues[1]); 
String P = String(sensorValues[2]); 
String L = String(sensorValues[3]); 

#if PROBEREQUESTS
#include <esp_wifi.h>
#endif

#if MQTT
#include <TinyMqtt.h>   // Thanks to https://github.com/hsaturn/TinyMqtt
std::string sentTopic = "data";
std::string receivedTopic = "command";
MqttBroker broker(1883);
MqttClient myClient(&broker);
#endif

#if ASYNCWEBSERVER
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <FS.h>
#include "LITTLEFS.h"
#include <SPIFFSEditor.h>
#include <ArduinoOTA.h>
#include <ESPmDNS.h>
int index_html_gz_len = 27425;
const uint8_t index_html_gz[] = {
0x1f,0x8b,0x08,0x08,0x9d,0xdf,0xc6,0x60,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xed,0x5c,0xdb,0x7a,0xdb,0x38,0x92,0xbe,0xb6,0xbf,0x7d,0x08,0x34,0x7b,0x7a,0x24,0xb7,0x25,0x52,0x07,0xdb,0x71,0x7c,0xda,0x4d,0xa7,0xed,0x4d,0x76,0x93,0x4e,0x26,0xce,0x4c,0x5f,0x78,0xfc,0xed,0x47,0x49,0x90,0xc5,0x98,0x22,0xb5,0x3c,0xd8,0xd6,0x64,0xf2,0x4e,0xfb,0x88,0xf3,0x57,0x01,0xe0,0x49,0xa4,0xac,0x74,0x32,0xb3,0x7d,0x11,0x1d,0x49,0xa0,0x50,0x28,0x54,0xa1,0x0a,0x85,0x02,0xc0,0x93,0x59,0x32,0xf7,0xcf,0xc4,0xf6,0xc9,0x4c,0xba,0x13,0xfa,0x9f,0xcb,0xc4,0x15,0xe3,0x99,0x1b,0xc5,0x32,0x39,0xb5,0xd2,0x64,0xda,0x3d,0xb4,0xce,0x74,0x72,0xe0,0xce,0xe5,0xa9,0x75,0xe7,0xc9,0xfb,0x45,0x18,0x25,0x96,0x18,0x87,0x41,0x22,0x03,0x80,0xdd,0x7b,0x93,0x64,0x76,0x3a,0x91,0x77,0xde,0x58,0x76,0xf9,0xa6,0x23,0xbc,0xc0,0x4b,0x3c,0xd7,0xef,0xc6,0x63,0xd7,0x97,0xa7,0x7d,0x8b,0x90,0x27,0x5e,0xe2,0xcb,0xb3,0xb7,0x51,0x38,0x92,0x91,0xfc,0xdf,0x54,0xc6,0x49,0x47,0xbc,0xf7,0x82,0xe5,0xeb,0x3f,0xbd,0x7f,0xdf,0x11,0xbf,0xca,0x51,0x1c,0x8e,0x6f,0x65,0x12,0x77,0xc4,0xb3,0x78,0x19,0x8c,0xef,0x91,0x20,0xa3,0x3b,0x19,0x75,0xc4,0x2b,0x2f,0x41,0xd1,0x8b,0x4b,0x71,0x3e,0xf1,0x92,0x30,0x12,0x7f,0x14,0xe9,0x5b,0x3f,0x4c,0x4e,0x1c,0x85,0x12,0xb8,0xe3,0x71,0xe4,0x2d,0x12,0x91,0x2c,0x17,0xa0,0x31,0x91,0x0f,0x89,0xf3,0xc1,0xbd,0x73,0x55,0xaa,0x25,0xe2,0x68,0x7c,0x6a,0xcd,0x92,0x64,0x11,0x1f,0x39,0xce,0x78,0x12,0x7c,0x88,0xed,0xb1,0x1f,0xa6,0x93,0xa9,0xef,0x46,0xd2,0x1e,0x87,0x73,0xc7,0xfd,0xe0,0x3e,0x38,0xbe,0x37,0x8a,0x9d,0x0f,0xa0,0x2c,0x5a,0x3a,0x7d,0xbb,0xdf,0xb7,0x07,0xfa,0xce,0x9e,0x7b,0x81,0xfd,0x21,0xb6,0xce,0x4e,0x1c,0x85,0xf2,0x6c,0x7b,0xfb,0xc4,0xf7,0x82,0x5b,0x11,0x49,0xff,0xd4,0x8a,0x93,0xa5,0x2f,0xe3,0x99,0x94,0xa8,0x6a,0x16,0xc9,0x69,0xa9,0x2e,0x94,0x9b,0x48,0xdf,0xbb,0x8b,0xec,0x40,0x26,0x4e,0xb0,0x98,0x3b,0xe9,0x02,0xb4,0xff,0x47,0xdf,0x3e,0xb0,0x9f,0x38,0x13,0x2f,0x4e,0x1c,0x6e,0x0c,0xd7,0x31,0x8e,0x51,0x09,0x70,0x33,0xc6,0xb3,0xed,0x51,0x38,0x59,0x8a,0x8f,0x73,0x37,0xba,0xf1,0x82,0x23,0xd1,0x3b,0xfe,0xb4,0x6d,0xa7,0x5d,0x5f,0xde,0xc8,0x60,0x82,0x0b,0x2f,0x00,0x09,0x52,0xe0,0xea,0xce,0xf5,0x53,0x29,0x3e,0x32,0xef,0x8f,0x44,0x7f,0xbf,0xb7,0x78,0x38,0x26,0x26,0x74,0x5d,0xdf,0xbb,0x41,0x49,0x5f,0x4e,0x13,0x14,0xde,0xda,0xda,0xfe,0x9e,0xa4,0xe6,0xa2,0x58,0x24,0x3e,0x0a,0x03,0xdf,0xeb,0xfd,0x70,0x2c,0x66,0xd2,0xbb,0x99,0x25,0x47,0x62,0xef,0xe9,0xdd,0xec,0x58,0x8c,0xdc,0xf1,0xed,0x4d,0x14,0xa6,0xc1,0xa4,0x3b,0x0e,0xfd,0x30,0x3a,0x12,0xdf,0x0f,0x87,0xc3,0x63,0x01,0x7a,0x17,0xbe,0xbb,0x3c,0x12,0x53,0x5f,0x3e,0x1c,0x0b,0xc6,0xdf,0xf5,0x12,0x39,0x8f,0x8f,0xc4,0x18,0xbd,0x41,0x46,0xc7,0xe2,0x43,0x1a,0x27,0xde,0x74,0x89,0x82,0xdc,0x41,0xf2,0x8c,0x10,0xc2,0x9c,0xfa,0xe1,0xfd,0x91,0x98,0x79,0x93,0x89,0x0c,0x50,0x4d,0x18,0x4d,0x64,0xd4,0x8d,0xdc,0x89,0x97,0x02,0xc3,0x13,0xd0,0x2d,0x92,0x30,0x1d,0xcf,0xba,0xee,0x38,0xf1,0x42,0x90,0x1e,0x84,0x81,0x3c,0x16,0x9f,0xc4,0xf6,0xf7,0x54,0x4b,0x89,0x68,0x02,0x36,0x54,0xeb,0xdb,0x55,0xb2,0xa3,0x9b,0x51,0x7b,0xb0,0xb7,0xdf,0x11,0x83,0x61,0xaf,0x23,0x9e,0x3e,0xdd,0x31,0x95,0x52,0x99,0xc5,0x83,0x88,0x43,0xdf,0x9b,0x10,0x94,0xdb,0xee,0x0f,0x0f,0x3a,0x22,0xff,0xb1,0xf7,0x33,0xd8,0x8c,0xc0,0x7d,0xe2,0x54,0x1d,0x81,0x29,0xba,0x6a,0x37,0x96,0xbe,0x1c,0x83,0x98,0x32,0xcd,0x47,0x04,0x79,0x07,0xf1,0xd4,0x53,0x87,0x7a,0x0f,0x0e,0x41,0x5e,0x9f,0x7e,0x06,0xa0,0xb1,0x6f,0xf7,0x7a,0xa8,0x39,0x2b,0x3e,0x23,0xb6,0xa1,0xf4,0x38,0x8d,0x62,0x2a,0xb3,0x08,0x3d,0xc5,0x4e,0x4d,0x9b,0x66,0xc8,0x80,0x19,0x40,0xa5,0xd0,0xa7,0x5d,0xc0,0x2f,0xc2,0x18,0x3a,0x48,0x24,0x4e,0xbd,0x07,0x39,0x39,0x16,0x91,0x62,0xd5,0x70,0x68,0x0f,0x87,0xdc,0x8c,0x05,0x35,0x88,0xa4,0x4d,0xa5,0xe2,0x04,0xc5,0xe6,0x2c,0x34,0xee,0x1f,0x1f,0x2b,0x3d,0x62,0xe1,0x4e,0x26,0x5e,0x70,0x73,0xd4,0x3b,0x16,0xba,0x43,0x66,0x57,0xdd,0x91,0x0f,0xcd,0xed,0xc6,0x89,0x1b,0x25,0x2b,0xa9,0xe8,0xab,0x85,0x34,0xd5,0x67,0x57,0x40,0x75,0x32,0xc3,0xd6,0x52,0x23,0xbc,0xf9,0xcd,0xc7,0xac,0xf7,0x31,0x66,0x2a,0xfc,0xa0,0x5b,0xaf,0xba,0x30,0x34,0xa8,0xab,0x89,0xd6,0xbd,0xb8,0x24,0xbd,0x3d,0x62,0x90,0xae,0x90,0x1a,0x7f,0x08,0xf1,0xa3,0x2e,0xe8,0x34,0x6b,0x9b,0x80,0xde,0x39,0xda,0x10,0x6e,0x9f,0x90,0xea,0xc1,0xf2,0x7d,0x9e,0x5d,0xd9,0x58,0xd7,0x3d,0x6f,0x2a,0x6b,0x8d,0xca,0x6c,0xf0,0x75,0x0d,0x24,0xf0,0x01,0xeb,0x34,0x8c,0xe6,0x42,0x75,0xd8,0x53,0x0b,0x06,0x46,0xa0,0xd5,0x97,0xe7,0xaf,0xce,0x9f,0xbf,0x17,0x63,0xdf,0x8d,0xe3,0x53,0x0b,0x36,0x70,0x04,0x3e,0x5b,0x02,0xca,0xc0,0x77,0x73,0x37,0x98,0x58,0x6c,0xf3,0xc5,0xa9,0xb0,0x5c,0x2e,0x24,0xc4,0x49,0xb8,0x20,0x24,0x20,0x59,0x5f,0x94,0x52,0x15,0xca,0xfa,0xbc,0x9f,0xbd,0x1b,0x2f,0x71,0x7d,0xf1,0x6b,0x84,0x4e,0x5d,0x0f,0xf2,0x2c,0x70,0xfd,0xf0,0x66,0x1d,0x84,0x41,0xf2,0x0e,0x52,0x5a,0x8b,0xa3,0x19,0xe0,0x17,0x19,0x2e,0xa0,0x0e,0x7e,0x43,0x0b,0x64,0x22,0x9e,0xbd,0x15,0xcf,0x67,0x6e,0x10,0xac,0x83,0xb9,0xf4,0xa5,0x5c,0x40,0x36,0xf3,0x06,0x42,0x09,0xe6,0x75,0x38,0x29,0xe4,0x9e,0x38,0x8a,0x3b,0x24,0x8e,0x75,0xac,0x57,0xc3,0x68,0xce,0xf9,0xd1,0x46,0x9c,0x7f,0xe5,0xdd,0x41,0x37,0xa3,0x30,0x9c,0xd7,0xe7,0xff,0xb7,0x97,0x8c,0x67,0x32,0xa8,0xcf,0xfc,0x49,0x4e,0xa8,0x64,0x7f,0x6d,0xee,0xa0,0x21,0xd7,0x4d,0x66,0xeb,0x0a,0xeb,0xec,0x86,0xd2,0xaf,0x5c,0xd8,0xc2,0x68,0x59,0x9f,0xf9,0x66,0x3a,0x05,0x27,0xca,0x79,0x1b,0xb3,0x51,0xf7,0xe0,0x7e,0xce,0xc8,0xb1,0x25,0xca,0xf8,0x7b,0xbd,0xfa,0x7a,0x7b,0x0d,0x6d,0xe9,0x35,0x34,0xa2,0x37,0x6c,0x48,0xdf,0x6b,0x48,0xdf,0x6f,0x48,0x3f,0xa8,0x4f,0xef,0x37,0xd4,0xdb,0x6f,0xa8,0xb7,0xdf,0x50,0x6f,0xbf,0xa1,0xde,0x7e,0x43,0xbd,0x83,0x86,0xf4,0x61,0x43,0xfa,0x5e,0x43,0xfa,0x7e,0x43,0xfa,0x41,0x43,0xfa,0x93,0x86,0xf4,0xc3,0x86,0xf4,0xa7,0x4d,0x7c,0x6b,0x64,0x68,0x53,0x8b,0xfb,0x4d,0x4d,0x86,0x3f,0xd0,0xc4,0xeb,0xa6,0x8c,0xa6,0x56,0xf7,0x9b,0x9a,0xdd,0x6f,0x6a,0x77,0xbf,0xa9,0xe1,0xfd,0xa6,0x96,0x0f,0x9a,0x5a,0x3e,0x68,0x94,0x75,0x53,0xcb,0x07,0x4d,0x2d,0x1f,0x34,0xb5,0x7c,0x50,0x6d,0xf9,0xe7,0xea,0xec,0x20,0xd7,0xd9,0x49,0xc5,0xf8,0x7d,0x53,0xd9,0x6f,0x2a,0xfb,0x4d,0x65,0xff,0xb9,0x2a,0xfb,0x99,0xda,0x3a,0xcc,0xb5,0x55,0x7e,0xd3,0xd6,0x6f,0xda,0xfa,0x4d,0x5b,0x7f,0xcf,0xda,0xba,0x97,0x6b,0xeb,0xf4,0x9b,0x3f,0xfc,0x4d,0x5d,0xbf,0xa9,0xeb,0xef,0x55,0x5d,0xfd,0x74,0x1e,0xe4,0xca,0x7a,0x53,0x19,0x5a,0x7f,0xcc,0x51,0x6e,0x65,0x93,0xe9,0x70,0xec,0xd2,0x45,0x43,0xe8,0xc4,0x6d,0x0c,0xaa,0xb8,0x0d,0x13,0xf0,0xe6,0xf0,0xc6,0x8b,0x30,0x8d,0x3e,0xbf,0x51,0x53,0x4f,0xfa,0x85,0x98,0xd2,0x4c,0xb7,0xa9,0x1c,0x11,0xf8,0xbd,0x37,0x22,0x5c,0xc8,0xc8,0x45,0x88,0x2d,0x6f,0x87,0x57,0x91,0xcd,0x69,0x7d,0x75,0xdf,0x35,0xa4,0x37,0x44,0x74,0x4e,0x1a,0x92,0x9b,0xb0,0x34,0xa4,0x9f,0x14,0xd0,0xe7,0x4d,0x3c,0x19,0x45,0xbc,0xca,0xa0,0xc3,0x8e,0x77,0x6e,0x24,0xdc,0x24,0x71,0xc7,0xb3,0xf3,0x3b,0x84,0xea,0xd1,0xa8,0x69,0x1a,0x70,0xb4,0xb0,0x1d,0x20,0x88,0xd5,0x11,0x92,0x92,0x3b,0xc2,0x47,0x00,0x53,0x22,0x18,0xdb,0xa1,0x70,0xf7,0x73,0x77,0x91,0xa4,0x91,0xdc,0x11,0x1f,0x51,0xa1,0xe3,0x88,0xd7,0x32,0x99,0x85,0x13,0x81,0x50,0xa3,0xb8,0xb8,0xe8,0x88,0x37,0xc4,0xa7,0x0e,0x22,0x69,0x51,0x38,0x07,0x86,0x4b,0x77,0xea,0x46,0x1e,0x20,0xbd,0xa9,0x68,0x23,0x86,0x1f,0x4c,0xc2,0x7b,0x1b,0x11,0x65,0xae,0xf0,0x95,0xc6,0x2b,0x14,0x32,0x81,0x00,0xfa,0x44,0xae,0xe4,0xb6,0xd7,0x50,0x21,0xfe,0xfe,0x77,0x31,0x75,0xfd,0x58,0xee,0x1c,0x03,0xc1,0x27,0x45,0xd1,0xcb,0x73,0x31,0x73,0x63,0xe1,0x25,0xb1,0x08,0xef,0x03,0x81,0x45,0x2c,0x10,0x88,0x2c,0x09,0xb8,0x52,0x45,0x79,0xd3,0xdb,0xad,0x30,0x68,0xed,0x56,0x2a,0xd2,0x38,0x3f,0x1d,0x6f,0x6f,0x03,0xeb,0x9b,0x60,0x2c,0x45,0x32,0x93,0xba,0x11,0xc2,0x0f,0xdd,0x49,0x2c,0x30,0xb6,0x72,0xe2,0xcf,0x6f,0x5e,0x0b,0x2f,0xc6,0xb2,0x90,0x3b,0x59,0x76,0x34,0x53,0x39,0x83,0x71,0x22,0xe6,0xce,0x37,0x73,0xc4,0xb4,0x81,0xb3,0x58,0xb1,0xc2,0xd6,0x11,0x16,0xe1,0xb3,0x3a,0xb9,0x04,0x14,0x4f,0x48,0x44,0x6a,0x79,0xe1,0x7f,0xf4,0x50,0x0e,0x29,0x4d,0xc2,0x71,0x3a,0x47,0x61,0xfb,0x46,0x26,0xe7,0xbe,0xa4,0xcb,0x9f,0x96,0x2f,0x27,0xed,0x2c,0x7e,0x0b,0xca,0x4b,0x65,0x5f,0x20,0xd1,0x07,0x9f,0x0b,0x02,0x36,0x2c,0x17,0x42,0x75,0x93,0xfe,0x3a,0xbc,0x3a,0x38,0xb9,0xd3,0x29,0x15,0x19,0x6c,0x40,0x4a,0x9f,0x68,0x29,0x16,0x1a,0x6e,0x50,0x68,0x50,0x2d,0xb4,0xb7,0x41,0xa1,0x61,0xb5,0xd0,0xfe,0x06,0x85,0xf6,0xaa,0x85,0x0e,0xd6,0x17,0x62,0xeb,0x5c,0x29,0xf2,0x64,0x5d,0x11,0x65,0xfb,0x2a,0x25,0x0e,0xd7,0x95,0xc8,0x0c,0xcd,0xce,0xf1,0x96,0xb2,0x91,0x82,0xba,0xdf,0xe5,0x0c,0x7d,0x8e,0xc4,0x8f,0x25,0x34,0xd5,0x0f,0xdd,0xc5,0x22,0x0a,0x17,0x91,0x07,0xdb,0xa8,0xc5,0xdc,0x8a,0x15,0x3c,0xe9,0x5a,0x32,0xf3,0x62,0x5b,0xad,0x0f,0x9e,0xc2,0x58,0x99,0xf0,0xb7,0x95,0xc9,0x5d,0x53,0x64,0xc4,0x6f,0xf3,0x62,0x88,0xad,0x57,0x5a,0xc8,0xbe,0x59,0x86,0x68,0x23,0xee,0xc7,0x41,0x86,0x8f,0x83,0xec,0x3d,0x0e,0xb2,0xff,0x38,0xc8,0xc1,0x2a,0x08,0x2d,0xbe,0x55,0xc1,0x9e,0x6c,0x06,0x76,0xd8,0x04,0x26,0xb6,0xb7,0x32,0x4e,0x7d,0x52,0xf6,0xa3,0x86,0xb7,0xe5,0xc5,0x03,0x8b,0x6c,0x52,0x0d,0x44,0xbe,0x74,0xd0,0x04,0x41,0x0b,0x07,0x75,0x79,0xc5,0xd5,0x8f,0xba,0xfc,0xc2,0xda,0x47,0x2e,0xde,0x7f,0x99,0x80,0xeb,0x18,0x5a,0x23,0xe4,0x3a,0xb0,0x1a,0x41,0xd7,0x81,0xfd,0x6b,0x85,0xbd,0xb5,0x46,0xd2,0xa5,0xc5,0xac,0x35,0xa2,0x68,0xcc,0x57,0x03,0xf1,0xff,0x83,0x94,0x7e,0xdf,0x12,0xaa,0xb2,0xa1,0x59,0x46,0x90,0x0f,0xa4,0xa4,0xfd,0x89,0x66,0xe6,0xc2,0x72,0x02,0xac,0x91,0xa7,0x65,0xe2,0xd6,0xb1,0xb6,0x01,0xf2,0x51,0x3d,0xd8,0x9c,0xd1,0x9b,0xf3,0x7a,0x1d,0xbb,0x6b,0xa0,0x6a,0xb8,0x0d,0x28,0x62,0x5f,0x23,0x93,0x8d,0x12,0x90,0x23,0xc5,0x26,0x8f,0x1c,0x20,0xf6,0x25,0x30,0x02,0xfd,0x19,0x3a,0x41,0xe3,0x4e,0x18,0x60,0xa3,0x50,0x70,0x83,0x01,0x08,0xa3,0x51,0x18,0xdc,0xca,0xe5,0x22,0x92,0x71,0xac,0x3c,0x9d,0x98,0x5c,0x9d,0x89,0x4c,0x30,0x1a,0x89,0x7b,0xac,0x3c,0x72,0x09,0x55,0x5e,0x09,0x2a,0x9c,0x56,0xfd,0x19,0xf2,0xd5,0x14,0x46,0x72,0xd2,0x8a,0xbe,0x51,0x19,0x10,0x3e,0x92,0x02,0x83,0x97,0x54,0x72,0x6b,0x78,0x74,0x5d,0x5b,0xce,0xd0,0x58,0x53,0xf2,0x13,0xf9,0x4a,0x7f,0x68,0x9b,0xe1,0x78,0xc7,0x66,0x17,0xae,0x9d,0xfb,0x49,0xa4,0xa9,0x7f,0xc0,0x40,0x8e,0xa5,0x74,0x6b,0xc7,0x8e,0xd3,0xd1,0xdc,0x4b,0x2a,0xd9,0xc6,0xd5,0x0a,0x92,0xe7,0x8f,0xfa,0x68,0x2d,0xd0,0x91,0xfa,0x49,0x6b,0x47,0x75,0x5c,0x25,0xb6,0xfb,0xd8,0x46,0xe9,0x09,0x08,0xcf,0x50,0x60,0x27,0x08,0x2b,0x85,0xe3,0x60,0x23,0x55,0x94,0xb4,0xad,0x4b,0xae,0x39,0x91,0xc6,0x9b,0x70,0x1c,0x58,0x9a,0x76,0xeb,0x12,0xe5,0x68,0x7b,0x86,0x68,0x89,0xdd,0x22,0x09,0xba,0x69,0x1b,0x34,0x0f,0xd9,0x2d,0xda,0x0b,0x45,0x93,0x1d,0x90,0x85,0xc4,0x96,0xe2,0x73,0xab,0xe8,0x8d,0x02,0x8e,0x54,0x0e,0xb0,0xd8,0x4a,0xc4,0x35,0xa8,0x26,0xc0,0x91,0x6c,0x18,0x03,0xeb,0x46,0xbd,0xf2,0x38,0xb7,0x3a,0xb2,0x95,0xc7,0x32,0x34,0xf3,0x23,0x31,0x81,0xb8,0xbb,0x70,0x97,0xe4,0x21,0x83,0xb3,0x75,0x24,0xec,0x8a,0x96,0x43,0x0c,0xa0,0x3c,0xe5,0xac,0xd6,0x66,0x19,0xa7,0xd4,0x64,0xa2,0xbb,0x53,0x2f,0xc7,0xbe,0x8f,0x75,0x6d,0x2b,0x5b,0x7d,0xa2,0x0a,0x74,0x65,0x62,0xff,0xa7,0x10,0x86,0x64,0xcb,0xb1,0xca,0x99,0x83,0x12,0xd5,0xa4,0xa4,0x6b,0x05,0xa2,0x8d,0xe1,0x67,0x52,0x6b,0xe1,0x6d,0x6a,0x25,0x67,0xb7,0x94,0x75,0xf1,0x0e,0xb3,0x9c,0x04,0xdb,0x53,0xfa,0xe2,0xd7,0x17,0xe7,0xef,0xce,0x33,0x58,0xf6,0x72,0x0b,0xa0,0x05,0x34,0xc6,0x9d,0x2d,0x21,0x6a,0x9d,0xd3,0x4e,0x26,0xb1,0xc4,0x4c,0x1c,0xaa,0x1f,0x12,0x57,0xc8,0xf4,0xa8,0x56,0x6d,0x51,0x87,0xfc,0xbe,0xa8,0x26,0x6d,0x4d,0xb5,0x6e,0xb9,0xea,0xd7,0xb4,0x7f,0x27,0xdb,0x3e,0x43,0xf3,0xda,0x13,0x2f,0x58,0xa4,0xc5,0x2d,0x3b,0x34,0x73,0x3f,0xb5,0x14,0x22,0xec,0xd9,0xf1,0xfe,0xc6,0xd3,0xf6,0x7d,0xbd,0xce,0x88,0xed,0x7b,0x50,0x1d,0x4b,0x99,0x25,0xec,0x8e,0x11,0x4e,0x05,0x85,0x52,0xf5,0x0c,0x80,0x14,0x4d,0x68,0xe5,0xe2,0xbd,0x7a,0x0e,0x99,0x04,0xba,0xa0,0xba,0x78,0xef,0x55,0x14,0xde,0x23,0x6e,0x80,0x58,0x2b,0x78,0x87,0x8b,0xe1,0xbe,0xa2,0x40,0x1b,0xd8,0x42,0x55,0xf1,0x42,0xfa,0x3e,0x36,0x66,0x8c,0x6f,0x11,0x1d,0xa1,0xe9,0xab,0x25,0x78,0xea,0x18,0x06,0xfe,0x12,0xb4,0x47,0x29,0x12,0xd8,0x38,0x23,0x1b,0x3b,0xa1,0xba,0x44,0xfb,0x51,0xff,0x00,0xfb,0x98,0x78,0xbb,0x54,0xb6,0xf9,0x4d,0xce,0x8f,0x69,0x9b,0xa6,0x63,0x28,0x20,0x6a,0xbe,0xeb,0x76,0x4f,0x16,0x67,0xba,0x25,0x54,0x3d,0x19,0x85,0xd7,0x30,0x7e,0x2e,0x2c,0x67,0x89,0x3b,0x84,0x15,0xe4,0xf6,0x32,0xc2,0x7a,0x07,0x0e,0x3e,0x84,0x71,0x94,0x26,0x49,0x18,0x90,0xa9,0xf7,0x3d,0x22,0x92,0x58,0xf5,0x1e,0x85,0xda,0x3b,0x16,0xf6,0xb8,0xe4,0x8c,0x10,0x98,0xf5,0x5f,0xfe,0xe9,0xd5,0x89,0xa3,0x0a,0x20,0xe8,0xb0,0x40,0xe9,0xd4,0xd7,0x9c,0x1f,0x4b,0x6c,0x80,0x9b,0x98,0xca,0xcf,0x74,0xa1,0x18,0xdb,0x94,0x74,0x1a,0xcd,0x98,0x15,0x90,0x98,0x22,0x60,0x00,0x03,0x46,0xfb,0x9a,0x68,0x6a,0x23,0xd1,0x59,0x47,0x12,0x9b,0x06,0x69,0x1d,0x39,0xc5,0x66,0x55,0xd1,0xed,0xe6,0xb1,0x0b,0xd5,0x8e,0x56,0x65,0x63,0x56,0x0b,0x00,0xa4,0x13,0x16,0xb6,0x4c,0x5d,0xf2,0x96,0x29,0x08,0x20,0xd0,0x13,0x76,0x72,0x0b,0x30,0x91,0x22,0x25,0xb8,0x8f,0xd1,0x11,0x02,0x79,0x4f,0x5b,0xab,0x14,0x1c,0xca,0xdc,0xd3,0x5e,0xae,0xfe,0xd3,0x81,0x8d,0x6d,0x79,0x76,0xcf,0x7e,0x7a,0x74,0xd8,0x73,0xee,0x63,0x18,0x5b,0x58,0x87,0xf5,0x85,0xa8,0xab,0xeb,0xc8,0x06,0xf6,0xa7,0x71,0x18,0xcb,0x9e,0x85,0x71,0xc2,0x81,0x22,0x74,0xf7,0x22,0x26,0x8c,0x83,0x5d,0x7a,0x91,0xa9,0x46,0xe4,0x00,0xf4,0x8b,0x89,0x8b,0x4d,0xb6,0x9c,0xb8,0x6d,0xcc,0x2d,0xe7,0x2a,0x7e,0x83,0x6a,0x33,0xb8,0x68,0x9e,0xad,0x1b,0x5c,0x0a,0x60,0xf9,0x08,0xd3,0x34,0x52,0x68,0x40,0x68,0x53,0x71,0xfc,0xc9,0x53,0x3f,0x6d,0x53,0x46,0x18,0x40,0x85,0x83,0x42,0xe8,0x40,0x14,0x62,0x07,0xc2,0xf9,0xb1,0xe0,0x77,0xac,0x6f,0x5c,0x01,0x50,0xd7,0x07,0x06,0xbe,0x80,0x22,0x84,0x02,0x3b,0xda,0x34,0x4b,0xcd,0xc6,0x36,0x77,0x4a,0x06,0x82,0x1c,0x3c,0x85,0xe7,0x65,0x8b,0x3a,0x07,0x37,0x40,0x0c,0x07,0xa2,0x7f,0x20,0x46,0x5e,0x82,0x6f,0xe0,0x46,0x4b,0xc8,0x38,0xc1,0xde,0xd8,0x28,0xb6,0x15,0x8f,0x9b,0x08,0xd2,0xd0,0xf5,0x24,0x61,0xc7,0x61,0x9c,0x60,0xc7,0xe4,0x28,0x0c,0xdc,0xf1,0xd8,0xbb,0xa4,0x7d,0x78,0x14,0xf1,0x51,0x32,0xff,0x33,0xaa,0xe8,0x1f,0x3c,0x8b,0x22,0xf8,0x49,0xed,0xe1,0x20,0x9b,0xcf,0xd3,0x6b,0xb5,0xcc,0x55,0xef,0x1a,0xe5,0xba,0x83,0xfe,0x23,0x60,0x7d,0x02,0xeb,0x0f,0x4b,0x50,0x50,0xa8,0x36,0x09,0xdc,0x43,0xd6,0xe0,0x18,0x7f,0x27,0x68,0x2f,0xfd,0xef,0xee,0xee,0xd4,0xe1,0xf0,0x08,0x47,0x5d,0xba,0xe8,0x0a,0xe0,0xdf,0x6d,0xca,0x1b,0x5c,0x6b,0x83,0x5b,0x91,0xc8,0x0a,0x78,0xde,0xd6,0x1f,0x1d,0xe5,0x1c,0x66,0x09,0xaa,0x7b,0xcc,0xb3,0x6e,0x99,0xf7,0x10,0x79,0x97,0xa8,0x4e,0xc2,0xa0,0xec,0xab,0x43,0x61,0xc3,0x29,0x65,0xd8,0x24,0x00,0x1a,0xa4,0x4e,0x45,0x0b,0xdb,0x3d,0x21,0xd1,0x16,0x0d,0xfd,0x26,0x07,0xd2,0xc4,0x2e,0x51,0x54,0x0c,0x4f,0xf1,0x92,0xb3,0x81,0x89,0xfd,0xcf,0xf7,0x17,0xdd,0x43,0x62,0xd0,0x1c,0xbe,0x1e,0x0c,0x86,0x2a,0xcb,0xe2,0xcc,0x1a,0xc2,0x17,0x99,0xd4,0xb5,0x6d,0x59,0xe9,0x89,0x79,0xf7,0x60,0xc5,0x78,0x57,0x67,0x82,0x48,0x49,0x32,0x62,0x73,0x09,0x69,0x77,0x0c,0x3d,0xf7,0x3f,0x43,0x58,0x21,0x42,0x5c,0x2c,0xc5,0x5b,0x76,0xb3,0xde,0x7c,0xc4,0xa3,0x60,0x0d,0x16,0x3d,0x22,0xe8,0xb9,0xcb,0xee,0xa9,0xf2,0x9d,0x55,0xf3,0x61,0x30,0xfe,0x1a,0xb0,0xa3,0x9e,0x81,0x53,0x7f,0xc8,0x06,0x99,0x35,0xda,0xaf,0x25,0x11,0xb7,0x4a,0x04,0x33,0x56,0xf0,0xfa,0x4a,0x07,0x38,0xb9,0x1a,0xf8,0x81,0xa0,0x60,0x2c,0xdb,0x4e,0xc7,0xb9,0xe9,0x88,0xd6,0x75,0xc7,0x6e,0xed,0xec,0xb6,0xae,0x5b,0x35,0x25,0xcb,0xf0,0x36,0xc3,0x5f,0xa1,0x0e,0x50,0xb8,0x85,0xed,0xaf,0x50,0x9c,0x10,0xd3,0x08,0x62,0xe5,0x7f,0x5d,0xbe,0xf9,0xc5,0x5e,0xd0,0x29,0x82,0x36,0xb7,0x18,0xea,0x48,0xa1,0x2b,0x29,0x85,0xd9,0x2c,0x0b,0xd1,0x8e,0x6f,0xcd,0x7e,0x70,0xde,0x81,0xcf,0xfb,0x5d,0xd1,0x69,0x62,0x67,0x7f,0x6f,0xbf,0xdf,0xdf,0x1f,0x1e,0x12,0x4a,0x40,0x60,0xd8,0x63,0x09,0x63,0x93,0x70,0x12,0x76,0xdd,0xa0,0xeb,0x92,0xfa,0x75,0xc3,0xa9,0xba,0x88,0x91,0xde,0xcd,0x6d,0x3f,0x91,0xa2,0xe9,0x35,0x0c,0xcf,0x68,0x6e,0x75,0xf0,0x06,0xc1,0x44,0xcc,0x3b,0x39,0x47,0xf5,0xd0,0x8a,0x08,0xea,0xce,0xfe,0x8f,0xbd,0xbd,0xa5,0x0b,0x5e,0x18,0x6f,0x17,0x4e,0x3a,0xa2,0xcb,0x81,0xb8,0xa2,0x5e,0x90,0xf7,0x4c,0x78,0x6c,0xd7,0xad,0x1d,0x76,0xc0,0xb6,0x8a,0xcd,0xd6,0xd2,0x25,0x7e,0xb0,0xa8,0xe8,0x70,0x02,0xb9,0x1a,0xe7,0xc1,0x9d,0x17,0x91,0x82,0x20,0x02,0xcc,0x08,0x74,0x57,0x41,0xc9,0x08,0x66,0x25,0xb9,0x0f,0xa3,0x5b,0x92,0xb4,0xb2,0x3d,0x98,0x95,0xd1,0x10,0x93,0x99,0x56,0xa1,0x10,0x1d,0xa9,0x3f,0x13,0x7a,0x25,0x5d,0x55,0x1b,0xbf,0x87,0x07,0xbd,0x42,0xa2,0xf1,0x09,0x0e,0xf6,0x4a,0xa9,0x61,0x78,0x8b,0xed,0xeb,0x84,0x93,0x54,0x57,0x79,0x19,0xd8,0xc5,0x7f,0xc5,0x20,0x5b,0x22,0x15,0xa7,0x67,0x59,0x8d,0x5b,0x38,0x2f,0x90,0xe0,0x4b,0xc7,0x0c,0x40,0x48,0x6a,0x63,0x07,0x67,0x62,0xf3,0x41,0x88,0x4b,0x9e,0x35,0x85,0x51,0xdb,0xca,0x0e,0x22,0xe4,0x41,0xcd,0x7c,0xf6,0x2e,0x74,0xe9,0xd5,0x18,0x3e,0x62,0xa7,0x30,0xd2,0x0f,0x09,0x78,0x91,0x62,0x16,0x06,0xf6,0xe4,0xf5,0xaa,0x97,0xb4,0x31,0x45,0xa3,0x32,0x3f,0xcb,0xa9,0x0b,0x8f,0x0d,0x6c,0x2e,0xda,0x67,0x42,0xcd,0xc3,0x83,0x27,0xe3,0x73,0x9f,0xa4,0x6c,0x43,0x1f,0xa0,0x01,0x74,0xa2,0x23,0x46,0x17,0x62,0xd2,0x54,0x7e,0x91,0xb4,0x22,0x71,0x25,0x24,0x2f,0x27,0x0f,0xc0,0xc2,0x26,0x1d,0x35,0x87,0x49,0x48,0x16,0xca,0x8e,0xe1,0xef,0xe0,0x64,0x88,0xeb,0xfb,0x6d,0xdd,0x94,0xf1,0xcc,0xf3,0x27,0xbf,0x60,0xca,0x12,0xef,0xd8,0x18,0xe4,0xe5,0xc3,0x9b,0x29,0xc6,0x49,0x45,0xc6,0x26,0xf5,0x30,0x27,0xd5,0xe5,0x55,0x56,0xf3,0x75,0x63,0xc1,0x62,0xbf,0x52,0xe0,0xb6,0xef,0xc2,0x11,0x2a,0x54,0x45,0xfe,0xaf,0xbe,0xe2,0xff,0x6b,0x12,0xf8,0x27,0xfa,0xe1,0x53,0x37,0x5a,0xde,0x42,0x3c,0x98,0x0b,0xea,0x49,0x73,0xea,0x48,0x70,0x2c,0x55,0xe7,0xa0,0x82,0xaa,0x04,0x57,0x61,0x3a,0xc4,0x47,0x4e,0x33,0xf3,0x05,0xb4,0x82,0x6a,0x86,0x15,0x33,0xab,0x73,0x96,0xe9,0x5a,0xd0,0xcc,0xf0,0x16,0x18,0xad,0x45,0x1a,0x2d,0x7c,0xcc,0xc8,0x75,0xfa,0xd4,0xf3,0x09,0x9e,0x8f,0x37,0xf4,0x3a,0xbd,0xce,0x60,0x7f,0xbf,0xd3,0xb3,0x07,0x3b,0x1a,0xa0,0x01,0xfd,0x5f,0x56,0xf1,0xe2,0x74,0xc6,0xdd,0x97,0xa2,0xbd,0xac,0x41,0x1b,0xa9,0x00,0xc2,0x17,0xe1,0x7d,0xbf,0x8a,0x77,0x04,0x3b,0xfe,0x85,0x58,0x5f,0xac,0x62,0x8d,0x30,0xd9,0xaf,0x43,0xca,0x08,0xe9,0xfd,0x28,0xd2,0xb7,0xab,0x48,0x6f,0x22,0x29,0x73,0x41,0xfe,0x36,0x5a,0x5f,0xad,0xa2,0x5d,0x92,0x23,0x77,0xff,0x59,0xe4,0xa2,0xdf,0x52,0x70,0x69,0x9b,0x74,0x05,0x86,0x88,0x1d,0x2d,0x3e,0xbe,0xd0,0x26,0x53,0xd8,0x61,0x93,0x89,0x5f,0x33,0xda,0xd1,0xc9,0x0c,0xf2,0x4a,0x69,0x60,0xdc,0x66,0x9f,0xa2,0xce,0x65,0xf8,0xc9,0x0f,0x47,0xda,0x61,0x28,0xf8,0x7b,0x05,0xc7,0xdb,0x38,0x05,0x45,0x6f,0x10,0x11,0x28,0x1c,0x2d,0x19,0x99,0xd5,0xbc,0x80,0xb4,0x90,0x46,0x20,0xac,0x21,0x92,0x73,0x19,0x0a,0x1e,0x71,0xc4,0x28,0x9d,0x4e,0x31,0xbe,0x6b,0xdf,0x91,0x4c,0xfd,0x7c,0x79,0x81,0x89,0x69,0x32,0x1c,0x28,0xd7,0x10,0x6d,0x48,0x7d,0xff,0x58,0x67,0x71,0xda,0x4f,0xaa,0x4c,0x39,0xe7,0xc2,0xf3,0x25,0x85,0x38,0x54,0x06,0x9a,0x5d,0x48,0x60,0xbb,0x57,0x04,0x81,0x8b,0xa5,0xa7,0xec,0x45,0xff,0x8a,0x82,0x39,0x15,0x0b,0x2a,0x56,0xea,0x54,0xe3,0xbd,0xb6,0x93,0x6a,0x22,0x5c,0x34,0x3c,0xaa,0x48,0xb5,0x05,0x44,0x4e,0x31,0xa9,0x5d,0xc2,0xaa,0x46,0xd1,0x93,0x53,0x41,0x73,0x77,0xc5,0xfc,0x18,0xcb,0xa9,0xf7,0x18,0x80,0x22,0xac,0xf7,0x62,0xba,0xc5,0x6b,0x53,0x5c,0x12,0xe2,0x80,0xaf,0x4e,0x8e,0x3a,0x46,0x7b,0x18,0x10,0x78,0x6b,0x7c,0x88,0x09,0xbc,0x98,0xe3,0xa8,0x4b,0x6c,0x78,0x98,0x4f,0x6c,0xd8,0xab,0x22,0xa7,0xa9,0x54,0xa7,0x3d,0x5a,0x26,0xf2,0x95,0x0c,0x6e,0x92,0x19,0x87,0x0f,0xe8,0x16,0x6b,0xbb,0xd3,0x92,0x0c,0x9b,0xdd,0xb0,0xbf,0x06,0x57,0xf2,0xc1,0x9d,0xc3,0x4e,0xe1,0xe8,0xd7,0x35,0x06,0xdc,0x92,0x93,0x8d,0xc3,0x48,0xe4,0x64,0x97,0xf9,0x60,0xfb,0x5c,0x1b,0xb2,0xc8,0xed,0xce,0x29,0x84,0xab,0xa6,0x42,0x1b,0x15,0xb6,0xc1,0x0d,0xa7,0x79,0x96,0xf6,0x0d,0x33,0xf8,0xd2,0xf8,0x90,0xfb,0xcc,0x3c,0x62,0x91,0xa0,0x89,0x95,0x3c,0xc7,0xc1,0x07,0xd1,0x52,0xac,0x67,0xe7,0x33,0x21,0x74,0xc1,0x00,0x63,0x2e,0x89,0x1b,0xc3,0x50,0x0c,0x97,0x1d,0xbc,0x25,0xa6,0xc7,0x1e,0x37,0xc5,0xe2,0x41,0x0b,0x91,0x06,0xf0,0x83,0x02,0x0f,0x68,0xb1,0x1a,0x09,0x59,0x00,0x85,0xd2,0x98,0x9a,0x53,0x3f,0x1e,0x87,0xa9,0x8f,0x39,0x90,0x8a,0xe1,0x9a,0x79,0x36,0xaa,0x85,0xde,0x6e,0x93,0x4f,0x5f,0xea,0x72,0xe4,0x26,0x3c,0x8b,0x8b,0x9d,0x29,0xf7,0xdc,0xd1,0x26,0x0c,0x1f,0xa4,0xba,0x5b,0x78,0xa9,0x39,0x80,0x6a,0x51,0x65,0x8e,0x48,0xeb,0x96,0xc6,0x5b,0xce,0x27,0xcd,0x05,0xca,0xd0,0x6a,0x2e,0x38,0x51,0x13,0x37,0x9e,0x5a,0xe8,0xc5,0x97,0xbc,0x67,0xaf,0x60,0xc0,0xa2,0x3b,0x18,0x15,0xa0,0xa3,0xc4,0xe9,0x82,0x8e,0xa4,0xc2,0x73,0x1f,0x2d,0x55,0x30,0x49,0x73,0x82,0xf0,0xe5,0xc3,0x25,0xc5,0x6a,0x4c,0xa8,0x28,0xdb,0xfb,0x40,0x06,0x41,0x6b,0xb9,0xe2,0x98,0xf6,0x7b,0x94,0xba,0x1b,0x26,0x27,0x61,0xe8,0x27,0xde,0x22,0x9f,0x98,0x2b,0xa8,0x67,0xf1,0x7b,0x95,0xf1,0xd6,0x4f,0x71,0xaa,0xac,0x8d,0x43,0x7a,0xb4,0x67,0xe4,0x17,0x4c,0xf8,0x11,0x61,0xa6,0xc0,0x0d,0x39,0x72,0x85,0x73,0x7f,0xcf,0xf9,0xd8,0x5f,0x6e,0x0e,0xc5,0x60,0xef,0x29,0x4e,0xfc,0x3d,0xc5,0x71,0x43,0x84,0x1a,0xc8,0x2c,0x52,0xcc,0x88,0x4e,0xf9,0x61,0x28,0x41,0x29,0x0b,0x51,0xc9,0x4f,0x84,0xe3,0x13,0xaf,0x66,0xe0,0x95,0xbb,0x66,0xe7,0x30,0x23,0x9c,0x94,0x11,0x45,0x87,0x6e,0xdb,0x69,0x87,0x3d,0x48,0x03,0x8f,0x02,0x0a,0x78,0x33,0x4f,0xae,0x5c,0x06,0x3d,0x14,0xcd,0x21,0xe7,0x0d,0x3d,0x81,0xfc,0xe5,0xb6,0x65,0x8e,0x9d,0x12,0x30,0xc3,0x66,0x2d,0x16,0x7f,0xfc,0x63,0x46,0x59,0xa1,0x20,0x5c,0xc0,0x76,0x06,0x93,0xd5,0xa0,0x8e,0xc1,0x21,0x15,0xe7,0x47,0xb5,0x87,0x85,0x52,0xcc,0xb2,0x8e,0xa1,0x7c,0x8b,0x1c,0xc5,0x67,0xea,0x04,0xab,0x45,0x47,0x58,0x31,0x68,0xa8,0x0c,0x7d,0x04,0x92,0x5d,0x4b,0x38,0x2d,0x56,0x96,0x91,0x1d,0x4f,0x55,0x4b,0x26,0x39,0xbc,0x39,0x0a,0x69,0xb9,0x38,0x44,0xe7,0xa7,0x88,0xdf,0x9a,0x3c,0x42,0x8c,0xb3,0xb5,0xe6,0x96,0x4f,0x45,0x66,0x77,0x7f,0x7b,0x49,0x9e,0x1e,0x1f,0x2f,0x35,0x49,0xa3,0xf0,0xe1,0x72,0x86,0x10,0x1d,0x4e,0xb1,0x5a,0x03,0x9c,0x20,0xa4,0x2f,0x9f,0x24,0xcd,0xc6,0x4e,0x1a,0xe1,0xf6,0x69,0x84,0x53,0x05,0x6c,0x5b,0xb5,0x4b,0xdd,0x72,0x20,0x9e,0xaf,0xd0,0xf1,0x78,0x0d,0x5f,0xbb,0x87,0x2c,0x77,0x3a,0x9e,0x78,0x4b,0x16,0x51,0xb1,0x96,0xe7,0x03,0x80,0xa1,0xf5,0x94,0xd3,0x9c,0xb9,0x25,0x01,0x3e,0x83,0x8b,0x4a,0x32,0x54,0x25,0x73,0x19,0xb2,0x71,0xa3,0xde,0x52,0x30,0x6e,0x0a,0x55,0xc9,0xa8,0x69,0x22,0x55,0x0e,0xcc,0x57,0xed,0x62,0x51,0x91,0x1c,0xb2,0xa9,0xeb,0x7b,0x13,0x41,0x64,0xdd,0x43,0x81,0x6b,0xac,0x66,0xc2,0x47,0x68,0xef,0xbc,0xd8,0x1b,0xc1,0x65,0x2c,0xb0,0x83,0x67,0x64,0x45,0xfd,0xa3,0xc3,0x93,0x38,0xc4,0x09,0xc5,0xd1,0x1c,0xd1,0xd8,0x28,0x2e,0x08,0x65,0x22,0x8f,0x3c,0xeb,0x3c,0x45,0xbe,0xc6,0xd8,0x24,0xe1,0xa8,0x0d,0x12,0x4a,0x3f,0x11,0xc1,0x84,0xf5,0x44,0x97,0x71,0xe4,0x83,0x87,0x39,0x62,0x11,0xd7,0xca,0x14,0x65,0x1e,0x62,0x63,0x11,0x43,0x43,0x1d,0x29,0x8c,0x8e,0x29,0x4a,0xb9,0x8b,0x16,0xd8,0xc3,0xc3,0x39,0x09,0x75,0x03,0x9c,0xbe,0x74,0xc9,0x99,0x7d,0x14,0xa7,0x5e,0xef,0x2b,0x75,0x15,0x92,0xa4,0x69,0x0c,0xb5,0x81,0x79,0xc3,0xb9,0x8e,0xb3,0x09,0x93,0xb9,0xef,0x55,0xec,0x45,0xba,0x80,0x21,0x97,0xed,0x34,0xb3,0x15,0x4a,0xc2,0x1f,0xf9,0xbc,0x78,0x87,0x0e,0x08,0xb3,0xf1,0x49,0x6d,0x75,0xf4,0x58,0xb7,0xb1,0x42,0x76,0x02,0x57,0x3a,0xe6,0x03,0xa6,0xa8,0x8f,0x6f,0x7c,0x42,0x4a,0x83,0x23,0xa1,0xa1,0x81,0x7a,0xf1,0x80,0xb5,0x37,0x5c,0x10,0x42,0xbe,0xdd,0x29,0x13,0xa4,0x67,0xd9,0x9a,0x88,0x6c,0xae,0xaa,0x7b,0x26,0x8c,0xda,0x11,0x9b,0x36,0xa3,0x50,0x78,0x36,0xc1,0x73,0x7d,0x16,0x5a,0xb5,0x40,0x67,0xd0,0x01,0x77,0xfc,0x32,0x6a,0x85,0x39,0x6b,0x29,0xa6,0x94,0x0b,0x6c,0x1e,0x74,0xb1,0x82,0x80,0xa1,0x63,0x62,0x1a,0x6c,0x26,0x59,0x34,0x2d,0x6a,0x63,0x20,0x95,0x8b,0x4c,0x7f,0xc0,0x72,0xb9,0x08,0xc7,0xb3,0x8e,0x09,0xe5,0x76,0xee,0xc0,0x7c,0x8c,0xe5,0x9d,0x08,0x46,0xab,0x83,0x83,0xd9,0xbc,0xa0,0x81,0xbd,0x67,0x9d,0x59,0x3a,0xf7,0x70,0xec,0x76,0xd9,0xe1,0xb5,0x45,0x4a,0x81,0xcd,0x9a,0x25,0x0a,0x8f,0x62,0x29,0x1c,0x9d,0x0b,0x5a,0x1b,0x21,0x35,0x56,0x24,0x20,0x36,0xb8,0xea,0x14,0x14,0x27,0x7d,0x59,0x11,0x76,0x0f,0x0e,0x19,0x99,0x2a,0x9a,0xe1,0x50,0xb3,0xd4,0x1c,0x12,0xcc,0xed,0xd7,0xb8,0x1a,0x45,0xac,0xba,0xfd,0x84,0x32,0x86,0x1f,0x86,0x01,0x4a,0xb9,0x68,0x99,0xa3,0x86,0x19,0xaf,0x89,0x4c,0xd0,0x28,0xdf,0x1e,0xee,0xed,0x29,0x1b,0x91,0x8d,0x3e,0x3a,0x48,0x72,0xa5,0x98,0xce,0xbe,0x81,0x46,0xab,0x0d,0x8b,0x93,0x93,0xde,0x21,0xcf,0x86,0xf9,0xb8,0x31,0xb4,0xe1,0xf7,0x4a,0x33,0x9a,0x5e,0x1b,0xe0,0xd4,0xa2,0xdb,0x98,0x06,0x12,0xf1,0xc6,0xc0,0xd4,0x15,0x36,0x06,0x36,0x7d,0x65,0xe3,0x02,0xa6,0x4f,0x6d,0xce,0x3f,0xee,0x7b,0xda,0x6c,0x7c,0x0e,0xbf,0xa9,0x04,0xfa,0xa4,0x91,0x75,0xb5,0xe7,0x28,0x9f,0x8f,0x4a,0xb4,0x0f,0x77,0x54,0xe4,0x8d,0xfa,0x0b,0x87,0x2e,0x31,0x6d,0x5a,0x9a,0x5e,0x43,0xe1,0x13,0x6d,0x67,0x4a,0x23,0x50,0x47,0x7c,0xc8,0x07,0xa2,0x12,0x45,0x1c,0xd5,0x26,0x4b,0xaa,0xe9,0x02,0x24,0x79,0xdb,0xda,0x00,0xa8,0x70,0xde,0xd5,0xe0,0xfa,0xea,0x03,0x85,0xb8,0xd9,0x8d,0x1a,0xb4,0x31,0x20,0x8b,0x1f,0x8d,0x2a,0x79,0xbb,0xfb,0xd7,0x02,0x74,0x15,0x6f,0x77,0xf3,0xcc,0x83,0x6b,0x04,0x20,0x15,0x32,0x46,0xd5,0xd3,0xa8,0x32,0x00,0x52,0xc5,0x3c,0xbb,0x5f,0xcd,0xee,0x97,0xb2,0x0d,0x21,0x59,0x36,0x22,0xe8,0x85,0xec,0x61,0x35,0x7b,0x58,0xca,0xde,0xab,0x66,0xef,0x95,0xb2,0xf7,0xab,0xd9,0xfb,0xa5,0xec,0x83,0x6a,0xf6,0xc1,0x35,0xb8,0xb0,0x57,0x04,0x79,0x52,0x05,0x79,0xa2,0x31,0x28,0x8b,0x88,0x75,0x9a,0xd2,0x10,0x80,0xf9,0x39,0xc6,0xb9,0x76,0x66,0x11,0x8d,0x2d,0x9e,0xd8,0x3a,0xa7,0x8d,0x7d,0x13,0x1e,0x8f,0x57,0xaf,0x71,0x96,0x1b,0x43,0x3e,0xd8,0xdf,0xf6,0x1c,0xf0,0xbf,0xb7,0x23,0x7e,0x10,0xfb,0xe2,0x3b,0xac,0x4f,0x68,0xf6,0x6a,0x73,0xae,0x99,0xcc,0xeb,0x11,0x0a,0xbb,0x4a,0xd0,0x50,0x9a,0xc9,0x95,0xec,0x7e,0x29,0x7b,0x50,0xcd,0x1e,0x94,0xb2,0x87,0xd5,0xec,0xa1,0xce,0xa6,0xa5,0x89,0xac,0x91,0x39,0x1d,0xfa,0x4a,0xdb,0x4b,0x7a,0xc6,0x06,0x91,0x5f,0x25,0x47,0x5f,0x35,0x43,0x31,0x55,0xfa,0xaa,0x19,0x8a,0x89,0xd3,0x57,0x2b,0x50,0xc5,0x2a,0xaf,0x86,0xe8,0xa7,0x26,0x20,0x50,0x4a,0x87,0x58,0x57,0xd2,0xd1,0xef,0x9e,0x0c,0xb9,0x35,0x59,0x86,0x6a,0x6d,0x69,0x14,0x3b,0x87,0x74,0xca,0x03,0x99,0x11,0x28,0x70,0x28,0x6c,0xb5,0x11,0x6b,0x92,0x5d,0x69,0xc4,0x9c,0xbb,0xb7,0x12,0xbb,0x38,0xb0,0xe3,0x44,0x2d,0xd3,0xd4,0x0d,0x98,0xf4,0xa0,0xa0,0x44,0x57,0x84,0xcf,0x6f,0x8a,0x79,0x57,0x83,0xde,0xca,0x09,0x2f,0x05,0xbc,0x39,0x49,0xfd,0xea,0x90,0x37,0x07,0xb7,0x95,0xb3,0x60,0x9e,0x51,0x72,0xa8,0x53,0xe0,0x0d,0xd1,0xb3,0x68,0xe8,0xd5,0xcf,0x52,0xcc,0xa3,0x53,0x14,0x7a,0x24,0x6c,0xc1,0xa7,0xe7,0x05,0xf7,0x0c,0x64,0x8b,0x9e,0x69,0x53,0x4a,0x41,0x6c,0x4a,0xbb,0x1b,0x26,0x34,0xaa,0xdc,0x0f,0x0a,0x8e,0xea,0x2b,0xfd,0xbf,0x55,0x13,0x1f,0xd5,0x39,0x1c,0x89,0x2d,0xce,0x50,0xc0,0x25,0x18,0xcc,0x23,0x41,0xf3,0xb4,0x3b,0xd6,0xab,0x3b,0xda,0xa7,0x41,0x32,0x15,0xff,0x2e,0xac,0xae,0x25,0x8e,0xc4,0x9d,0x9d,0x84,0x17,0xf4,0xcc,0x96,0xf6,0x40,0xef,0xc5,0xc8,0xf1,0x99,0x38,0x5b,0x22,0x5d,0x3f,0x4f,0x36,0x0f,0xc5,0x71,0xd4,0xde,0x92,0xb7,0xb4,0xc5,0xf7,0x1d,0x91,0x62,0x20,0x9a,0x69,0xfe,0x8b,0x1a,0x1b,0x57,0x49,0xbe,0xf8,0x32,0x9a,0x29,0x98,0x5b,0x25,0xda,0xc4,0x1c,0xbf,0x9c,0xea,0x77,0x97,0x97,0x2f,0xbf,0x36,0xc9,0x35,0x04,0x63,0x52,0x15,0x16,0xc5,0xf9,0x05,0x14,0xbf,0xcf,0x3d,0xc6,0xaf,0xce,0xeb,0x8b,0xff,0xab,0xa1,0xdd,0xa7,0xcd,0x56,0x5f,0x83,0xf2,0x17,0xda,0x67,0x59,0x25,0xfb,0x87,0xdf,0x48,0x76,0x5f,0x91,0x5d,0x28,0xbe,0x12,0xf0,0xff,0x72,0xb2,0xdf,0x6a,0xcf,0x69,0x95,0xec,0xf9,0xe8,0xcb,0xd8,0x5d,0x2c,0x5f,0x0d,0xfd,0x7f,0x39,0xdd,0xaf,0xc8,0xa2,0x7d,0x3d,0x5e,0x6b,0x9a,0x6b,0x79,0x6d,0x56,0x41,0x36,0x26,0x5a,0xfd,0x23,0x60,0x5f,0xb0,0xc9,0x0b,0x8e,0x7d,0xe5,0x06,0xb2,0x38,0x4b,0xac,0x06,0xc8,0x74,0xb8,0x41,0xf9,0x9a,0x25,0x2c,0xee,0xc3,0x23,0x36,0xb6,0xc1,0x92,0xa2,0x10,0xf3,0x01,0xa6,0x1b,0x21,0x37,0x78,0x3d,0x38,0x91,0x44,0x1c,0xc1,0xbd,0x3d,0x77,0x17,0x6d,0xb0,0xe6,0x4c,0xec,0xae,0x74,0x3d,0x3a,0xc3,0xd2,0x24,0x88,0x18,0x81,0x03,0x70,0x61,0x9d,0x92,0xf2,0x46,0x2c,0x41,0x0b,0xaf,0x5f,0x42,0x8b,0x36,0x3b,0x19,0x29,0x5b,0x37,0x91,0x37,0xc1,0x28,0x45,0xe1,0x0b,0x3d,0x1a,0x65,0xd4,0x99,0x0b,0xcd,0xb5,0x7c,0xf3,0x85,0x89,0x27,0x9b,0xe9,0x19,0x3f,0x71,0x6a,0xe3,0x55,0x94,0x52,0x71,0x3c,0x79,0x6a,0xee,0xc5,0x92,0x56,0x08,0x42,0x1f,0xc1,0xbe,0x1d,0x9b,0x16,0x41,0xda,0x3a,0x5c,0x51,0x94,0xd6,0x8a,0xcb,0x91,0xb9,0x02,0x26,0xc6,0x95,0xcf,0xc1,0x25,0x1e,0x3d,0xd4,0xe6,0xa7,0x64,0x95,0x37,0x56,0xb1,0x5f,0x8f,0x07,0x60,0xc1,0xbe,0xea,0x8a,0xb0,0x54,0x71,0x26,0x22,0x4e,0x6a,0xef,0xe8,0x34,0x33,0xe5,0x35,0x04,0x54,0xa7,0xa1,0xd5,0x99,0xbd,0xa2,0x00,0x21,0x02,0xda,0x6b,0x1a,0xa6,0x89,0xa6,0xbe,0xe2,0xce,0x20,0xdc,0xaa,0x69,0xc4,0x5f,0x21,0x2a,0xec,0xe8,0xc7,0x7e,0x39,0xfc,0x60,0xc4,0x7f,0xfb,0x07,0x5f,0x51,0xfb,0xc9,0x20,0x51,0x00,0x00
};
AsyncWebServer webserver(80);
#endif
 
#if PROBEREQUESTS
#include <esp_wifi.h>
#endif

#if WEBSOCKETS
AsyncWebSocket ws("/ws");
AsyncEventSource events("/events");

void onWsEvent(AsyncWebSocket * server, AsyncWebSocketClient * client, AwsEventType type, void * arg, uint8_t *data, size_t len){
  
  if(type == WS_EVT_CONNECT){
    Serial.printf("ws[%s][%u] connect\n", server->url(), client->id());
    //client->printf("You are connected Client %u :)", client->id());
    client->text(graphDataToWS);
    client->ping();
  } else if(type == WS_EVT_DISCONNECT){
    Serial.printf("ws[%s][%u] disconnect\n", server->url(), client->id());
  } else if(type == WS_EVT_ERROR){
    Serial.printf("ws[%s][%u] error(%u): %s\n", server->url(), client->id(), *((uint16_t*)arg), (char*)data);
  } else if(type == WS_EVT_PONG){
    Serial.printf("ws[%s][%u] pong[%u]: %s\n", server->url(), client->id(), len, (len)?(char*)data:"");
  } else if(type == WS_EVT_DATA){
    AwsFrameInfo * info = (AwsFrameInfo*)arg;
    String msg = "";
    if(info->final && info->index == 0 && info->len == len){
      //the whole message is in a single frame and we got all of it's data
      Serial.printf("ws[%s][%u] %s-message[%llu]: ", server->url(), client->id(), (info->opcode == WS_TEXT)?"text":"binary", info->len);

      if(info->opcode == WS_TEXT){
        for(size_t i=0; i < info->len; i++) {
          msg += (char) data[i];
        }
      } else {
        char buff[3];
        for(size_t i=0; i < info->len; i++) {
          sprintf(buff, "%02x ", (uint8_t) data[i]);
          msg += buff ;
        }
      }
      Serial.printf("%s\n",msg.c_str());

      if(info->opcode == WS_TEXT)
        
        client->text(msg);
      else
        client->binary("I got your binary message");
    } else {
      //message is comprised of multiple frames or the frame is split into multiple packets
      if(info->index == 0){
        if(info->num == 0)
         Serial.printf("ws[%s][%u] %s-message start\n", server->url(), client->id(), (info->message_opcode == WS_TEXT)?"text":"binary");
         Serial.printf("ws[%s][%u] frame[%u] start[%llu]\n", server->url(), client->id(), info->num, info->len);
      }

      Serial.printf("ws[%s][%u] frame[%u] %s[%llu - %llu]: ", server->url(), client->id(), info->num, (info->message_opcode == WS_TEXT)?"text":"binary", info->index, info->index + len);

      if(info->opcode == WS_TEXT){
        for(size_t i=0; i < len; i++) {
          msg += (char) data[i];
        }
      } else {
        char buff[3];
        for(size_t i=0; i < len; i++) {
          sprintf(buff, "%02x ", (uint8_t) data[i]);
          msg += buff ;
        }
      }
      Serial.printf("%s\n",msg.c_str());

      if((info->index + len) == info->len){
        Serial.printf("ws[%s][%u] frame[%u] end[%llu]\n", server->url(), client->id(), info->num, info->len);
        if(info->final){
          Serial.printf("ws[%s][%u] %s-message end\n", server->url(), client->id(), (info->message_opcode == WS_TEXT)?"text":"binary");
          if(info->message_opcode == WS_TEXT)
            client->text(msg);
          else
            client->binary("I got your binary message");
        }
      }
    }
  }
}
#endif

#if MQTT
void receivedMessage(const MqttClient* source, const Topic& topic, const char* payload, size_t length)
{
  Serial.print("Received message on topic '"); Serial.print(receivedTopic.c_str());Serial.print("' with payload = ");Serial.println(payload);  
  
  if (receivedTopic == "command")
  {
    mac[0] = atoi(&payload[0]);mac[1] = atoi(&payload[3]);mac[2] = atoi(&payload[6]);mac[3] = atoi(&payload[9]);mac[4] = atoi(&payload[12]);mac[5] = atoi(&payload[15]);
    
  }
}

void sendCommand()  {

  esp_wifi_set_mac(ESP_IF_WIFI_AP, mac);
  Serial.print("Command sent to remote device :  ");Serial.print(mac[0]);Serial.print("/");Serial.print(mac[1]);Serial.print("/");Serial.print(mac[2]);Serial.print("/");Serial.print(mac[3]);Serial.print("/");Serial.print(mac[4]);Serial.print("/");Serial.print(mac[5]);Serial.println("/");
 }
#endif

unsigned long getTime() {
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    //Serial.println("Failed to obtain time");
    return(0);
  }
  time(&now);
  return now;
}

void setup(){
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  WiFi.mode(WIFI_AP_STA);
  WiFi.softAP(apSSID, apPassword, apChannel, hidden);
  esp_wifi_set_event_mask(WIFI_EVENT_MASK_NONE); // This line is must to activate probe request received event handler.
 
  WiFi.begin(ssid, password);
  if (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.printf("STA: Failed!\n");
    WiFi.disconnect(false);
    delay(1000);
    WiFi.begin(ssid, password);
  }
  
  Serial.print(F("*CONNECTED* IP: "));Serial.println(WiFi.localIP());
 
  configTime(0, 0, ntpServer);
  epoch = getTime();
  Serial.print("Epoch Time: ");Serial.println(epoch);
  delay(500);
  Epoch = String(epoch);
  
  //Send OTA events to the browser
  ArduinoOTA.onStart([]() { events.send("Update Start", "ota"); });
  ArduinoOTA.onEnd([]() { events.send("Update End", "ota"); });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    char p[32];
    sprintf(p, "Progress: %u%%\n", (progress/(total/100)));
    events.send(p, "ota");
  });
  ArduinoOTA.onError([](ota_error_t error) {
    if(error == OTA_AUTH_ERROR) events.send("Auth Failed", "ota");
    else if(error == OTA_BEGIN_ERROR) events.send("Begin Failed", "ota");
    else if(error == OTA_CONNECT_ERROR) events.send("Connect Failed", "ota");
    else if(error == OTA_RECEIVE_ERROR) events.send("Recieve Failed", "ota");
    else if(error == OTA_END_ERROR) events.send("End Failed", "ota");
  });
  ArduinoOTA.setHostname(apSSID);
  ArduinoOTA.begin();
  MDNS.addService("http","tcp",80);
  LITTLEFS.begin();
  ws.onEvent(onWsEvent);
  
#if ASYNCWEBSERVER
  webserver.addHandler(&ws);
  events.onConnect([](AsyncEventSourceClient *client){
    client->send("hello!",NULL,millis(),1000);
  });
  webserver.addHandler(&events);
  webserver.addHandler(new SPIFFSEditor(MYFS, http_username,http_password));
  webserver.on("/heap", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", String(ESP.getFreeHeap()));
  });
  webserver.on("/", HTTP_GET, [](AsyncWebServerRequest * request) 
    {
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, sizeof(index_html_gz));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
    });
  webserver.serveStatic("/", MYFS, "/").setDefaultFile("index.html");
  webserver.onNotFound([](AsyncWebServerRequest *request){
    Serial.printf("NOT_FOUND: ");
    if(request->method() == HTTP_GET)
      Serial.printf("GET");
    else if(request->method() == HTTP_POST)
      Serial.printf("POST");
    else if(request->method() == HTTP_DELETE)
      Serial.printf("DELETE");
    else if(request->method() == HTTP_PUT)
      Serial.printf("PUT");
    else if(request->method() == HTTP_PATCH)
      Serial.printf("PATCH");
    else if(request->method() == HTTP_HEAD)
      Serial.printf("HEAD");
    else if(request->method() == HTTP_OPTIONS)
      Serial.printf("OPTIONS");
    else
      Serial.printf("UNKNOWN");
    Serial.printf(" http://%s%s\n", request->host().c_str(), request->url().c_str());

    if(request->contentLength()){
      Serial.printf("_CONTENT_TYPE: %s\n", request->contentType().c_str());
      Serial.printf("_CONTENT_LENGTH: %u\n", request->contentLength());
    }

    int headers = request->headers();
    int i;
    for(i=0;i<headers;i++){
      AsyncWebHeader* h = request->getHeader(i);
      Serial.printf("_HEADER[%s]: %s\n", h->name().c_str(), h->value().c_str());
    }

    int params = request->params();
    for(i=0;i<params;i++){
      AsyncWebParameter* p = request->getParam(i);
      if(p->isFile()){
        Serial.printf("_FILE[%s]: %s, size: %u\n", p->name().c_str(), p->value().c_str(), p->size());
      } else if(p->isPost()){
        Serial.printf("_POST[%s]: %s\n", p->name().c_str(), p->value().c_str());
      } else {
        Serial.printf("_GET[%s]: %s\n", p->name().c_str(), p->value().c_str());
      }
    }

    request->send(404);
  });
  webserver.onFileUpload([](AsyncWebServerRequest *request, const String& filename, size_t index, uint8_t *data, size_t len, bool final){
    if(!index)
      Serial.printf("UploadStart: %s\n", filename.c_str());
      Serial.printf("%s", (const char*)data);
      if(final)
      Serial.printf("UploadEnd: %s (%u)\n", filename.c_str(), index+len);
  });
  webserver.onRequestBody([](AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total){
    if(!index)
      Serial.printf("BodyStart: %u\n", total);
      Serial.printf("%s", (const char*)data);
      if(index + len == total)
      Serial.printf("BodyEnd: %u\n", total);
  });
  
  //Followin line must be added before server.begin() to allow local lan request see : https://github.com/me-no-dev/ESPAsyncWebServer/issues/726
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Origin", "*");
  webserver.begin();
#endif

#if MQTT
    broker.begin();
    // ============= Client Subscribe ================
    myClient.setCallback(receivedMessage);
    myClient.subscribe(receivedTopic);
    myClient.subscribe(sentTopic);
#endif

#if PROBEREQUESTS
    WiFi.onEvent(probeRequest, SYSTEM_EVENT_AP_PROBEREQRECVED);
    Serial.print("Waiting for probe requests ... ");
#endif

#if FIRSTTIME
  File f = LITTLEFS.open(dataFile, "w");
  f.print("[8,\"Epoch\",\"Location\",\"V\",\"S\",\"T\",\"H\",\"P\",\"L\"]"); // See http://davidgiard.com/2018/11/02/EmbeddingQuotesWithinACString.aspx
  f.close();
  Serial.println("Wrote first line to file: [8,\"Epoch\",\"Location\",\"V\",\"S\",\"T\",\"H\",\"P\",\"L\"]");Serial.println();
#endif

} // End of setup

void loop(){
  ArduinoOTA.handle();
  ws.cleanupClients();
  if (ProbeReceived == 1) {
  sendGraphData();
  ProbeReceived = 0;
  }
}  // End of loop

#if PROBEREQUESTS
void probeRequest(WiFiEvent_t event, WiFiEventInfo_t info) 
{
    Serial.print("Probe Received :  ");
    for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", info.ap_probereqrecved.mac[i]);
    if (i < 5)Serial.print(":");
    }
    Serial.println();

      if (info.ap_probereqrecved.mac[0] == 6 || info.ap_probereqrecved.mac[0] == 16 || info.ap_probereqrecved.mac[0] == 26 || info.ap_probereqrecved.mac[0] == 36 || info.ap_probereqrecved.mac[0] == 46 || info.ap_probereqrecved.mac[0] == 56 || info.ap_probereqrecved.mac[0] == 66 || info.ap_probereqrecved.mac[0] == 76 || info.ap_probereqrecved.mac[0] == 86 || info.ap_probereqrecved.mac[0] == 96 || info.ap_probereqrecved.mac[0] == 106 || info.ap_probereqrecved.mac[0] == 116 || info.ap_probereqrecved.mac[0] == 126 || info.ap_probereqrecved.mac[0] == 136 || info.ap_probereqrecved.mac[0] == 146 || info.ap_probereqrecved.mac[0] == 156 || info.ap_probereqrecved.mac[0] == 166 || info.ap_probereqrecved.mac[0] == 176 || info.ap_probereqrecved.mac[0] == 186 || info.ap_probereqrecved.mac[0] == 196 || info.ap_probereqrecved.mac[0] == 206 || info.ap_probereqrecved.mac[0] == 216 || info.ap_probereqrecved.mac[0] == 226 || info.ap_probereqrecved.mac[0] == 236 || info.ap_probereqrecved.mac[0] == 246) // only accept data from certain devices.
       {

      //sendCommand();

      if (info.ap_probereqrecved.mac[1] == 06) 
      { // only accept data from device with voltage as a sensor type at byte 1.
               if (device == 06) { for (int i = 0; i < 4; i++) sensorTypes[i] = Livingroom[i];} 
               if (device == 16) { for (int i = 0; i < 4; i++) sensorTypes[i] = Kitchen[i];}
               if (device == 26) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom1[i];} 
               if (device == 36) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom2[i];}
               if (device == 46) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom3[i];} 
               if (device == 56) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bedroom4[i];}
               if (device == 66) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom1[i];} 
               if (device == 76) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom2[i];}
               if (device == 86) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom3[i];} 
               if (device == 96) { for (int i = 0; i < 4; i++) sensorTypes[i] = Bathroom4[i];}
               if (device == 106) { for (int i = 0; i < 4; i++) sensorTypes[i] = Laundry[i];} 
               if (device == 116) { for (int i = 0; i < 4; i++) sensorTypes[i] = Boiler[i];}
               if (device == 126) { for (int i = 0; i < 4; i++) sensorTypes[i] = Workshop[i];} 
               if (device == 136) { for (int i = 0; i < 4; i++) sensorTypes[i] = Garage[i];}
               if (device == 146) { for (int i = 0; i < 4; i++) sensorTypes[i] = Office[i];}
               if (device == 156) { for (int i = 0; i < 4; i++) sensorTypes[i] = Tank[i];} 
               if (device == 166) { for (int i = 0; i < 4; i++) sensorTypes[i] = Solar[i];}
               deviceStatus[0] = info.ap_probereqrecved.mac[2];
               deviceStatus[1] = info.ap_probereqrecved.mac[3];
               deviceStatus[2] = info.ap_probereqrecved.mac[4];
               deviceStatus[3] = info.ap_probereqrecved.mac[5];
      } else {

      device = info.ap_probereqrecved.mac[0];
      rssi = info.ap_probereqrecved.rssi;         
      voltage = info.ap_probereqrecved.mac[1];
      voltage = voltage * 2 / 100;
                  
      sensorValues[0] = info.ap_probereqrecved.mac[2];
      sensorValues[1] = info.ap_probereqrecved.mac[3];
      sensorValues[2] = info.ap_probereqrecved.mac[4];
      sensorValues[3] = info.ap_probereqrecved.mac[5];
              
      }

      if (voltage > 2.50 && voltage < 3.60) 
      {
      
      sprintf (str, "{");
      sprintf (s, "\"%s\":\"%i\"", "Location", device);    strcat (str, s);
      sprintf (s, ",\"%s\":\"%.2f\"", "Voltage", voltage);    strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[0], sensorValues[0]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[1], sensorValues[1]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[2], sensorValues[2]); strcat (str, s);
      sprintf (s, ",\"%i\":\"%i\"", sensorTypes[3], sensorValues[3]); strcat (str, s);
      sprintf (s, "}"); strcat (str, s);
              
      Serial.println();
      Serial.println("Following ## Sensor Values ## receiced from remote device  & published via MQTT: ");
      Serial.println(str);
      Serial.println();
      
#if MQTT
      //myClient.publish("sensor", sensorData);
      myClient.publish("sensor", str);
#endif
                   
#if APPENDTOLITTLEFS
     epoch = getTime();
     Serial.print("Epoch Time: ");Serial.println(epoch); 
     
     graphData = ",";graphData += epoch;graphData += ",";graphData += device;graphData += ",";graphData += voltage;graphData += ",";graphData += rssi;graphData += ",";graphData += sensorValues[0];graphData += ",";graphData += sensorValues[1];graphData += ",";graphData += sensorValues[2];graphData += ",";graphData += sensorValues[3];graphData += "]";
     
     File f = LITTLEFS.open(dataFile, "r+"); // See https://github.com/lorol/LITTLEFS/issues/33
     Serial.print("File size: "); Serial.println(f.size());
     f.seek((f.size()-1), SeekSet);
     Serial.print("Position: "); Serial.println(f.position());
     f.print(graphData);Serial.println();
     Serial.print("Appended to file: "); Serial.println(graphData);
     Serial.print("File size: "); Serial.println(f.size());
     f.close(); 
     /*
     f = LITTLEFS.open(dataFile, "r");
     Serial.print("Reading from '");
     Serial.print(dataFile);
     Serial.println("' file....");
     while(f.available()){
     Serial.write(f.read());
     }
     f.close();
     */
     Serial.println();
#endif
      
      
      if (voltage < 2.50) {      // if voltage of battery gets to low, print the warning below.
         //myClient.publish("Warning/Battery Low", location);
       }
     }

   if (info.ap_probereqrecved.mac[3] == apChannel) {
     
     sprintf (str, "{");
     sprintf (s, "\"%s\":\"%i\"", "Location", device);    strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "RSSI", info.ap_probereqrecved.rssi); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "MODE", deviceStatus[0]); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "CHANNEL", deviceStatus[1]); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "IP", deviceStatus[2]); strcat (str, s);
     sprintf (s, ",\"%s\":\"%i\"", "Sleeptime", deviceStatus[3]); strcat (str, s);
     sprintf (s, "}"); strcat (str, s);
                           
     Serial.println();
     Serial.println("Following ## Device Status ## receiced from remote device & published via MQTT: ");
     Serial.println(str);Serial.println();
     
#if MQTT                      
     //myClient.publish("Device", deviceData);
     myClient.publish("Device", str);
     ProbeReceived = 1;
#endif      
    }
  }
}
#endif     

void sendGraphData() {
      
     Epoch += "," + String(epoch);Loc += "," + String(device);V += "," + String(voltage, 2);S += "," + String(rssi);T += "," + String(sensorValues[0]);H += "," + String(sensorValues[1]);P += "," + String(sensorValues[2]);L += "," + String(sensorValues[3]);
      
     graphDataToWS = "[" + Epoch + "]," + "[" + Loc + "]," + "[" + V + "]," + "[" + S + "]," + "[" + T + "]," + "[" + H + "]," + "[" + P + "]," + "[" + L + "]";
     Serial.println();
     Serial.print("Graph data size: ");Serial.println(graphDataToWS.length());
     Serial.println("Graph Data: ");Serial.println(graphDataToWS);
      if (graphDataToWS.length() > 1000) {
      Epoch = String(epoch);
      Loc = "";V = "";S = "";T = "";H = "";P = "";L = "";
     //graphDataToWS = "";
     //graphDataToWS.remove(0, 34); // Each record is approximately 34 character long.
    }
 }
